// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fmessages_2eproto;
class BlockListRequest;
class BlockListRequestDefaultTypeInternal;
extern BlockListRequestDefaultTypeInternal _BlockListRequest_default_instance_;
class BlockListResponse;
class BlockListResponseDefaultTypeInternal;
extern BlockListResponseDefaultTypeInternal _BlockListResponse_default_instance_;
class BlockRequest;
class BlockRequestDefaultTypeInternal;
extern BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
class BlockResponse;
class BlockResponseDefaultTypeInternal;
extern BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
class ChangePasswordRequest;
class ChangePasswordRequestDefaultTypeInternal;
extern ChangePasswordRequestDefaultTypeInternal _ChangePasswordRequest_default_instance_;
class ChangePasswordResponse;
class ChangePasswordResponseDefaultTypeInternal;
extern ChangePasswordResponseDefaultTypeInternal _ChangePasswordResponse_default_instance_;
class CheckUserStatusRequest;
class CheckUserStatusRequestDefaultTypeInternal;
extern CheckUserStatusRequestDefaultTypeInternal _CheckUserStatusRequest_default_instance_;
class CheckUserStatusResponse;
class CheckUserStatusResponseDefaultTypeInternal;
extern CheckUserStatusResponseDefaultTypeInternal _CheckUserStatusResponse_default_instance_;
class ConnectionRequest;
class ConnectionRequestDefaultTypeInternal;
extern ConnectionRequestDefaultTypeInternal _ConnectionRequest_default_instance_;
class ConnectionResponse;
class ConnectionResponseDefaultTypeInternal;
extern ConnectionResponseDefaultTypeInternal _ConnectionResponse_default_instance_;
class ForgotAccountRequest;
class ForgotAccountRequestDefaultTypeInternal;
extern ForgotAccountRequestDefaultTypeInternal _ForgotAccountRequest_default_instance_;
class ForgotAccountResponse;
class ForgotAccountResponseDefaultTypeInternal;
extern ForgotAccountResponseDefaultTypeInternal _ForgotAccountResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class NewHostmachineRequest;
class NewHostmachineRequestDefaultTypeInternal;
extern NewHostmachineRequestDefaultTypeInternal _NewHostmachineRequest_default_instance_;
class NewHostmachineResponse;
class NewHostmachineResponseDefaultTypeInternal;
extern NewHostmachineResponseDefaultTypeInternal _NewHostmachineResponse_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class RequestMessage;
class RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
class ResponseMessage;
class ResponseMessageDefaultTypeInternal;
extern ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
class UnBlockRequest;
class UnBlockRequestDefaultTypeInternal;
extern UnBlockRequestDefaultTypeInternal _UnBlockRequest_default_instance_;
class UnBlockResponse;
class UnBlockResponseDefaultTypeInternal;
extern UnBlockResponseDefaultTypeInternal _UnBlockResponse_default_instance_;
class UpdateRequest;
class UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
class UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserResponse;
class UserResponseDefaultTypeInternal;
extern UserResponseDefaultTypeInternal _UserResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BlockListRequest* Arena::CreateMaybeMessage<::BlockListRequest>(Arena*);
template<> ::BlockListResponse* Arena::CreateMaybeMessage<::BlockListResponse>(Arena*);
template<> ::BlockRequest* Arena::CreateMaybeMessage<::BlockRequest>(Arena*);
template<> ::BlockResponse* Arena::CreateMaybeMessage<::BlockResponse>(Arena*);
template<> ::ChangePasswordRequest* Arena::CreateMaybeMessage<::ChangePasswordRequest>(Arena*);
template<> ::ChangePasswordResponse* Arena::CreateMaybeMessage<::ChangePasswordResponse>(Arena*);
template<> ::CheckUserStatusRequest* Arena::CreateMaybeMessage<::CheckUserStatusRequest>(Arena*);
template<> ::CheckUserStatusResponse* Arena::CreateMaybeMessage<::CheckUserStatusResponse>(Arena*);
template<> ::ConnectionRequest* Arena::CreateMaybeMessage<::ConnectionRequest>(Arena*);
template<> ::ConnectionResponse* Arena::CreateMaybeMessage<::ConnectionResponse>(Arena*);
template<> ::ForgotAccountRequest* Arena::CreateMaybeMessage<::ForgotAccountRequest>(Arena*);
template<> ::ForgotAccountResponse* Arena::CreateMaybeMessage<::ForgotAccountResponse>(Arena*);
template<> ::LoginRequest* Arena::CreateMaybeMessage<::LoginRequest>(Arena*);
template<> ::LoginResponse* Arena::CreateMaybeMessage<::LoginResponse>(Arena*);
template<> ::NewHostmachineRequest* Arena::CreateMaybeMessage<::NewHostmachineRequest>(Arena*);
template<> ::NewHostmachineResponse* Arena::CreateMaybeMessage<::NewHostmachineResponse>(Arena*);
template<> ::RegisterRequest* Arena::CreateMaybeMessage<::RegisterRequest>(Arena*);
template<> ::RegisterResponse* Arena::CreateMaybeMessage<::RegisterResponse>(Arena*);
template<> ::RequestMessage* Arena::CreateMaybeMessage<::RequestMessage>(Arena*);
template<> ::ResponseMessage* Arena::CreateMaybeMessage<::ResponseMessage>(Arena*);
template<> ::UnBlockRequest* Arena::CreateMaybeMessage<::UnBlockRequest>(Arena*);
template<> ::UnBlockResponse* Arena::CreateMaybeMessage<::UnBlockResponse>(Arena*);
template<> ::UpdateRequest* Arena::CreateMaybeMessage<::UpdateRequest>(Arena*);
template<> ::UpdateResponse* Arena::CreateMaybeMessage<::UpdateResponse>(Arena*);
template<> ::UserRequest* Arena::CreateMaybeMessage<::UserRequest>(Arena*);
template<> ::UserResponse* Arena::CreateMaybeMessage<::UserResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageType : int {
  NewHostmachine = 0,
  RegisterType = 1,
  LoginType = 2,
  ForgotAccountType = 3,
  CheckUserStatusType = 4,
  ConnectionType = 5,
  ChangePasswordType = 6,
  UpdateType = 7,
  BlockType = 8,
  UnBlockType = 9,
  GetBlockListType = 10,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = NewHostmachine;
constexpr MessageType MessageType_MAX = GetBlockListType;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class NewHostmachineRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NewHostmachineRequest) */ {
 public:
  inline NewHostmachineRequest() : NewHostmachineRequest(nullptr) {};
  virtual ~NewHostmachineRequest();

  NewHostmachineRequest(const NewHostmachineRequest& from);
  NewHostmachineRequest(NewHostmachineRequest&& from) noexcept
    : NewHostmachineRequest() {
    *this = ::std::move(from);
  }

  inline NewHostmachineRequest& operator=(const NewHostmachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewHostmachineRequest& operator=(NewHostmachineRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewHostmachineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewHostmachineRequest* internal_default_instance() {
    return reinterpret_cast<const NewHostmachineRequest*>(
               &_NewHostmachineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewHostmachineRequest& a, NewHostmachineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewHostmachineRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewHostmachineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewHostmachineRequest* New() const final {
    return CreateMaybeMessage<NewHostmachineRequest>(nullptr);
  }

  NewHostmachineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewHostmachineRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewHostmachineRequest& from);
  void MergeFrom(const NewHostmachineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewHostmachineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NewHostmachineRequest";
  }
  protected:
  explicit NewHostmachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kCertificateFieldNumber = 2,
  };
  // string ip_address = 1;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_address(
      std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // bytes certificate = 2;
  void clear_certificate();
  const std::string& certificate() const;
  void set_certificate(const std::string& value);
  void set_certificate(std::string&& value);
  void set_certificate(const char* value);
  void set_certificate(const void* value, size_t size);
  std::string* mutable_certificate();
  std::string* release_certificate();
  void set_allocated_certificate(std::string* certificate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_certificate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_certificate(
      std::string* certificate);
  private:
  const std::string& _internal_certificate() const;
  void _internal_set_certificate(const std::string& value);
  std::string* _internal_mutable_certificate();
  public:

  // @@protoc_insertion_point(class_scope:NewHostmachineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certificate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class NewHostmachineResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NewHostmachineResponse) */ {
 public:
  inline NewHostmachineResponse() : NewHostmachineResponse(nullptr) {};
  virtual ~NewHostmachineResponse();

  NewHostmachineResponse(const NewHostmachineResponse& from);
  NewHostmachineResponse(NewHostmachineResponse&& from) noexcept
    : NewHostmachineResponse() {
    *this = ::std::move(from);
  }

  inline NewHostmachineResponse& operator=(const NewHostmachineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewHostmachineResponse& operator=(NewHostmachineResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewHostmachineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewHostmachineResponse* internal_default_instance() {
    return reinterpret_cast<const NewHostmachineResponse*>(
               &_NewHostmachineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewHostmachineResponse& a, NewHostmachineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewHostmachineResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewHostmachineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewHostmachineResponse* New() const final {
    return CreateMaybeMessage<NewHostmachineResponse>(nullptr);
  }

  NewHostmachineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewHostmachineResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewHostmachineResponse& from);
  void MergeFrom(const NewHostmachineResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewHostmachineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NewHostmachineResponse";
  }
  protected:
  explicit NewHostmachineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignedCertificateFieldNumber = 2,
    kHostmachineIdFieldNumber = 1,
  };
  // bytes signed_certificate = 2;
  void clear_signed_certificate();
  const std::string& signed_certificate() const;
  void set_signed_certificate(const std::string& value);
  void set_signed_certificate(std::string&& value);
  void set_signed_certificate(const char* value);
  void set_signed_certificate(const void* value, size_t size);
  std::string* mutable_signed_certificate();
  std::string* release_signed_certificate();
  void set_allocated_signed_certificate(std::string* signed_certificate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signed_certificate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signed_certificate(
      std::string* signed_certificate);
  private:
  const std::string& _internal_signed_certificate() const;
  void _internal_set_signed_certificate(const std::string& value);
  std::string* _internal_mutable_signed_certificate();
  public:

  // uint64 hostmachine_id = 1;
  void clear_hostmachine_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostmachine_id() const;
  void set_hostmachine_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostmachine_id() const;
  void _internal_set_hostmachine_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NewHostmachineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_certificate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostmachine_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {};
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordHashFieldNumber = 2,
    kNameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kGenderFieldNumber = 5,
    kBirthDateFieldNumber = 6,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes password_hash = 2;
  void clear_password_hash();
  const std::string& password_hash() const;
  void set_password_hash(const std::string& value);
  void set_password_hash(std::string&& value);
  void set_password_hash(const char* value);
  void set_password_hash(const void* value, size_t size);
  std::string* mutable_password_hash();
  std::string* release_password_hash();
  void set_allocated_password_hash(std::string* password_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password_hash(
      std::string* password_hash);
  private:
  const std::string& _internal_password_hash() const;
  void _internal_set_password_hash(const std::string& value);
  std::string* _internal_mutable_password_hash();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string gender = 5;
  void clear_gender();
  const std::string& gender() const;
  void set_gender(const std::string& value);
  void set_gender(std::string&& value);
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  std::string* mutable_gender();
  std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gender();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gender(
      std::string* gender);
  private:
  const std::string& _internal_gender() const;
  void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // string birth_date = 6;
  void clear_birth_date();
  const std::string& birth_date() const;
  void set_birth_date(const std::string& value);
  void set_birth_date(std::string&& value);
  void set_birth_date(const char* value);
  void set_birth_date(const char* value, size_t size);
  std::string* mutable_birth_date();
  std::string* release_birth_date();
  void set_allocated_birth_date(std::string* birth_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_birth_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_birth_date(
      std::string* birth_date);
  private:
  const std::string& _internal_birth_date() const;
  void _internal_set_birth_date(const std::string& value);
  std::string* _internal_mutable_birth_date();
  public:

  // @@protoc_insertion_point(class_scope:RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {};
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterResponse>(nullptr);
  }

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {};
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordHashFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes password_hash = 2;
  void clear_password_hash();
  const std::string& password_hash() const;
  void set_password_hash(const std::string& value);
  void set_password_hash(std::string&& value);
  void set_password_hash(const char* value);
  void set_password_hash(const void* value, size_t size);
  std::string* mutable_password_hash();
  std::string* release_password_hash();
  void set_allocated_password_hash(std::string* password_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password_hash(
      std::string* password_hash);
  private:
  const std::string& _internal_password_hash() const;
  void _internal_set_password_hash(const std::string& value);
  std::string* _internal_mutable_password_hash();
  public:

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {};
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kVisualizationModeFieldNumber = 3,
    kResponseFieldNumber = 8,
    kEphemeralChatFieldNumber = 4,
    kMessagesTimeoutFieldNumber = 5,
    kSentMessagesFieldNumber = 6,
    kReceivedMessagesFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string visualization_mode = 3;
  void clear_visualization_mode();
  const std::string& visualization_mode() const;
  void set_visualization_mode(const std::string& value);
  void set_visualization_mode(std::string&& value);
  void set_visualization_mode(const char* value);
  void set_visualization_mode(const char* value, size_t size);
  std::string* mutable_visualization_mode();
  std::string* release_visualization_mode();
  void set_allocated_visualization_mode(std::string* visualization_mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_visualization_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_visualization_mode(
      std::string* visualization_mode);
  private:
  const std::string& _internal_visualization_mode() const;
  void _internal_set_visualization_mode(const std::string& value);
  std::string* _internal_mutable_visualization_mode();
  public:

  // string response = 8;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // bool ephemeral_chat = 4;
  void clear_ephemeral_chat();
  bool ephemeral_chat() const;
  void set_ephemeral_chat(bool value);
  private:
  bool _internal_ephemeral_chat() const;
  void _internal_set_ephemeral_chat(bool value);
  public:

  // int32 messages_timeout = 5;
  void clear_messages_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 messages_timeout() const;
  void set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_messages_timeout() const;
  void _internal_set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 sent_messages = 6;
  void clear_sent_messages();
  ::PROTOBUF_NAMESPACE_ID::uint64 sent_messages() const;
  void set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sent_messages() const;
  void _internal_set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 received_messages = 7;
  void clear_received_messages();
  ::PROTOBUF_NAMESPACE_ID::uint64 received_messages() const;
  void set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received_messages() const;
  void _internal_set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visualization_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  bool ephemeral_chat_;
  ::PROTOBUF_NAMESPACE_ID::int32 messages_timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sent_messages_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ForgotAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ForgotAccountRequest) */ {
 public:
  inline ForgotAccountRequest() : ForgotAccountRequest(nullptr) {};
  virtual ~ForgotAccountRequest();

  ForgotAccountRequest(const ForgotAccountRequest& from);
  ForgotAccountRequest(ForgotAccountRequest&& from) noexcept
    : ForgotAccountRequest() {
    *this = ::std::move(from);
  }

  inline ForgotAccountRequest& operator=(const ForgotAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForgotAccountRequest& operator=(ForgotAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForgotAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForgotAccountRequest* internal_default_instance() {
    return reinterpret_cast<const ForgotAccountRequest*>(
               &_ForgotAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ForgotAccountRequest& a, ForgotAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ForgotAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForgotAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForgotAccountRequest* New() const final {
    return CreateMaybeMessage<ForgotAccountRequest>(nullptr);
  }

  ForgotAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForgotAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForgotAccountRequest& from);
  void MergeFrom(const ForgotAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForgotAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ForgotAccountRequest";
  }
  protected:
  explicit ForgotAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:ForgotAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ForgotAccountResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ForgotAccountResponse) */ {
 public:
  inline ForgotAccountResponse() : ForgotAccountResponse(nullptr) {};
  virtual ~ForgotAccountResponse();

  ForgotAccountResponse(const ForgotAccountResponse& from);
  ForgotAccountResponse(ForgotAccountResponse&& from) noexcept
    : ForgotAccountResponse() {
    *this = ::std::move(from);
  }

  inline ForgotAccountResponse& operator=(const ForgotAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForgotAccountResponse& operator=(ForgotAccountResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForgotAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForgotAccountResponse* internal_default_instance() {
    return reinterpret_cast<const ForgotAccountResponse*>(
               &_ForgotAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ForgotAccountResponse& a, ForgotAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ForgotAccountResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForgotAccountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForgotAccountResponse* New() const final {
    return CreateMaybeMessage<ForgotAccountResponse>(nullptr);
  }

  ForgotAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForgotAccountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForgotAccountResponse& from);
  void MergeFrom(const ForgotAccountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForgotAccountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ForgotAccountResponse";
  }
  protected:
  explicit ForgotAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:ForgotAccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CheckUserStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckUserStatusRequest) */ {
 public:
  inline CheckUserStatusRequest() : CheckUserStatusRequest(nullptr) {};
  virtual ~CheckUserStatusRequest();

  CheckUserStatusRequest(const CheckUserStatusRequest& from);
  CheckUserStatusRequest(CheckUserStatusRequest&& from) noexcept
    : CheckUserStatusRequest() {
    *this = ::std::move(from);
  }

  inline CheckUserStatusRequest& operator=(const CheckUserStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserStatusRequest& operator=(CheckUserStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckUserStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUserStatusRequest*>(
               &_CheckUserStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CheckUserStatusRequest& a, CheckUserStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserStatusRequest* New() const final {
    return CreateMaybeMessage<CheckUserStatusRequest>(nullptr);
  }

  CheckUserStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckUserStatusRequest& from);
  void MergeFrom(const CheckUserStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckUserStatusRequest";
  }
  protected:
  explicit CheckUserStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:CheckUserStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CheckUserStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckUserStatusResponse) */ {
 public:
  inline CheckUserStatusResponse() : CheckUserStatusResponse(nullptr) {};
  virtual ~CheckUserStatusResponse();

  CheckUserStatusResponse(const CheckUserStatusResponse& from);
  CheckUserStatusResponse(CheckUserStatusResponse&& from) noexcept
    : CheckUserStatusResponse() {
    *this = ::std::move(from);
  }

  inline CheckUserStatusResponse& operator=(const CheckUserStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserStatusResponse& operator=(CheckUserStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckUserStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUserStatusResponse*>(
               &_CheckUserStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CheckUserStatusResponse& a, CheckUserStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckUserStatusResponse* New() const final {
    return CreateMaybeMessage<CheckUserStatusResponse>(nullptr);
  }

  CheckUserStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckUserStatusResponse& from);
  void MergeFrom(const CheckUserStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckUserStatusResponse";
  }
  protected:
  explicit CheckUserStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:CheckUserStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ConnectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionRequest) */ {
 public:
  inline ConnectionRequest() : ConnectionRequest(nullptr) {};
  virtual ~ConnectionRequest();

  ConnectionRequest(const ConnectionRequest& from);
  ConnectionRequest(ConnectionRequest&& from) noexcept
    : ConnectionRequest() {
    *this = ::std::move(from);
  }

  inline ConnectionRequest& operator=(const ConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionRequest& operator=(ConnectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectionRequest*>(
               &_ConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConnectionRequest& a, ConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionRequest* New() const final {
    return CreateMaybeMessage<ConnectionRequest>(nullptr);
  }

  ConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionRequest& from);
  void MergeFrom(const ConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionRequest";
  }
  protected:
  explicit ConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:ConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ConnectionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionResponse) */ {
 public:
  inline ConnectionResponse() : ConnectionResponse(nullptr) {};
  virtual ~ConnectionResponse();

  ConnectionResponse(const ConnectionResponse& from);
  ConnectionResponse(ConnectionResponse&& from) noexcept
    : ConnectionResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionResponse& operator=(const ConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionResponse& operator=(ConnectionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionResponse*>(
               &_ConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ConnectionResponse& a, ConnectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionResponse* New() const final {
    return CreateMaybeMessage<ConnectionResponse>(nullptr);
  }

  ConnectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionResponse& from);
  void MergeFrom(const ConnectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionResponse";
  }
  protected:
  explicit ConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactIpAddressFieldNumber = 1,
  };
  // string contact_ip_address = 1;
  void clear_contact_ip_address();
  const std::string& contact_ip_address() const;
  void set_contact_ip_address(const std::string& value);
  void set_contact_ip_address(std::string&& value);
  void set_contact_ip_address(const char* value);
  void set_contact_ip_address(const char* value, size_t size);
  std::string* mutable_contact_ip_address();
  std::string* release_contact_ip_address();
  void set_allocated_contact_ip_address(std::string* contact_ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contact_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contact_ip_address(
      std::string* contact_ip_address);
  private:
  const std::string& _internal_contact_ip_address() const;
  void _internal_set_contact_ip_address(const std::string& value);
  std::string* _internal_mutable_contact_ip_address();
  public:

  // @@protoc_insertion_point(class_scope:ConnectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contact_ip_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChangePasswordRequest) */ {
 public:
  inline ChangePasswordRequest() : ChangePasswordRequest(nullptr) {};
  virtual ~ChangePasswordRequest();

  ChangePasswordRequest(const ChangePasswordRequest& from);
  ChangePasswordRequest(ChangePasswordRequest&& from) noexcept
    : ChangePasswordRequest() {
    *this = ::std::move(from);
  }

  inline ChangePasswordRequest& operator=(const ChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordRequest& operator=(ChangePasswordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePasswordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordRequest*>(
               &_ChangePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChangePasswordRequest& a, ChangePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePasswordRequest* New() const final {
    return CreateMaybeMessage<ChangePasswordRequest>(nullptr);
  }

  ChangePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePasswordRequest& from);
  void MergeFrom(const ChangePasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChangePasswordRequest";
  }
  protected:
  explicit ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kOldPasswordHashFieldNumber = 2,
    kNewPasswordHashFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes old_password_hash = 2;
  void clear_old_password_hash();
  const std::string& old_password_hash() const;
  void set_old_password_hash(const std::string& value);
  void set_old_password_hash(std::string&& value);
  void set_old_password_hash(const char* value);
  void set_old_password_hash(const void* value, size_t size);
  std::string* mutable_old_password_hash();
  std::string* release_old_password_hash();
  void set_allocated_old_password_hash(std::string* old_password_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_old_password_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_old_password_hash(
      std::string* old_password_hash);
  private:
  const std::string& _internal_old_password_hash() const;
  void _internal_set_old_password_hash(const std::string& value);
  std::string* _internal_mutable_old_password_hash();
  public:

  // bytes new_password_hash = 3;
  void clear_new_password_hash();
  const std::string& new_password_hash() const;
  void set_new_password_hash(const std::string& value);
  void set_new_password_hash(std::string&& value);
  void set_new_password_hash(const char* value);
  void set_new_password_hash(const void* value, size_t size);
  std::string* mutable_new_password_hash();
  std::string* release_new_password_hash();
  void set_allocated_new_password_hash(std::string* new_password_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_password_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_password_hash(
      std::string* new_password_hash);
  private:
  const std::string& _internal_new_password_hash() const;
  void _internal_set_new_password_hash(const std::string& value);
  std::string* _internal_mutable_new_password_hash();
  public:

  // @@protoc_insertion_point(class_scope:ChangePasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_password_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChangePasswordResponse) */ {
 public:
  inline ChangePasswordResponse() : ChangePasswordResponse(nullptr) {};
  virtual ~ChangePasswordResponse();

  ChangePasswordResponse(const ChangePasswordResponse& from);
  ChangePasswordResponse(ChangePasswordResponse&& from) noexcept
    : ChangePasswordResponse() {
    *this = ::std::move(from);
  }

  inline ChangePasswordResponse& operator=(const ChangePasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordResponse& operator=(ChangePasswordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePasswordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePasswordResponse* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordResponse*>(
               &_ChangePasswordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ChangePasswordResponse& a, ChangePasswordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePasswordResponse* New() const final {
    return CreateMaybeMessage<ChangePasswordResponse>(nullptr);
  }

  ChangePasswordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePasswordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePasswordResponse& from);
  void MergeFrom(const ChangePasswordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChangePasswordResponse";
  }
  protected:
  explicit ChangePasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:ChangePasswordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {};
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const final {
    return CreateMaybeMessage<UpdateRequest>(nullptr);
  }

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kVisualizationModeFieldNumber = 3,
    kResponseFieldNumber = 8,
    kEphemeralChatFieldNumber = 4,
    kMessagesTimeoutFieldNumber = 5,
    kSentMessagesFieldNumber = 6,
    kReceivedMessagesFieldNumber = 7,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string visualization_mode = 3;
  void clear_visualization_mode();
  const std::string& visualization_mode() const;
  void set_visualization_mode(const std::string& value);
  void set_visualization_mode(std::string&& value);
  void set_visualization_mode(const char* value);
  void set_visualization_mode(const char* value, size_t size);
  std::string* mutable_visualization_mode();
  std::string* release_visualization_mode();
  void set_allocated_visualization_mode(std::string* visualization_mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_visualization_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_visualization_mode(
      std::string* visualization_mode);
  private:
  const std::string& _internal_visualization_mode() const;
  void _internal_set_visualization_mode(const std::string& value);
  std::string* _internal_mutable_visualization_mode();
  public:

  // string response = 8;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // bool ephemeral_chat = 4;
  void clear_ephemeral_chat();
  bool ephemeral_chat() const;
  void set_ephemeral_chat(bool value);
  private:
  bool _internal_ephemeral_chat() const;
  void _internal_set_ephemeral_chat(bool value);
  public:

  // int32 messages_timeout = 5;
  void clear_messages_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 messages_timeout() const;
  void set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_messages_timeout() const;
  void _internal_set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 sent_messages = 6;
  void clear_sent_messages();
  ::PROTOBUF_NAMESPACE_ID::uint64 sent_messages() const;
  void set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sent_messages() const;
  void _internal_set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 received_messages = 7;
  void clear_received_messages();
  ::PROTOBUF_NAMESPACE_ID::uint64 received_messages() const;
  void set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received_messages() const;
  void _internal_set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visualization_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  bool ephemeral_chat_;
  ::PROTOBUF_NAMESPACE_ID::int32 messages_timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sent_messages_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {};
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const final {
    return CreateMaybeMessage<UpdateResponse>(nullptr);
  }

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class BlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockRequest) */ {
 public:
  inline BlockRequest() : BlockRequest(nullptr) {};
  virtual ~BlockRequest();

  BlockRequest(const BlockRequest& from);
  BlockRequest(BlockRequest&& from) noexcept
    : BlockRequest() {
    *this = ::std::move(from);
  }

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRequest& operator=(BlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockRequest* internal_default_instance() {
    return reinterpret_cast<const BlockRequest*>(
               &_BlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BlockRequest& a, BlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRequest* New() const final {
    return CreateMaybeMessage<BlockRequest>(nullptr);
  }

  BlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockRequest& from);
  void MergeFrom(const BlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockRequest";
  }
  protected:
  explicit BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kContactFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string contact = 2;
  void clear_contact();
  const std::string& contact() const;
  void set_contact(const std::string& value);
  void set_contact(std::string&& value);
  void set_contact(const char* value);
  void set_contact(const char* value, size_t size);
  std::string* mutable_contact();
  std::string* release_contact();
  void set_allocated_contact(std::string* contact);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contact();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contact(
      std::string* contact);
  private:
  const std::string& _internal_contact() const;
  void _internal_set_contact(const std::string& value);
  std::string* _internal_mutable_contact();
  public:

  // @@protoc_insertion_point(class_scope:BlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contact_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class BlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockResponse) */ {
 public:
  inline BlockResponse() : BlockResponse(nullptr) {};
  virtual ~BlockResponse();

  BlockResponse(const BlockResponse& from);
  BlockResponse(BlockResponse&& from) noexcept
    : BlockResponse() {
    *this = ::std::move(from);
  }

  inline BlockResponse& operator=(const BlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockResponse& operator=(BlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockResponse* internal_default_instance() {
    return reinterpret_cast<const BlockResponse*>(
               &_BlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BlockResponse& a, BlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockResponse* New() const final {
    return CreateMaybeMessage<BlockResponse>(nullptr);
  }

  BlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockResponse& from);
  void MergeFrom(const BlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockResponse";
  }
  protected:
  explicit BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:BlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UnBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnBlockRequest) */ {
 public:
  inline UnBlockRequest() : UnBlockRequest(nullptr) {};
  virtual ~UnBlockRequest();

  UnBlockRequest(const UnBlockRequest& from);
  UnBlockRequest(UnBlockRequest&& from) noexcept
    : UnBlockRequest() {
    *this = ::std::move(from);
  }

  inline UnBlockRequest& operator=(const UnBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBlockRequest& operator=(UnBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBlockRequest* internal_default_instance() {
    return reinterpret_cast<const UnBlockRequest*>(
               &_UnBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UnBlockRequest& a, UnBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBlockRequest* New() const final {
    return CreateMaybeMessage<UnBlockRequest>(nullptr);
  }

  UnBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBlockRequest& from);
  void MergeFrom(const UnBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnBlockRequest";
  }
  protected:
  explicit UnBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kContactFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string contact = 2;
  void clear_contact();
  const std::string& contact() const;
  void set_contact(const std::string& value);
  void set_contact(std::string&& value);
  void set_contact(const char* value);
  void set_contact(const char* value, size_t size);
  std::string* mutable_contact();
  std::string* release_contact();
  void set_allocated_contact(std::string* contact);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contact();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contact(
      std::string* contact);
  private:
  const std::string& _internal_contact() const;
  void _internal_set_contact(const std::string& value);
  std::string* _internal_mutable_contact();
  public:

  // @@protoc_insertion_point(class_scope:UnBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contact_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UnBlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnBlockResponse) */ {
 public:
  inline UnBlockResponse() : UnBlockResponse(nullptr) {};
  virtual ~UnBlockResponse();

  UnBlockResponse(const UnBlockResponse& from);
  UnBlockResponse(UnBlockResponse&& from) noexcept
    : UnBlockResponse() {
    *this = ::std::move(from);
  }

  inline UnBlockResponse& operator=(const UnBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnBlockResponse& operator=(UnBlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnBlockResponse* internal_default_instance() {
    return reinterpret_cast<const UnBlockResponse*>(
               &_UnBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UnBlockResponse& a, UnBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnBlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnBlockResponse* New() const final {
    return CreateMaybeMessage<UnBlockResponse>(nullptr);
  }

  UnBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnBlockResponse& from);
  void MergeFrom(const UnBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnBlockResponse";
  }
  protected:
  explicit UnBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:UnBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class BlockListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockListRequest) */ {
 public:
  inline BlockListRequest() : BlockListRequest(nullptr) {};
  virtual ~BlockListRequest();

  BlockListRequest(const BlockListRequest& from);
  BlockListRequest(BlockListRequest&& from) noexcept
    : BlockListRequest() {
    *this = ::std::move(from);
  }

  inline BlockListRequest& operator=(const BlockListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockListRequest& operator=(BlockListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockListRequest* internal_default_instance() {
    return reinterpret_cast<const BlockListRequest*>(
               &_BlockListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BlockListRequest& a, BlockListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockListRequest* New() const final {
    return CreateMaybeMessage<BlockListRequest>(nullptr);
  }

  BlockListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockListRequest& from);
  void MergeFrom(const BlockListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockListRequest";
  }
  protected:
  explicit BlockListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:BlockListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class BlockListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockListResponse) */ {
 public:
  inline BlockListResponse() : BlockListResponse(nullptr) {};
  virtual ~BlockListResponse();

  BlockListResponse(const BlockListResponse& from);
  BlockListResponse(BlockListResponse&& from) noexcept
    : BlockListResponse() {
    *this = ::std::move(from);
  }

  inline BlockListResponse& operator=(const BlockListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockListResponse& operator=(BlockListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockListResponse* internal_default_instance() {
    return reinterpret_cast<const BlockListResponse*>(
               &_BlockListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BlockListResponse& a, BlockListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockListResponse* New() const final {
    return CreateMaybeMessage<BlockListResponse>(nullptr);
  }

  BlockListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockListResponse& from);
  void MergeFrom(const BlockListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockListResponse";
  }
  protected:
  explicit BlockListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated string list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  const std::string& list(int index) const;
  std::string* mutable_list(int index);
  void set_list(int index, const std::string& value);
  void set_list(int index, std::string&& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  std::string* add_list();
  void add_list(const std::string& value);
  void add_list(std::string&& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list();
  private:
  const std::string& _internal_list(int index) const;
  std::string* _internal_add_list();
  public:

  // @@protoc_insertion_point(class_scope:BlockListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {};
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRequest& default_instance();

  enum MesssageContentCase {
    kRegister = 4,
    kLogin = 5,
    kForgotAccount = 6,
    kCheckStatus = 7,
    kConnect = 8,
    kChangePassword = 9,
    kUpdate = 10,
    kBlock = 11,
    kUnblock = 12,
    kBlockList = 13,
    MESSSAGECONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const final {
    return CreateMaybeMessage<UserRequest>(nullptr);
  }

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kOsFieldNumber = 2,
    kMachineIdFieldNumber = 3,
    kRegisterFieldNumber = 4,
    kLoginFieldNumber = 5,
    kForgotAccountFieldNumber = 6,
    kCheckStatusFieldNumber = 7,
    kConnectFieldNumber = 8,
    kChangePasswordFieldNumber = 9,
    kUpdateFieldNumber = 10,
    kBlockFieldNumber = 11,
    kUnblockFieldNumber = 12,
    kBlockListFieldNumber = 13,
  };
  // string ip_address = 1;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_address(
      std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string os = 2;
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os(
      std::string* os);
  private:
  const std::string& _internal_os() const;
  void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // uint64 machine_id = 3;
  void clear_machine_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 machine_id() const;
  void set_machine_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_machine_id() const;
  void _internal_set_machine_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .RegisterRequest register = 4;
  bool has_register_() const;
  private:
  bool _internal_has_register_() const;
  public:
  void clear_register_();
  const ::RegisterRequest& register_() const;
  ::RegisterRequest* release_register_();
  ::RegisterRequest* mutable_register_();
  void set_allocated_register_(::RegisterRequest* register_);
  private:
  const ::RegisterRequest& _internal_register_() const;
  ::RegisterRequest* _internal_mutable_register_();
  public:
  void unsafe_arena_set_allocated_register_(
      ::RegisterRequest* register_);
  ::RegisterRequest* unsafe_arena_release_register_();

  // .LoginRequest login = 5;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::LoginRequest& login() const;
  ::LoginRequest* release_login();
  ::LoginRequest* mutable_login();
  void set_allocated_login(::LoginRequest* login);
  private:
  const ::LoginRequest& _internal_login() const;
  ::LoginRequest* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::LoginRequest* login);
  ::LoginRequest* unsafe_arena_release_login();

  // .ForgotAccountRequest forgot_account = 6;
  bool has_forgot_account() const;
  private:
  bool _internal_has_forgot_account() const;
  public:
  void clear_forgot_account();
  const ::ForgotAccountRequest& forgot_account() const;
  ::ForgotAccountRequest* release_forgot_account();
  ::ForgotAccountRequest* mutable_forgot_account();
  void set_allocated_forgot_account(::ForgotAccountRequest* forgot_account);
  private:
  const ::ForgotAccountRequest& _internal_forgot_account() const;
  ::ForgotAccountRequest* _internal_mutable_forgot_account();
  public:
  void unsafe_arena_set_allocated_forgot_account(
      ::ForgotAccountRequest* forgot_account);
  ::ForgotAccountRequest* unsafe_arena_release_forgot_account();

  // .CheckUserStatusRequest check_status = 7;
  bool has_check_status() const;
  private:
  bool _internal_has_check_status() const;
  public:
  void clear_check_status();
  const ::CheckUserStatusRequest& check_status() const;
  ::CheckUserStatusRequest* release_check_status();
  ::CheckUserStatusRequest* mutable_check_status();
  void set_allocated_check_status(::CheckUserStatusRequest* check_status);
  private:
  const ::CheckUserStatusRequest& _internal_check_status() const;
  ::CheckUserStatusRequest* _internal_mutable_check_status();
  public:
  void unsafe_arena_set_allocated_check_status(
      ::CheckUserStatusRequest* check_status);
  ::CheckUserStatusRequest* unsafe_arena_release_check_status();

  // .ConnectionRequest connect = 8;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::ConnectionRequest& connect() const;
  ::ConnectionRequest* release_connect();
  ::ConnectionRequest* mutable_connect();
  void set_allocated_connect(::ConnectionRequest* connect);
  private:
  const ::ConnectionRequest& _internal_connect() const;
  ::ConnectionRequest* _internal_mutable_connect();
  public:
  void unsafe_arena_set_allocated_connect(
      ::ConnectionRequest* connect);
  ::ConnectionRequest* unsafe_arena_release_connect();

  // .ChangePasswordRequest change_password = 9;
  bool has_change_password() const;
  private:
  bool _internal_has_change_password() const;
  public:
  void clear_change_password();
  const ::ChangePasswordRequest& change_password() const;
  ::ChangePasswordRequest* release_change_password();
  ::ChangePasswordRequest* mutable_change_password();
  void set_allocated_change_password(::ChangePasswordRequest* change_password);
  private:
  const ::ChangePasswordRequest& _internal_change_password() const;
  ::ChangePasswordRequest* _internal_mutable_change_password();
  public:
  void unsafe_arena_set_allocated_change_password(
      ::ChangePasswordRequest* change_password);
  ::ChangePasswordRequest* unsafe_arena_release_change_password();

  // .UpdateRequest Update = 10;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::UpdateRequest& update() const;
  ::UpdateRequest* release_update();
  ::UpdateRequest* mutable_update();
  void set_allocated_update(::UpdateRequest* update);
  private:
  const ::UpdateRequest& _internal_update() const;
  ::UpdateRequest* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::UpdateRequest* update);
  ::UpdateRequest* unsafe_arena_release_update();

  // .BlockRequest block = 11;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::BlockRequest& block() const;
  ::BlockRequest* release_block();
  ::BlockRequest* mutable_block();
  void set_allocated_block(::BlockRequest* block);
  private:
  const ::BlockRequest& _internal_block() const;
  ::BlockRequest* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::BlockRequest* block);
  ::BlockRequest* unsafe_arena_release_block();

  // .UnBlockRequest unblock = 12;
  bool has_unblock() const;
  private:
  bool _internal_has_unblock() const;
  public:
  void clear_unblock();
  const ::UnBlockRequest& unblock() const;
  ::UnBlockRequest* release_unblock();
  ::UnBlockRequest* mutable_unblock();
  void set_allocated_unblock(::UnBlockRequest* unblock);
  private:
  const ::UnBlockRequest& _internal_unblock() const;
  ::UnBlockRequest* _internal_mutable_unblock();
  public:
  void unsafe_arena_set_allocated_unblock(
      ::UnBlockRequest* unblock);
  ::UnBlockRequest* unsafe_arena_release_unblock();

  // .BlockListRequest block_list = 13;
  bool has_block_list() const;
  private:
  bool _internal_has_block_list() const;
  public:
  void clear_block_list();
  const ::BlockListRequest& block_list() const;
  ::BlockListRequest* release_block_list();
  ::BlockListRequest* mutable_block_list();
  void set_allocated_block_list(::BlockListRequest* block_list);
  private:
  const ::BlockListRequest& _internal_block_list() const;
  ::BlockListRequest* _internal_mutable_block_list();
  public:
  void unsafe_arena_set_allocated_block_list(
      ::BlockListRequest* block_list);
  ::BlockListRequest* unsafe_arena_release_block_list();

  void clear_MesssageContent();
  MesssageContentCase MesssageContent_case() const;
  // @@protoc_insertion_point(class_scope:UserRequest)
 private:
  class _Internal;
  void set_has_register_();
  void set_has_login();
  void set_has_forgot_account();
  void set_has_check_status();
  void set_has_connect();
  void set_has_change_password();
  void set_has_update();
  void set_has_block();
  void set_has_unblock();
  void set_has_block_list();

  inline bool has_MesssageContent() const;
  inline void clear_has_MesssageContent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::uint64 machine_id_;
  union MesssageContentUnion {
    MesssageContentUnion() {}
    ::RegisterRequest* register__;
    ::LoginRequest* login_;
    ::ForgotAccountRequest* forgot_account_;
    ::CheckUserStatusRequest* check_status_;
    ::ConnectionRequest* connect_;
    ::ChangePasswordRequest* change_password_;
    ::UpdateRequest* update_;
    ::BlockRequest* block_;
    ::UnBlockRequest* unblock_;
    ::BlockListRequest* block_list_;
  } MesssageContent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserResponse) */ {
 public:
  inline UserResponse() : UserResponse(nullptr) {};
  virtual ~UserResponse();

  UserResponse(const UserResponse& from);
  UserResponse(UserResponse&& from) noexcept
    : UserResponse() {
    *this = ::std::move(from);
  }

  inline UserResponse& operator=(const UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResponse& operator=(UserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserResponse& default_instance();

  enum MesssageContentCase {
    kRegister = 1,
    kLogin = 2,
    kForgotAccount = 3,
    kCheckStatus = 4,
    kConnect = 5,
    kChangePassword = 6,
    kUpdate = 7,
    kBlock = 8,
    kUnblock = 9,
    kBlockList = 10,
    MESSSAGECONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserResponse* internal_default_instance() {
    return reinterpret_cast<const UserResponse*>(
               &_UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UserResponse& a, UserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserResponse* New() const final {
    return CreateMaybeMessage<UserResponse>(nullptr);
  }

  UserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserResponse& from);
  void MergeFrom(const UserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserResponse";
  }
  protected:
  explicit UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterFieldNumber = 1,
    kLoginFieldNumber = 2,
    kForgotAccountFieldNumber = 3,
    kCheckStatusFieldNumber = 4,
    kConnectFieldNumber = 5,
    kChangePasswordFieldNumber = 6,
    kUpdateFieldNumber = 7,
    kBlockFieldNumber = 8,
    kUnblockFieldNumber = 9,
    kBlockListFieldNumber = 10,
  };
  // .RegisterResponse register = 1;
  bool has_register_() const;
  private:
  bool _internal_has_register_() const;
  public:
  void clear_register_();
  const ::RegisterResponse& register_() const;
  ::RegisterResponse* release_register_();
  ::RegisterResponse* mutable_register_();
  void set_allocated_register_(::RegisterResponse* register_);
  private:
  const ::RegisterResponse& _internal_register_() const;
  ::RegisterResponse* _internal_mutable_register_();
  public:
  void unsafe_arena_set_allocated_register_(
      ::RegisterResponse* register_);
  ::RegisterResponse* unsafe_arena_release_register_();

  // .LoginResponse login = 2;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::LoginResponse& login() const;
  ::LoginResponse* release_login();
  ::LoginResponse* mutable_login();
  void set_allocated_login(::LoginResponse* login);
  private:
  const ::LoginResponse& _internal_login() const;
  ::LoginResponse* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::LoginResponse* login);
  ::LoginResponse* unsafe_arena_release_login();

  // .ForgotAccountResponse forgot_account = 3;
  bool has_forgot_account() const;
  private:
  bool _internal_has_forgot_account() const;
  public:
  void clear_forgot_account();
  const ::ForgotAccountResponse& forgot_account() const;
  ::ForgotAccountResponse* release_forgot_account();
  ::ForgotAccountResponse* mutable_forgot_account();
  void set_allocated_forgot_account(::ForgotAccountResponse* forgot_account);
  private:
  const ::ForgotAccountResponse& _internal_forgot_account() const;
  ::ForgotAccountResponse* _internal_mutable_forgot_account();
  public:
  void unsafe_arena_set_allocated_forgot_account(
      ::ForgotAccountResponse* forgot_account);
  ::ForgotAccountResponse* unsafe_arena_release_forgot_account();

  // .CheckUserStatusResponse check_status = 4;
  bool has_check_status() const;
  private:
  bool _internal_has_check_status() const;
  public:
  void clear_check_status();
  const ::CheckUserStatusResponse& check_status() const;
  ::CheckUserStatusResponse* release_check_status();
  ::CheckUserStatusResponse* mutable_check_status();
  void set_allocated_check_status(::CheckUserStatusResponse* check_status);
  private:
  const ::CheckUserStatusResponse& _internal_check_status() const;
  ::CheckUserStatusResponse* _internal_mutable_check_status();
  public:
  void unsafe_arena_set_allocated_check_status(
      ::CheckUserStatusResponse* check_status);
  ::CheckUserStatusResponse* unsafe_arena_release_check_status();

  // .ConnectionResponse connect = 5;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::ConnectionResponse& connect() const;
  ::ConnectionResponse* release_connect();
  ::ConnectionResponse* mutable_connect();
  void set_allocated_connect(::ConnectionResponse* connect);
  private:
  const ::ConnectionResponse& _internal_connect() const;
  ::ConnectionResponse* _internal_mutable_connect();
  public:
  void unsafe_arena_set_allocated_connect(
      ::ConnectionResponse* connect);
  ::ConnectionResponse* unsafe_arena_release_connect();

  // .ChangePasswordResponse change_password = 6;
  bool has_change_password() const;
  private:
  bool _internal_has_change_password() const;
  public:
  void clear_change_password();
  const ::ChangePasswordResponse& change_password() const;
  ::ChangePasswordResponse* release_change_password();
  ::ChangePasswordResponse* mutable_change_password();
  void set_allocated_change_password(::ChangePasswordResponse* change_password);
  private:
  const ::ChangePasswordResponse& _internal_change_password() const;
  ::ChangePasswordResponse* _internal_mutable_change_password();
  public:
  void unsafe_arena_set_allocated_change_password(
      ::ChangePasswordResponse* change_password);
  ::ChangePasswordResponse* unsafe_arena_release_change_password();

  // .UpdateResponse Update = 7;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::UpdateResponse& update() const;
  ::UpdateResponse* release_update();
  ::UpdateResponse* mutable_update();
  void set_allocated_update(::UpdateResponse* update);
  private:
  const ::UpdateResponse& _internal_update() const;
  ::UpdateResponse* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::UpdateResponse* update);
  ::UpdateResponse* unsafe_arena_release_update();

  // .BlockResponse block = 8;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::BlockResponse& block() const;
  ::BlockResponse* release_block();
  ::BlockResponse* mutable_block();
  void set_allocated_block(::BlockResponse* block);
  private:
  const ::BlockResponse& _internal_block() const;
  ::BlockResponse* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::BlockResponse* block);
  ::BlockResponse* unsafe_arena_release_block();

  // .UnBlockResponse unblock = 9;
  bool has_unblock() const;
  private:
  bool _internal_has_unblock() const;
  public:
  void clear_unblock();
  const ::UnBlockResponse& unblock() const;
  ::UnBlockResponse* release_unblock();
  ::UnBlockResponse* mutable_unblock();
  void set_allocated_unblock(::UnBlockResponse* unblock);
  private:
  const ::UnBlockResponse& _internal_unblock() const;
  ::UnBlockResponse* _internal_mutable_unblock();
  public:
  void unsafe_arena_set_allocated_unblock(
      ::UnBlockResponse* unblock);
  ::UnBlockResponse* unsafe_arena_release_unblock();

  // .BlockListResponse block_list = 10;
  bool has_block_list() const;
  private:
  bool _internal_has_block_list() const;
  public:
  void clear_block_list();
  const ::BlockListResponse& block_list() const;
  ::BlockListResponse* release_block_list();
  ::BlockListResponse* mutable_block_list();
  void set_allocated_block_list(::BlockListResponse* block_list);
  private:
  const ::BlockListResponse& _internal_block_list() const;
  ::BlockListResponse* _internal_mutable_block_list();
  public:
  void unsafe_arena_set_allocated_block_list(
      ::BlockListResponse* block_list);
  ::BlockListResponse* unsafe_arena_release_block_list();

  void clear_MesssageContent();
  MesssageContentCase MesssageContent_case() const;
  // @@protoc_insertion_point(class_scope:UserResponse)
 private:
  class _Internal;
  void set_has_register_();
  void set_has_login();
  void set_has_forgot_account();
  void set_has_check_status();
  void set_has_connect();
  void set_has_change_password();
  void set_has_update();
  void set_has_block();
  void set_has_unblock();
  void set_has_block_list();

  inline bool has_MesssageContent() const;
  inline void clear_has_MesssageContent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MesssageContentUnion {
    MesssageContentUnion() {}
    ::RegisterResponse* register__;
    ::LoginResponse* login_;
    ::ForgotAccountResponse* forgot_account_;
    ::CheckUserStatusResponse* check_status_;
    ::ConnectionResponse* connect_;
    ::ChangePasswordResponse* change_password_;
    ::UpdateResponse* update_;
    ::BlockResponse* block_;
    ::UnBlockResponse* unblock_;
    ::BlockListResponse* block_list_;
  } MesssageContent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestMessage) */ {
 public:
  inline RequestMessage() : RequestMessage(nullptr) {};
  virtual ~RequestMessage();

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMessage& default_instance();

  enum MessageCase {
    kNewHostmachine = 2,
    kUser = 3,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMessage* New() const final {
    return CreateMaybeMessage<RequestMessage>(nullptr);
  }

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMessage& from);
  void MergeFrom(const RequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestMessage";
  }
  protected:
  explicit RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNewHostmachineFieldNumber = 2,
    kUserFieldNumber = 3,
  };
  // .MessageType type = 1;
  void clear_type();
  ::MessageType type() const;
  void set_type(::MessageType value);
  private:
  ::MessageType _internal_type() const;
  void _internal_set_type(::MessageType value);
  public:

  // .NewHostmachineRequest NewHostmachine = 2;
  bool has_newhostmachine() const;
  private:
  bool _internal_has_newhostmachine() const;
  public:
  void clear_newhostmachine();
  const ::NewHostmachineRequest& newhostmachine() const;
  ::NewHostmachineRequest* release_newhostmachine();
  ::NewHostmachineRequest* mutable_newhostmachine();
  void set_allocated_newhostmachine(::NewHostmachineRequest* newhostmachine);
  private:
  const ::NewHostmachineRequest& _internal_newhostmachine() const;
  ::NewHostmachineRequest* _internal_mutable_newhostmachine();
  public:
  void unsafe_arena_set_allocated_newhostmachine(
      ::NewHostmachineRequest* newhostmachine);
  ::NewHostmachineRequest* unsafe_arena_release_newhostmachine();

  // .UserRequest User = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::UserRequest& user() const;
  ::UserRequest* release_user();
  ::UserRequest* mutable_user();
  void set_allocated_user(::UserRequest* user);
  private:
  const ::UserRequest& _internal_user() const;
  ::UserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::UserRequest* user);
  ::UserRequest* unsafe_arena_release_user();

  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:RequestMessage)
 private:
  class _Internal;
  void set_has_newhostmachine();
  void set_has_user();

  inline bool has_Message() const;
  inline void clear_has_Message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union MessageUnion {
    MessageUnion() {}
    ::NewHostmachineRequest* newhostmachine_;
    ::UserRequest* user_;
  } Message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponseMessage) */ {
 public:
  inline ResponseMessage() : ResponseMessage(nullptr) {};
  virtual ~ResponseMessage();

  ResponseMessage(const ResponseMessage& from);
  ResponseMessage(ResponseMessage&& from) noexcept
    : ResponseMessage() {
    *this = ::std::move(from);
  }

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMessage& operator=(ResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseMessage& default_instance();

  enum MessageCase {
    kNewHostmachine = 2,
    kUser = 3,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseMessage*>(
               &_ResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ResponseMessage& a, ResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseMessage* New() const final {
    return CreateMaybeMessage<ResponseMessage>(nullptr);
  }

  ResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseMessage& from);
  void MergeFrom(const ResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponseMessage";
  }
  protected:
  explicit ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fmessages_2eproto);
    return ::descriptor_table_server_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNewHostmachineFieldNumber = 2,
    kUserFieldNumber = 3,
  };
  // .MessageType type = 1;
  void clear_type();
  ::MessageType type() const;
  void set_type(::MessageType value);
  private:
  ::MessageType _internal_type() const;
  void _internal_set_type(::MessageType value);
  public:

  // .NewHostmachineResponse NewHostmachine = 2;
  bool has_newhostmachine() const;
  private:
  bool _internal_has_newhostmachine() const;
  public:
  void clear_newhostmachine();
  const ::NewHostmachineResponse& newhostmachine() const;
  ::NewHostmachineResponse* release_newhostmachine();
  ::NewHostmachineResponse* mutable_newhostmachine();
  void set_allocated_newhostmachine(::NewHostmachineResponse* newhostmachine);
  private:
  const ::NewHostmachineResponse& _internal_newhostmachine() const;
  ::NewHostmachineResponse* _internal_mutable_newhostmachine();
  public:
  void unsafe_arena_set_allocated_newhostmachine(
      ::NewHostmachineResponse* newhostmachine);
  ::NewHostmachineResponse* unsafe_arena_release_newhostmachine();

  // .UserResponse User = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::UserResponse& user() const;
  ::UserResponse* release_user();
  ::UserResponse* mutable_user();
  void set_allocated_user(::UserResponse* user);
  private:
  const ::UserResponse& _internal_user() const;
  ::UserResponse* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::UserResponse* user);
  ::UserResponse* unsafe_arena_release_user();

  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:ResponseMessage)
 private:
  class _Internal;
  void set_has_newhostmachine();
  void set_has_user();

  inline bool has_Message() const;
  inline void clear_has_Message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union MessageUnion {
    MessageUnion() {}
    ::NewHostmachineResponse* newhostmachine_;
    ::UserResponse* user_;
  } Message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_server_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewHostmachineRequest

// string ip_address = 1;
inline void NewHostmachineRequest::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewHostmachineRequest::ip_address() const {
  // @@protoc_insertion_point(field_get:NewHostmachineRequest.ip_address)
  return _internal_ip_address();
}
inline void NewHostmachineRequest::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:NewHostmachineRequest.ip_address)
}
inline std::string* NewHostmachineRequest::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:NewHostmachineRequest.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& NewHostmachineRequest::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void NewHostmachineRequest::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewHostmachineRequest::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NewHostmachineRequest.ip_address)
}
inline void NewHostmachineRequest::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:NewHostmachineRequest.ip_address)
}
inline void NewHostmachineRequest::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NewHostmachineRequest.ip_address)
}
inline std::string* NewHostmachineRequest::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewHostmachineRequest::release_ip_address() {
  // @@protoc_insertion_point(field_release:NewHostmachineRequest.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewHostmachineRequest::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NewHostmachineRequest.ip_address)
}
inline std::string* NewHostmachineRequest::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NewHostmachineRequest.ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewHostmachineRequest::unsafe_arena_set_allocated_ip_address(
    std::string* ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewHostmachineRequest.ip_address)
}

// bytes certificate = 2;
inline void NewHostmachineRequest::clear_certificate() {
  certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewHostmachineRequest::certificate() const {
  // @@protoc_insertion_point(field_get:NewHostmachineRequest.certificate)
  return _internal_certificate();
}
inline void NewHostmachineRequest::set_certificate(const std::string& value) {
  _internal_set_certificate(value);
  // @@protoc_insertion_point(field_set:NewHostmachineRequest.certificate)
}
inline std::string* NewHostmachineRequest::mutable_certificate() {
  // @@protoc_insertion_point(field_mutable:NewHostmachineRequest.certificate)
  return _internal_mutable_certificate();
}
inline const std::string& NewHostmachineRequest::_internal_certificate() const {
  return certificate_.Get();
}
inline void NewHostmachineRequest::_internal_set_certificate(const std::string& value) {
  
  certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewHostmachineRequest::set_certificate(std::string&& value) {
  
  certificate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NewHostmachineRequest.certificate)
}
inline void NewHostmachineRequest::set_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:NewHostmachineRequest.certificate)
}
inline void NewHostmachineRequest::set_certificate(const void* value,
    size_t size) {
  
  certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NewHostmachineRequest.certificate)
}
inline std::string* NewHostmachineRequest::_internal_mutable_certificate() {
  
  return certificate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewHostmachineRequest::release_certificate() {
  // @@protoc_insertion_point(field_release:NewHostmachineRequest.certificate)
  return certificate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewHostmachineRequest::set_allocated_certificate(std::string* certificate) {
  if (certificate != nullptr) {
    
  } else {
    
  }
  certificate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), certificate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NewHostmachineRequest.certificate)
}
inline std::string* NewHostmachineRequest::unsafe_arena_release_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NewHostmachineRequest.certificate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return certificate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewHostmachineRequest::unsafe_arena_set_allocated_certificate(
    std::string* certificate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (certificate != nullptr) {
    
  } else {
    
  }
  certificate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      certificate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewHostmachineRequest.certificate)
}

// -------------------------------------------------------------------

// NewHostmachineResponse

// uint64 hostmachine_id = 1;
inline void NewHostmachineResponse::clear_hostmachine_id() {
  hostmachine_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewHostmachineResponse::_internal_hostmachine_id() const {
  return hostmachine_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewHostmachineResponse::hostmachine_id() const {
  // @@protoc_insertion_point(field_get:NewHostmachineResponse.hostmachine_id)
  return _internal_hostmachine_id();
}
inline void NewHostmachineResponse::_internal_set_hostmachine_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hostmachine_id_ = value;
}
inline void NewHostmachineResponse::set_hostmachine_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostmachine_id(value);
  // @@protoc_insertion_point(field_set:NewHostmachineResponse.hostmachine_id)
}

// bytes signed_certificate = 2;
inline void NewHostmachineResponse::clear_signed_certificate() {
  signed_certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewHostmachineResponse::signed_certificate() const {
  // @@protoc_insertion_point(field_get:NewHostmachineResponse.signed_certificate)
  return _internal_signed_certificate();
}
inline void NewHostmachineResponse::set_signed_certificate(const std::string& value) {
  _internal_set_signed_certificate(value);
  // @@protoc_insertion_point(field_set:NewHostmachineResponse.signed_certificate)
}
inline std::string* NewHostmachineResponse::mutable_signed_certificate() {
  // @@protoc_insertion_point(field_mutable:NewHostmachineResponse.signed_certificate)
  return _internal_mutable_signed_certificate();
}
inline const std::string& NewHostmachineResponse::_internal_signed_certificate() const {
  return signed_certificate_.Get();
}
inline void NewHostmachineResponse::_internal_set_signed_certificate(const std::string& value) {
  
  signed_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewHostmachineResponse::set_signed_certificate(std::string&& value) {
  
  signed_certificate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NewHostmachineResponse.signed_certificate)
}
inline void NewHostmachineResponse::set_signed_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:NewHostmachineResponse.signed_certificate)
}
inline void NewHostmachineResponse::set_signed_certificate(const void* value,
    size_t size) {
  
  signed_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NewHostmachineResponse.signed_certificate)
}
inline std::string* NewHostmachineResponse::_internal_mutable_signed_certificate() {
  
  return signed_certificate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewHostmachineResponse::release_signed_certificate() {
  // @@protoc_insertion_point(field_release:NewHostmachineResponse.signed_certificate)
  return signed_certificate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewHostmachineResponse::set_allocated_signed_certificate(std::string* signed_certificate) {
  if (signed_certificate != nullptr) {
    
  } else {
    
  }
  signed_certificate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_certificate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NewHostmachineResponse.signed_certificate)
}
inline std::string* NewHostmachineResponse::unsafe_arena_release_signed_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NewHostmachineResponse.signed_certificate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signed_certificate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewHostmachineResponse::unsafe_arena_set_allocated_signed_certificate(
    std::string* signed_certificate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signed_certificate != nullptr) {
    
  } else {
    
  }
  signed_certificate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signed_certificate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewHostmachineResponse.signed_certificate)
}

// -------------------------------------------------------------------

// RegisterRequest

// string username = 1;
inline void RegisterRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.username)
  return _internal_username();
}
inline void RegisterRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.username)
}
inline std::string* RegisterRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.username)
  return _internal_mutable_username();
}
inline const std::string& RegisterRequest::_internal_username() const {
  return username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.username)
}
inline std::string* RegisterRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_username() {
  // @@protoc_insertion_point(field_release:RegisterRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.username)
}
inline std::string* RegisterRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.username)
}

// bytes password_hash = 2;
inline void RegisterRequest::clear_password_hash() {
  password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::password_hash() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.password_hash)
  return _internal_password_hash();
}
inline void RegisterRequest::set_password_hash(const std::string& value) {
  _internal_set_password_hash(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.password_hash)
}
inline std::string* RegisterRequest::mutable_password_hash() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.password_hash)
  return _internal_mutable_password_hash();
}
inline const std::string& RegisterRequest::_internal_password_hash() const {
  return password_hash_.Get();
}
inline void RegisterRequest::_internal_set_password_hash(const std::string& value) {
  
  password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_password_hash(std::string&& value) {
  
  password_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.password_hash)
}
inline void RegisterRequest::set_password_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.password_hash)
}
inline void RegisterRequest::set_password_hash(const void* value,
    size_t size) {
  
  password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.password_hash)
}
inline std::string* RegisterRequest::_internal_mutable_password_hash() {
  
  return password_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_password_hash() {
  // @@protoc_insertion_point(field_release:RegisterRequest.password_hash)
  return password_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_password_hash(std::string* password_hash) {
  if (password_hash != nullptr) {
    
  } else {
    
  }
  password_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.password_hash)
}
inline std::string* RegisterRequest::unsafe_arena_release_password_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.password_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_password_hash(
    std::string* password_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password_hash != nullptr) {
    
  } else {
    
  }
  password_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.password_hash)
}

// string name = 3;
inline void RegisterRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.name)
  return _internal_name();
}
inline void RegisterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.name)
}
inline std::string* RegisterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.name)
}
inline void RegisterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.name)
}
inline void RegisterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.name)
}
inline std::string* RegisterRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:RegisterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.name)
}
inline std::string* RegisterRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.name)
}

// string email = 4;
inline void RegisterRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.email)
  return _internal_email();
}
inline void RegisterRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.email)
}
inline std::string* RegisterRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.email)
  return _internal_mutable_email();
}
inline const std::string& RegisterRequest::_internal_email() const {
  return email_.Get();
}
inline void RegisterRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.email)
}
inline void RegisterRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.email)
}
inline void RegisterRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.email)
}
inline std::string* RegisterRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:RegisterRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.email)
}
inline std::string* RegisterRequest::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.email)
}

// string gender = 5;
inline void RegisterRequest::clear_gender() {
  gender_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::gender() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.gender)
  return _internal_gender();
}
inline void RegisterRequest::set_gender(const std::string& value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.gender)
}
inline std::string* RegisterRequest::mutable_gender() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.gender)
  return _internal_mutable_gender();
}
inline const std::string& RegisterRequest::_internal_gender() const {
  return gender_.Get();
}
inline void RegisterRequest::_internal_set_gender(const std::string& value) {
  
  gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_gender(std::string&& value) {
  
  gender_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.gender)
}
inline void RegisterRequest::set_gender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.gender)
}
inline void RegisterRequest::set_gender(const char* value,
    size_t size) {
  
  gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.gender)
}
inline std::string* RegisterRequest::_internal_mutable_gender() {
  
  return gender_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_gender() {
  // @@protoc_insertion_point(field_release:RegisterRequest.gender)
  return gender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  gender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.gender)
}
inline std::string* RegisterRequest::unsafe_arena_release_gender() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.gender)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gender_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_gender(
    std::string* gender) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gender != nullptr) {
    
  } else {
    
  }
  gender_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gender, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.gender)
}

// string birth_date = 6;
inline void RegisterRequest::clear_birth_date() {
  birth_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::birth_date() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.birth_date)
  return _internal_birth_date();
}
inline void RegisterRequest::set_birth_date(const std::string& value) {
  _internal_set_birth_date(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.birth_date)
}
inline std::string* RegisterRequest::mutable_birth_date() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.birth_date)
  return _internal_mutable_birth_date();
}
inline const std::string& RegisterRequest::_internal_birth_date() const {
  return birth_date_.Get();
}
inline void RegisterRequest::_internal_set_birth_date(const std::string& value) {
  
  birth_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_birth_date(std::string&& value) {
  
  birth_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.birth_date)
}
inline void RegisterRequest::set_birth_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.birth_date)
}
inline void RegisterRequest::set_birth_date(const char* value,
    size_t size) {
  
  birth_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.birth_date)
}
inline std::string* RegisterRequest::_internal_mutable_birth_date() {
  
  return birth_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_birth_date() {
  // @@protoc_insertion_point(field_release:RegisterRequest.birth_date)
  return birth_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_birth_date(std::string* birth_date) {
  if (birth_date != nullptr) {
    
  } else {
    
  }
  birth_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.birth_date)
}
inline std::string* RegisterRequest::unsafe_arena_release_birth_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.birth_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return birth_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_birth_date(
    std::string* birth_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (birth_date != nullptr) {
    
  } else {
    
  }
  birth_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      birth_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.birth_date)
}

// -------------------------------------------------------------------

// RegisterResponse

// string response = 1;
inline void RegisterResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterResponse::response() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.response)
  return _internal_response();
}
inline void RegisterResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:RegisterResponse.response)
}
inline std::string* RegisterResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:RegisterResponse.response)
  return _internal_mutable_response();
}
inline const std::string& RegisterResponse::_internal_response() const {
  return response_.Get();
}
inline void RegisterResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponse.response)
}
inline void RegisterResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterResponse.response)
}
inline void RegisterResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterResponse.response)
}
inline std::string* RegisterResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterResponse::release_response() {
  // @@protoc_insertion_point(field_release:RegisterResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.response)
}
inline std::string* RegisterResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterResponse.response)
}

// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:LoginRequest.username)
  return _internal_username();
}
inline void LoginRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.username)
  return _internal_mutable_username();
}
inline const std::string& LoginRequest::_internal_username() const {
  return username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.username)
}
inline std::string* LoginRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:LoginRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.username)
}
inline std::string* LoginRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginRequest.username)
}

// bytes password_hash = 2;
inline void LoginRequest::clear_password_hash() {
  password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::password_hash() const {
  // @@protoc_insertion_point(field_get:LoginRequest.password_hash)
  return _internal_password_hash();
}
inline void LoginRequest::set_password_hash(const std::string& value) {
  _internal_set_password_hash(value);
  // @@protoc_insertion_point(field_set:LoginRequest.password_hash)
}
inline std::string* LoginRequest::mutable_password_hash() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.password_hash)
  return _internal_mutable_password_hash();
}
inline const std::string& LoginRequest::_internal_password_hash() const {
  return password_hash_.Get();
}
inline void LoginRequest::_internal_set_password_hash(const std::string& value) {
  
  password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_password_hash(std::string&& value) {
  
  password_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.password_hash)
}
inline void LoginRequest::set_password_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginRequest.password_hash)
}
inline void LoginRequest::set_password_hash(const void* value,
    size_t size) {
  
  password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.password_hash)
}
inline std::string* LoginRequest::_internal_mutable_password_hash() {
  
  return password_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_password_hash() {
  // @@protoc_insertion_point(field_release:LoginRequest.password_hash)
  return password_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_password_hash(std::string* password_hash) {
  if (password_hash != nullptr) {
    
  } else {
    
  }
  password_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.password_hash)
}
inline std::string* LoginRequest::unsafe_arena_release_password_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginRequest.password_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_password_hash(
    std::string* password_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password_hash != nullptr) {
    
  } else {
    
  }
  password_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginRequest.password_hash)
}

// -------------------------------------------------------------------

// LoginResponse

// string name = 1;
inline void LoginResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginResponse::name() const {
  // @@protoc_insertion_point(field_get:LoginResponse.name)
  return _internal_name();
}
inline void LoginResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:LoginResponse.name)
}
inline std::string* LoginResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:LoginResponse.name)
  return _internal_mutable_name();
}
inline const std::string& LoginResponse::_internal_name() const {
  return name_.Get();
}
inline void LoginResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginResponse.name)
}
inline void LoginResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginResponse.name)
}
inline void LoginResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginResponse.name)
}
inline std::string* LoginResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginResponse::release_name() {
  // @@protoc_insertion_point(field_release:LoginResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.name)
}
inline std::string* LoginResponse::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginResponse.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginResponse::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginResponse.name)
}

// string status = 2;
inline void LoginResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginResponse::status() const {
  // @@protoc_insertion_point(field_get:LoginResponse.status)
  return _internal_status();
}
inline void LoginResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:LoginResponse.status)
}
inline std::string* LoginResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:LoginResponse.status)
  return _internal_mutable_status();
}
inline const std::string& LoginResponse::_internal_status() const {
  return status_.Get();
}
inline void LoginResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginResponse.status)
}
inline void LoginResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginResponse.status)
}
inline void LoginResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginResponse.status)
}
inline std::string* LoginResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginResponse::release_status() {
  // @@protoc_insertion_point(field_release:LoginResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.status)
}
inline std::string* LoginResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginResponse.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginResponse::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginResponse.status)
}

// string visualization_mode = 3;
inline void LoginResponse::clear_visualization_mode() {
  visualization_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginResponse::visualization_mode() const {
  // @@protoc_insertion_point(field_get:LoginResponse.visualization_mode)
  return _internal_visualization_mode();
}
inline void LoginResponse::set_visualization_mode(const std::string& value) {
  _internal_set_visualization_mode(value);
  // @@protoc_insertion_point(field_set:LoginResponse.visualization_mode)
}
inline std::string* LoginResponse::mutable_visualization_mode() {
  // @@protoc_insertion_point(field_mutable:LoginResponse.visualization_mode)
  return _internal_mutable_visualization_mode();
}
inline const std::string& LoginResponse::_internal_visualization_mode() const {
  return visualization_mode_.Get();
}
inline void LoginResponse::_internal_set_visualization_mode(const std::string& value) {
  
  visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginResponse::set_visualization_mode(std::string&& value) {
  
  visualization_mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginResponse.visualization_mode)
}
inline void LoginResponse::set_visualization_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginResponse.visualization_mode)
}
inline void LoginResponse::set_visualization_mode(const char* value,
    size_t size) {
  
  visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginResponse.visualization_mode)
}
inline std::string* LoginResponse::_internal_mutable_visualization_mode() {
  
  return visualization_mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginResponse::release_visualization_mode() {
  // @@protoc_insertion_point(field_release:LoginResponse.visualization_mode)
  return visualization_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginResponse::set_allocated_visualization_mode(std::string* visualization_mode) {
  if (visualization_mode != nullptr) {
    
  } else {
    
  }
  visualization_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visualization_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.visualization_mode)
}
inline std::string* LoginResponse::unsafe_arena_release_visualization_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginResponse.visualization_mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return visualization_mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginResponse::unsafe_arena_set_allocated_visualization_mode(
    std::string* visualization_mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (visualization_mode != nullptr) {
    
  } else {
    
  }
  visualization_mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      visualization_mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginResponse.visualization_mode)
}

// bool ephemeral_chat = 4;
inline void LoginResponse::clear_ephemeral_chat() {
  ephemeral_chat_ = false;
}
inline bool LoginResponse::_internal_ephemeral_chat() const {
  return ephemeral_chat_;
}
inline bool LoginResponse::ephemeral_chat() const {
  // @@protoc_insertion_point(field_get:LoginResponse.ephemeral_chat)
  return _internal_ephemeral_chat();
}
inline void LoginResponse::_internal_set_ephemeral_chat(bool value) {
  
  ephemeral_chat_ = value;
}
inline void LoginResponse::set_ephemeral_chat(bool value) {
  _internal_set_ephemeral_chat(value);
  // @@protoc_insertion_point(field_set:LoginResponse.ephemeral_chat)
}

// int32 messages_timeout = 5;
inline void LoginResponse::clear_messages_timeout() {
  messages_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::_internal_messages_timeout() const {
  return messages_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::messages_timeout() const {
  // @@protoc_insertion_point(field_get:LoginResponse.messages_timeout)
  return _internal_messages_timeout();
}
inline void LoginResponse::_internal_set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  messages_timeout_ = value;
}
inline void LoginResponse::set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_messages_timeout(value);
  // @@protoc_insertion_point(field_set:LoginResponse.messages_timeout)
}

// uint64 sent_messages = 6;
inline void LoginResponse::clear_sent_messages() {
  sent_messages_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::_internal_sent_messages() const {
  return sent_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::sent_messages() const {
  // @@protoc_insertion_point(field_get:LoginResponse.sent_messages)
  return _internal_sent_messages();
}
inline void LoginResponse::_internal_set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sent_messages_ = value;
}
inline void LoginResponse::set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sent_messages(value);
  // @@protoc_insertion_point(field_set:LoginResponse.sent_messages)
}

// uint64 received_messages = 7;
inline void LoginResponse::clear_received_messages() {
  received_messages_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::_internal_received_messages() const {
  return received_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginResponse::received_messages() const {
  // @@protoc_insertion_point(field_get:LoginResponse.received_messages)
  return _internal_received_messages();
}
inline void LoginResponse::_internal_set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  received_messages_ = value;
}
inline void LoginResponse::set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received_messages(value);
  // @@protoc_insertion_point(field_set:LoginResponse.received_messages)
}

// string response = 8;
inline void LoginResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginResponse::response() const {
  // @@protoc_insertion_point(field_get:LoginResponse.response)
  return _internal_response();
}
inline void LoginResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:LoginResponse.response)
}
inline std::string* LoginResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:LoginResponse.response)
  return _internal_mutable_response();
}
inline const std::string& LoginResponse::_internal_response() const {
  return response_.Get();
}
inline void LoginResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginResponse.response)
}
inline void LoginResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginResponse.response)
}
inline void LoginResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginResponse.response)
}
inline std::string* LoginResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginResponse::release_response() {
  // @@protoc_insertion_point(field_release:LoginResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.response)
}
inline std::string* LoginResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginResponse.response)
}

// -------------------------------------------------------------------

// ForgotAccountRequest

// string email = 1;
inline void ForgotAccountRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ForgotAccountRequest::email() const {
  // @@protoc_insertion_point(field_get:ForgotAccountRequest.email)
  return _internal_email();
}
inline void ForgotAccountRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ForgotAccountRequest.email)
}
inline std::string* ForgotAccountRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ForgotAccountRequest.email)
  return _internal_mutable_email();
}
inline const std::string& ForgotAccountRequest::_internal_email() const {
  return email_.Get();
}
inline void ForgotAccountRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ForgotAccountRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ForgotAccountRequest.email)
}
inline void ForgotAccountRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ForgotAccountRequest.email)
}
inline void ForgotAccountRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ForgotAccountRequest.email)
}
inline std::string* ForgotAccountRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ForgotAccountRequest::release_email() {
  // @@protoc_insertion_point(field_release:ForgotAccountRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ForgotAccountRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ForgotAccountRequest.email)
}
inline std::string* ForgotAccountRequest::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ForgotAccountRequest.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ForgotAccountRequest::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ForgotAccountRequest.email)
}

// -------------------------------------------------------------------

// ForgotAccountResponse

// string response = 1;
inline void ForgotAccountResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ForgotAccountResponse::response() const {
  // @@protoc_insertion_point(field_get:ForgotAccountResponse.response)
  return _internal_response();
}
inline void ForgotAccountResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:ForgotAccountResponse.response)
}
inline std::string* ForgotAccountResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:ForgotAccountResponse.response)
  return _internal_mutable_response();
}
inline const std::string& ForgotAccountResponse::_internal_response() const {
  return response_.Get();
}
inline void ForgotAccountResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ForgotAccountResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ForgotAccountResponse.response)
}
inline void ForgotAccountResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ForgotAccountResponse.response)
}
inline void ForgotAccountResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ForgotAccountResponse.response)
}
inline std::string* ForgotAccountResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ForgotAccountResponse::release_response() {
  // @@protoc_insertion_point(field_release:ForgotAccountResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ForgotAccountResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ForgotAccountResponse.response)
}
inline std::string* ForgotAccountResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ForgotAccountResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ForgotAccountResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ForgotAccountResponse.response)
}

// -------------------------------------------------------------------

// CheckUserStatusRequest

// string username = 1;
inline void CheckUserStatusRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CheckUserStatusRequest::username() const {
  // @@protoc_insertion_point(field_get:CheckUserStatusRequest.username)
  return _internal_username();
}
inline void CheckUserStatusRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:CheckUserStatusRequest.username)
}
inline std::string* CheckUserStatusRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:CheckUserStatusRequest.username)
  return _internal_mutable_username();
}
inline const std::string& CheckUserStatusRequest::_internal_username() const {
  return username_.Get();
}
inline void CheckUserStatusRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckUserStatusRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CheckUserStatusRequest.username)
}
inline void CheckUserStatusRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CheckUserStatusRequest.username)
}
inline void CheckUserStatusRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CheckUserStatusRequest.username)
}
inline std::string* CheckUserStatusRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckUserStatusRequest::release_username() {
  // @@protoc_insertion_point(field_release:CheckUserStatusRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckUserStatusRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CheckUserStatusRequest.username)
}
inline std::string* CheckUserStatusRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CheckUserStatusRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CheckUserStatusRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CheckUserStatusRequest.username)
}

// -------------------------------------------------------------------

// CheckUserStatusResponse

// string status = 1;
inline void CheckUserStatusResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CheckUserStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:CheckUserStatusResponse.status)
  return _internal_status();
}
inline void CheckUserStatusResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CheckUserStatusResponse.status)
}
inline std::string* CheckUserStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:CheckUserStatusResponse.status)
  return _internal_mutable_status();
}
inline const std::string& CheckUserStatusResponse::_internal_status() const {
  return status_.Get();
}
inline void CheckUserStatusResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckUserStatusResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CheckUserStatusResponse.status)
}
inline void CheckUserStatusResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CheckUserStatusResponse.status)
}
inline void CheckUserStatusResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CheckUserStatusResponse.status)
}
inline std::string* CheckUserStatusResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckUserStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:CheckUserStatusResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckUserStatusResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CheckUserStatusResponse.status)
}
inline std::string* CheckUserStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CheckUserStatusResponse.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CheckUserStatusResponse::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CheckUserStatusResponse.status)
}

// -------------------------------------------------------------------

// ConnectionRequest

// string username = 1;
inline void ConnectionRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionRequest::username() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.username)
  return _internal_username();
}
inline void ConnectionRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.username)
}
inline std::string* ConnectionRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.username)
  return _internal_mutable_username();
}
inline const std::string& ConnectionRequest::_internal_username() const {
  return username_.Get();
}
inline void ConnectionRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionRequest.username)
}
inline void ConnectionRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.username)
}
inline void ConnectionRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.username)
}
inline std::string* ConnectionRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionRequest::release_username() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.username)
}
inline std::string* ConnectionRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionRequest.username)
}

// -------------------------------------------------------------------

// ConnectionResponse

// string contact_ip_address = 1;
inline void ConnectionResponse::clear_contact_ip_address() {
  contact_ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionResponse::contact_ip_address() const {
  // @@protoc_insertion_point(field_get:ConnectionResponse.contact_ip_address)
  return _internal_contact_ip_address();
}
inline void ConnectionResponse::set_contact_ip_address(const std::string& value) {
  _internal_set_contact_ip_address(value);
  // @@protoc_insertion_point(field_set:ConnectionResponse.contact_ip_address)
}
inline std::string* ConnectionResponse::mutable_contact_ip_address() {
  // @@protoc_insertion_point(field_mutable:ConnectionResponse.contact_ip_address)
  return _internal_mutable_contact_ip_address();
}
inline const std::string& ConnectionResponse::_internal_contact_ip_address() const {
  return contact_ip_address_.Get();
}
inline void ConnectionResponse::_internal_set_contact_ip_address(const std::string& value) {
  
  contact_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionResponse::set_contact_ip_address(std::string&& value) {
  
  contact_ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConnectionResponse.contact_ip_address)
}
inline void ConnectionResponse::set_contact_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contact_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConnectionResponse.contact_ip_address)
}
inline void ConnectionResponse::set_contact_ip_address(const char* value,
    size_t size) {
  
  contact_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConnectionResponse.contact_ip_address)
}
inline std::string* ConnectionResponse::_internal_mutable_contact_ip_address() {
  
  return contact_ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionResponse::release_contact_ip_address() {
  // @@protoc_insertion_point(field_release:ConnectionResponse.contact_ip_address)
  return contact_ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionResponse::set_allocated_contact_ip_address(std::string* contact_ip_address) {
  if (contact_ip_address != nullptr) {
    
  } else {
    
  }
  contact_ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contact_ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConnectionResponse.contact_ip_address)
}
inline std::string* ConnectionResponse::unsafe_arena_release_contact_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConnectionResponse.contact_ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contact_ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionResponse::unsafe_arena_set_allocated_contact_ip_address(
    std::string* contact_ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contact_ip_address != nullptr) {
    
  } else {
    
  }
  contact_ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contact_ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionResponse.contact_ip_address)
}

// -------------------------------------------------------------------

// ChangePasswordRequest

// string username = 1;
inline void ChangePasswordRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangePasswordRequest::username() const {
  // @@protoc_insertion_point(field_get:ChangePasswordRequest.username)
  return _internal_username();
}
inline void ChangePasswordRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ChangePasswordRequest.username)
}
inline std::string* ChangePasswordRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ChangePasswordRequest.username)
  return _internal_mutable_username();
}
inline const std::string& ChangePasswordRequest::_internal_username() const {
  return username_.Get();
}
inline void ChangePasswordRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangePasswordRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChangePasswordRequest.username)
}
inline void ChangePasswordRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ChangePasswordRequest.username)
}
inline void ChangePasswordRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChangePasswordRequest.username)
}
inline std::string* ChangePasswordRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangePasswordRequest::release_username() {
  // @@protoc_insertion_point(field_release:ChangePasswordRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChangePasswordRequest.username)
}
inline std::string* ChangePasswordRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ChangePasswordRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangePasswordRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChangePasswordRequest.username)
}

// bytes old_password_hash = 2;
inline void ChangePasswordRequest::clear_old_password_hash() {
  old_password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangePasswordRequest::old_password_hash() const {
  // @@protoc_insertion_point(field_get:ChangePasswordRequest.old_password_hash)
  return _internal_old_password_hash();
}
inline void ChangePasswordRequest::set_old_password_hash(const std::string& value) {
  _internal_set_old_password_hash(value);
  // @@protoc_insertion_point(field_set:ChangePasswordRequest.old_password_hash)
}
inline std::string* ChangePasswordRequest::mutable_old_password_hash() {
  // @@protoc_insertion_point(field_mutable:ChangePasswordRequest.old_password_hash)
  return _internal_mutable_old_password_hash();
}
inline const std::string& ChangePasswordRequest::_internal_old_password_hash() const {
  return old_password_hash_.Get();
}
inline void ChangePasswordRequest::_internal_set_old_password_hash(const std::string& value) {
  
  old_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangePasswordRequest::set_old_password_hash(std::string&& value) {
  
  old_password_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChangePasswordRequest.old_password_hash)
}
inline void ChangePasswordRequest::set_old_password_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ChangePasswordRequest.old_password_hash)
}
inline void ChangePasswordRequest::set_old_password_hash(const void* value,
    size_t size) {
  
  old_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChangePasswordRequest.old_password_hash)
}
inline std::string* ChangePasswordRequest::_internal_mutable_old_password_hash() {
  
  return old_password_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangePasswordRequest::release_old_password_hash() {
  // @@protoc_insertion_point(field_release:ChangePasswordRequest.old_password_hash)
  return old_password_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordRequest::set_allocated_old_password_hash(std::string* old_password_hash) {
  if (old_password_hash != nullptr) {
    
  } else {
    
  }
  old_password_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_password_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChangePasswordRequest.old_password_hash)
}
inline std::string* ChangePasswordRequest::unsafe_arena_release_old_password_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ChangePasswordRequest.old_password_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return old_password_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangePasswordRequest::unsafe_arena_set_allocated_old_password_hash(
    std::string* old_password_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (old_password_hash != nullptr) {
    
  } else {
    
  }
  old_password_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      old_password_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChangePasswordRequest.old_password_hash)
}

// bytes new_password_hash = 3;
inline void ChangePasswordRequest::clear_new_password_hash() {
  new_password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangePasswordRequest::new_password_hash() const {
  // @@protoc_insertion_point(field_get:ChangePasswordRequest.new_password_hash)
  return _internal_new_password_hash();
}
inline void ChangePasswordRequest::set_new_password_hash(const std::string& value) {
  _internal_set_new_password_hash(value);
  // @@protoc_insertion_point(field_set:ChangePasswordRequest.new_password_hash)
}
inline std::string* ChangePasswordRequest::mutable_new_password_hash() {
  // @@protoc_insertion_point(field_mutable:ChangePasswordRequest.new_password_hash)
  return _internal_mutable_new_password_hash();
}
inline const std::string& ChangePasswordRequest::_internal_new_password_hash() const {
  return new_password_hash_.Get();
}
inline void ChangePasswordRequest::_internal_set_new_password_hash(const std::string& value) {
  
  new_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangePasswordRequest::set_new_password_hash(std::string&& value) {
  
  new_password_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChangePasswordRequest.new_password_hash)
}
inline void ChangePasswordRequest::set_new_password_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ChangePasswordRequest.new_password_hash)
}
inline void ChangePasswordRequest::set_new_password_hash(const void* value,
    size_t size) {
  
  new_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChangePasswordRequest.new_password_hash)
}
inline std::string* ChangePasswordRequest::_internal_mutable_new_password_hash() {
  
  return new_password_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangePasswordRequest::release_new_password_hash() {
  // @@protoc_insertion_point(field_release:ChangePasswordRequest.new_password_hash)
  return new_password_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordRequest::set_allocated_new_password_hash(std::string* new_password_hash) {
  if (new_password_hash != nullptr) {
    
  } else {
    
  }
  new_password_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChangePasswordRequest.new_password_hash)
}
inline std::string* ChangePasswordRequest::unsafe_arena_release_new_password_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ChangePasswordRequest.new_password_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_password_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangePasswordRequest::unsafe_arena_set_allocated_new_password_hash(
    std::string* new_password_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_password_hash != nullptr) {
    
  } else {
    
  }
  new_password_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_password_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChangePasswordRequest.new_password_hash)
}

// -------------------------------------------------------------------

// ChangePasswordResponse

// string response = 1;
inline void ChangePasswordResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangePasswordResponse::response() const {
  // @@protoc_insertion_point(field_get:ChangePasswordResponse.response)
  return _internal_response();
}
inline void ChangePasswordResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:ChangePasswordResponse.response)
}
inline std::string* ChangePasswordResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:ChangePasswordResponse.response)
  return _internal_mutable_response();
}
inline const std::string& ChangePasswordResponse::_internal_response() const {
  return response_.Get();
}
inline void ChangePasswordResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangePasswordResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChangePasswordResponse.response)
}
inline void ChangePasswordResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ChangePasswordResponse.response)
}
inline void ChangePasswordResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChangePasswordResponse.response)
}
inline std::string* ChangePasswordResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangePasswordResponse::release_response() {
  // @@protoc_insertion_point(field_release:ChangePasswordResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChangePasswordResponse.response)
}
inline std::string* ChangePasswordResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ChangePasswordResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangePasswordResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChangePasswordResponse.response)
}

// -------------------------------------------------------------------

// UpdateRequest

// string username = 1;
inline void UpdateRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::username() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.username)
  return _internal_username();
}
inline void UpdateRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.username)
}
inline std::string* UpdateRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UpdateRequest.username)
  return _internal_mutable_username();
}
inline const std::string& UpdateRequest::_internal_username() const {
  return username_.Get();
}
inline void UpdateRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateRequest.username)
}
inline void UpdateRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateRequest.username)
}
inline void UpdateRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateRequest.username)
}
inline std::string* UpdateRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_username() {
  // @@protoc_insertion_point(field_release:UpdateRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateRequest.username)
}
inline std::string* UpdateRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateRequest.username)
}

// string status = 2;
inline void UpdateRequest::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::status() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.status)
  return _internal_status();
}
inline void UpdateRequest::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.status)
}
inline std::string* UpdateRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable:UpdateRequest.status)
  return _internal_mutable_status();
}
inline const std::string& UpdateRequest::_internal_status() const {
  return status_.Get();
}
inline void UpdateRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateRequest.status)
}
inline void UpdateRequest::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateRequest.status)
}
inline void UpdateRequest::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateRequest.status)
}
inline std::string* UpdateRequest::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_status() {
  // @@protoc_insertion_point(field_release:UpdateRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateRequest.status)
}
inline std::string* UpdateRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateRequest.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateRequest.status)
}

// string visualization_mode = 3;
inline void UpdateRequest::clear_visualization_mode() {
  visualization_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::visualization_mode() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.visualization_mode)
  return _internal_visualization_mode();
}
inline void UpdateRequest::set_visualization_mode(const std::string& value) {
  _internal_set_visualization_mode(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.visualization_mode)
}
inline std::string* UpdateRequest::mutable_visualization_mode() {
  // @@protoc_insertion_point(field_mutable:UpdateRequest.visualization_mode)
  return _internal_mutable_visualization_mode();
}
inline const std::string& UpdateRequest::_internal_visualization_mode() const {
  return visualization_mode_.Get();
}
inline void UpdateRequest::_internal_set_visualization_mode(const std::string& value) {
  
  visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_visualization_mode(std::string&& value) {
  
  visualization_mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateRequest.visualization_mode)
}
inline void UpdateRequest::set_visualization_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateRequest.visualization_mode)
}
inline void UpdateRequest::set_visualization_mode(const char* value,
    size_t size) {
  
  visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateRequest.visualization_mode)
}
inline std::string* UpdateRequest::_internal_mutable_visualization_mode() {
  
  return visualization_mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_visualization_mode() {
  // @@protoc_insertion_point(field_release:UpdateRequest.visualization_mode)
  return visualization_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_visualization_mode(std::string* visualization_mode) {
  if (visualization_mode != nullptr) {
    
  } else {
    
  }
  visualization_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visualization_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateRequest.visualization_mode)
}
inline std::string* UpdateRequest::unsafe_arena_release_visualization_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateRequest.visualization_mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return visualization_mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_visualization_mode(
    std::string* visualization_mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (visualization_mode != nullptr) {
    
  } else {
    
  }
  visualization_mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      visualization_mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateRequest.visualization_mode)
}

// bool ephemeral_chat = 4;
inline void UpdateRequest::clear_ephemeral_chat() {
  ephemeral_chat_ = false;
}
inline bool UpdateRequest::_internal_ephemeral_chat() const {
  return ephemeral_chat_;
}
inline bool UpdateRequest::ephemeral_chat() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.ephemeral_chat)
  return _internal_ephemeral_chat();
}
inline void UpdateRequest::_internal_set_ephemeral_chat(bool value) {
  
  ephemeral_chat_ = value;
}
inline void UpdateRequest::set_ephemeral_chat(bool value) {
  _internal_set_ephemeral_chat(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.ephemeral_chat)
}

// int32 messages_timeout = 5;
inline void UpdateRequest::clear_messages_timeout() {
  messages_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRequest::_internal_messages_timeout() const {
  return messages_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRequest::messages_timeout() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.messages_timeout)
  return _internal_messages_timeout();
}
inline void UpdateRequest::_internal_set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  messages_timeout_ = value;
}
inline void UpdateRequest::set_messages_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_messages_timeout(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.messages_timeout)
}

// uint64 sent_messages = 6;
inline void UpdateRequest::clear_sent_messages() {
  sent_messages_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateRequest::_internal_sent_messages() const {
  return sent_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateRequest::sent_messages() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.sent_messages)
  return _internal_sent_messages();
}
inline void UpdateRequest::_internal_set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sent_messages_ = value;
}
inline void UpdateRequest::set_sent_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sent_messages(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.sent_messages)
}

// uint64 received_messages = 7;
inline void UpdateRequest::clear_received_messages() {
  received_messages_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateRequest::_internal_received_messages() const {
  return received_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateRequest::received_messages() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.received_messages)
  return _internal_received_messages();
}
inline void UpdateRequest::_internal_set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  received_messages_ = value;
}
inline void UpdateRequest::set_received_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received_messages(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.received_messages)
}

// string response = 8;
inline void UpdateRequest::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::response() const {
  // @@protoc_insertion_point(field_get:UpdateRequest.response)
  return _internal_response();
}
inline void UpdateRequest::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:UpdateRequest.response)
}
inline std::string* UpdateRequest::mutable_response() {
  // @@protoc_insertion_point(field_mutable:UpdateRequest.response)
  return _internal_mutable_response();
}
inline const std::string& UpdateRequest::_internal_response() const {
  return response_.Get();
}
inline void UpdateRequest::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateRequest.response)
}
inline void UpdateRequest::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateRequest.response)
}
inline void UpdateRequest::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateRequest.response)
}
inline std::string* UpdateRequest::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_response() {
  // @@protoc_insertion_point(field_release:UpdateRequest.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateRequest.response)
}
inline std::string* UpdateRequest::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateRequest.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateRequest.response)
}

// -------------------------------------------------------------------

// UpdateResponse

// string response = 1;
inline void UpdateResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateResponse::response() const {
  // @@protoc_insertion_point(field_get:UpdateResponse.response)
  return _internal_response();
}
inline void UpdateResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:UpdateResponse.response)
}
inline std::string* UpdateResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:UpdateResponse.response)
  return _internal_mutable_response();
}
inline const std::string& UpdateResponse::_internal_response() const {
  return response_.Get();
}
inline void UpdateResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateResponse.response)
}
inline void UpdateResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateResponse.response)
}
inline void UpdateResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateResponse.response)
}
inline std::string* UpdateResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateResponse::release_response() {
  // @@protoc_insertion_point(field_release:UpdateResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateResponse.response)
}
inline std::string* UpdateResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateResponse.response)
}

// -------------------------------------------------------------------

// BlockRequest

// string username = 1;
inline void BlockRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockRequest::username() const {
  // @@protoc_insertion_point(field_get:BlockRequest.username)
  return _internal_username();
}
inline void BlockRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:BlockRequest.username)
}
inline std::string* BlockRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:BlockRequest.username)
  return _internal_mutable_username();
}
inline const std::string& BlockRequest::_internal_username() const {
  return username_.Get();
}
inline void BlockRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BlockRequest.username)
}
inline void BlockRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BlockRequest.username)
}
inline void BlockRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BlockRequest.username)
}
inline std::string* BlockRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockRequest::release_username() {
  // @@protoc_insertion_point(field_release:BlockRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BlockRequest.username)
}
inline std::string* BlockRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BlockRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockRequest.username)
}

// string contact = 2;
inline void BlockRequest::clear_contact() {
  contact_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockRequest::contact() const {
  // @@protoc_insertion_point(field_get:BlockRequest.contact)
  return _internal_contact();
}
inline void BlockRequest::set_contact(const std::string& value) {
  _internal_set_contact(value);
  // @@protoc_insertion_point(field_set:BlockRequest.contact)
}
inline std::string* BlockRequest::mutable_contact() {
  // @@protoc_insertion_point(field_mutable:BlockRequest.contact)
  return _internal_mutable_contact();
}
inline const std::string& BlockRequest::_internal_contact() const {
  return contact_.Get();
}
inline void BlockRequest::_internal_set_contact(const std::string& value) {
  
  contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockRequest::set_contact(std::string&& value) {
  
  contact_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BlockRequest.contact)
}
inline void BlockRequest::set_contact(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BlockRequest.contact)
}
inline void BlockRequest::set_contact(const char* value,
    size_t size) {
  
  contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BlockRequest.contact)
}
inline std::string* BlockRequest::_internal_mutable_contact() {
  
  return contact_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockRequest::release_contact() {
  // @@protoc_insertion_point(field_release:BlockRequest.contact)
  return contact_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockRequest::set_allocated_contact(std::string* contact) {
  if (contact != nullptr) {
    
  } else {
    
  }
  contact_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contact,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BlockRequest.contact)
}
inline std::string* BlockRequest::unsafe_arena_release_contact() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BlockRequest.contact)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contact_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockRequest::unsafe_arena_set_allocated_contact(
    std::string* contact) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contact != nullptr) {
    
  } else {
    
  }
  contact_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contact, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockRequest.contact)
}

// -------------------------------------------------------------------

// BlockResponse

// string response = 1;
inline void BlockResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockResponse::response() const {
  // @@protoc_insertion_point(field_get:BlockResponse.response)
  return _internal_response();
}
inline void BlockResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:BlockResponse.response)
}
inline std::string* BlockResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:BlockResponse.response)
  return _internal_mutable_response();
}
inline const std::string& BlockResponse::_internal_response() const {
  return response_.Get();
}
inline void BlockResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BlockResponse.response)
}
inline void BlockResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BlockResponse.response)
}
inline void BlockResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BlockResponse.response)
}
inline std::string* BlockResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockResponse::release_response() {
  // @@protoc_insertion_point(field_release:BlockResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BlockResponse.response)
}
inline std::string* BlockResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BlockResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockResponse.response)
}

// -------------------------------------------------------------------

// UnBlockRequest

// string username = 1;
inline void UnBlockRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnBlockRequest::username() const {
  // @@protoc_insertion_point(field_get:UnBlockRequest.username)
  return _internal_username();
}
inline void UnBlockRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UnBlockRequest.username)
}
inline std::string* UnBlockRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UnBlockRequest.username)
  return _internal_mutable_username();
}
inline const std::string& UnBlockRequest::_internal_username() const {
  return username_.Get();
}
inline void UnBlockRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnBlockRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UnBlockRequest.username)
}
inline void UnBlockRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UnBlockRequest.username)
}
inline void UnBlockRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UnBlockRequest.username)
}
inline std::string* UnBlockRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnBlockRequest::release_username() {
  // @@protoc_insertion_point(field_release:UnBlockRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnBlockRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UnBlockRequest.username)
}
inline std::string* UnBlockRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UnBlockRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnBlockRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnBlockRequest.username)
}

// string contact = 2;
inline void UnBlockRequest::clear_contact() {
  contact_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnBlockRequest::contact() const {
  // @@protoc_insertion_point(field_get:UnBlockRequest.contact)
  return _internal_contact();
}
inline void UnBlockRequest::set_contact(const std::string& value) {
  _internal_set_contact(value);
  // @@protoc_insertion_point(field_set:UnBlockRequest.contact)
}
inline std::string* UnBlockRequest::mutable_contact() {
  // @@protoc_insertion_point(field_mutable:UnBlockRequest.contact)
  return _internal_mutable_contact();
}
inline const std::string& UnBlockRequest::_internal_contact() const {
  return contact_.Get();
}
inline void UnBlockRequest::_internal_set_contact(const std::string& value) {
  
  contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnBlockRequest::set_contact(std::string&& value) {
  
  contact_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UnBlockRequest.contact)
}
inline void UnBlockRequest::set_contact(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UnBlockRequest.contact)
}
inline void UnBlockRequest::set_contact(const char* value,
    size_t size) {
  
  contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UnBlockRequest.contact)
}
inline std::string* UnBlockRequest::_internal_mutable_contact() {
  
  return contact_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnBlockRequest::release_contact() {
  // @@protoc_insertion_point(field_release:UnBlockRequest.contact)
  return contact_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnBlockRequest::set_allocated_contact(std::string* contact) {
  if (contact != nullptr) {
    
  } else {
    
  }
  contact_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contact,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UnBlockRequest.contact)
}
inline std::string* UnBlockRequest::unsafe_arena_release_contact() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UnBlockRequest.contact)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contact_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnBlockRequest::unsafe_arena_set_allocated_contact(
    std::string* contact) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contact != nullptr) {
    
  } else {
    
  }
  contact_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contact, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnBlockRequest.contact)
}

// -------------------------------------------------------------------

// UnBlockResponse

// string response = 1;
inline void UnBlockResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnBlockResponse::response() const {
  // @@protoc_insertion_point(field_get:UnBlockResponse.response)
  return _internal_response();
}
inline void UnBlockResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:UnBlockResponse.response)
}
inline std::string* UnBlockResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:UnBlockResponse.response)
  return _internal_mutable_response();
}
inline const std::string& UnBlockResponse::_internal_response() const {
  return response_.Get();
}
inline void UnBlockResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnBlockResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UnBlockResponse.response)
}
inline void UnBlockResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UnBlockResponse.response)
}
inline void UnBlockResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UnBlockResponse.response)
}
inline std::string* UnBlockResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnBlockResponse::release_response() {
  // @@protoc_insertion_point(field_release:UnBlockResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnBlockResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UnBlockResponse.response)
}
inline std::string* UnBlockResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UnBlockResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnBlockResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UnBlockResponse.response)
}

// -------------------------------------------------------------------

// BlockListRequest

// string username = 1;
inline void BlockListRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockListRequest::username() const {
  // @@protoc_insertion_point(field_get:BlockListRequest.username)
  return _internal_username();
}
inline void BlockListRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:BlockListRequest.username)
}
inline std::string* BlockListRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:BlockListRequest.username)
  return _internal_mutable_username();
}
inline const std::string& BlockListRequest::_internal_username() const {
  return username_.Get();
}
inline void BlockListRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockListRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BlockListRequest.username)
}
inline void BlockListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BlockListRequest.username)
}
inline void BlockListRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BlockListRequest.username)
}
inline std::string* BlockListRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockListRequest::release_username() {
  // @@protoc_insertion_point(field_release:BlockListRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockListRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BlockListRequest.username)
}
inline std::string* BlockListRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BlockListRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockListRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlockListRequest.username)
}

// -------------------------------------------------------------------

// BlockListResponse

// repeated string list = 1;
inline int BlockListResponse::_internal_list_size() const {
  return list_.size();
}
inline int BlockListResponse::list_size() const {
  return _internal_list_size();
}
inline void BlockListResponse::clear_list() {
  list_.Clear();
}
inline std::string* BlockListResponse::add_list() {
  // @@protoc_insertion_point(field_add_mutable:BlockListResponse.list)
  return _internal_add_list();
}
inline const std::string& BlockListResponse::_internal_list(int index) const {
  return list_.Get(index);
}
inline const std::string& BlockListResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:BlockListResponse.list)
  return _internal_list(index);
}
inline std::string* BlockListResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:BlockListResponse.list)
  return list_.Mutable(index);
}
inline void BlockListResponse::set_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BlockListResponse.list)
  list_.Mutable(index)->assign(value);
}
inline void BlockListResponse::set_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BlockListResponse.list)
  list_.Mutable(index)->assign(std::move(value));
}
inline void BlockListResponse::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BlockListResponse.list)
}
inline void BlockListResponse::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BlockListResponse.list)
}
inline std::string* BlockListResponse::_internal_add_list() {
  return list_.Add();
}
inline void BlockListResponse::add_list(const std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BlockListResponse.list)
}
inline void BlockListResponse::add_list(std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BlockListResponse.list)
}
inline void BlockListResponse::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BlockListResponse.list)
}
inline void BlockListResponse::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BlockListResponse.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockListResponse::list() const {
  // @@protoc_insertion_point(field_list:BlockListResponse.list)
  return list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockListResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:BlockListResponse.list)
  return &list_;
}

// -------------------------------------------------------------------

// UserRequest

// string ip_address = 1;
inline void UserRequest::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRequest::ip_address() const {
  // @@protoc_insertion_point(field_get:UserRequest.ip_address)
  return _internal_ip_address();
}
inline void UserRequest::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:UserRequest.ip_address)
}
inline std::string* UserRequest::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:UserRequest.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& UserRequest::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void UserRequest::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRequest::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserRequest.ip_address)
}
inline void UserRequest::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserRequest.ip_address)
}
inline void UserRequest::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserRequest.ip_address)
}
inline std::string* UserRequest::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRequest::release_ip_address() {
  // @@protoc_insertion_point(field_release:UserRequest.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRequest::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserRequest.ip_address)
}
inline std::string* UserRequest::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRequest::unsafe_arena_set_allocated_ip_address(
    std::string* ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.ip_address)
}

// string os = 2;
inline void UserRequest::clear_os() {
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRequest::os() const {
  // @@protoc_insertion_point(field_get:UserRequest.os)
  return _internal_os();
}
inline void UserRequest::set_os(const std::string& value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:UserRequest.os)
}
inline std::string* UserRequest::mutable_os() {
  // @@protoc_insertion_point(field_mutable:UserRequest.os)
  return _internal_mutable_os();
}
inline const std::string& UserRequest::_internal_os() const {
  return os_.Get();
}
inline void UserRequest::_internal_set_os(const std::string& value) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRequest::set_os(std::string&& value) {
  
  os_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserRequest.os)
}
inline void UserRequest::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserRequest.os)
}
inline void UserRequest::set_os(const char* value,
    size_t size) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserRequest.os)
}
inline std::string* UserRequest::_internal_mutable_os() {
  
  return os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRequest::release_os() {
  // @@protoc_insertion_point(field_release:UserRequest.os)
  return os_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRequest::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    
  } else {
    
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserRequest.os)
}
inline std::string* UserRequest::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.os)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRequest::unsafe_arena_set_allocated_os(
    std::string* os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os != nullptr) {
    
  } else {
    
  }
  os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.os)
}

// uint64 machine_id = 3;
inline void UserRequest::clear_machine_id() {
  machine_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserRequest::_internal_machine_id() const {
  return machine_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:UserRequest.machine_id)
  return _internal_machine_id();
}
inline void UserRequest::_internal_set_machine_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  machine_id_ = value;
}
inline void UserRequest::set_machine_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:UserRequest.machine_id)
}

// .RegisterRequest register = 4;
inline bool UserRequest::_internal_has_register_() const {
  return MesssageContent_case() == kRegister;
}
inline bool UserRequest::has_register_() const {
  return _internal_has_register_();
}
inline void UserRequest::set_has_register_() {
  _oneof_case_[0] = kRegister;
}
inline void UserRequest::clear_register_() {
  if (_internal_has_register_()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.register__;
    }
    clear_has_MesssageContent();
  }
}
inline ::RegisterRequest* UserRequest::release_register_() {
  // @@protoc_insertion_point(field_release:UserRequest.register)
  if (_internal_has_register_()) {
    clear_has_MesssageContent();
      ::RegisterRequest* temp = MesssageContent_.register__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.register__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RegisterRequest& UserRequest::_internal_register_() const {
  return _internal_has_register_()
      ? *MesssageContent_.register__
      : *reinterpret_cast< ::RegisterRequest*>(&::_RegisterRequest_default_instance_);
}
inline const ::RegisterRequest& UserRequest::register_() const {
  // @@protoc_insertion_point(field_get:UserRequest.register)
  return _internal_register_();
}
inline ::RegisterRequest* UserRequest::unsafe_arena_release_register_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.register)
  if (_internal_has_register_()) {
    clear_has_MesssageContent();
    ::RegisterRequest* temp = MesssageContent_.register__;
    MesssageContent_.register__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_register_(::RegisterRequest* register_) {
  clear_MesssageContent();
  if (register_) {
    set_has_register_();
    MesssageContent_.register__ = register_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.register)
}
inline ::RegisterRequest* UserRequest::_internal_mutable_register_() {
  if (!_internal_has_register_()) {
    clear_MesssageContent();
    set_has_register_();
    MesssageContent_.register__ = CreateMaybeMessage< ::RegisterRequest >(GetArena());
  }
  return MesssageContent_.register__;
}
inline ::RegisterRequest* UserRequest::mutable_register_() {
  // @@protoc_insertion_point(field_mutable:UserRequest.register)
  return _internal_mutable_register_();
}

// .LoginRequest login = 5;
inline bool UserRequest::_internal_has_login() const {
  return MesssageContent_case() == kLogin;
}
inline bool UserRequest::has_login() const {
  return _internal_has_login();
}
inline void UserRequest::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline void UserRequest::clear_login() {
  if (_internal_has_login()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.login_;
    }
    clear_has_MesssageContent();
  }
}
inline ::LoginRequest* UserRequest::release_login() {
  // @@protoc_insertion_point(field_release:UserRequest.login)
  if (_internal_has_login()) {
    clear_has_MesssageContent();
      ::LoginRequest* temp = MesssageContent_.login_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginRequest& UserRequest::_internal_login() const {
  return _internal_has_login()
      ? *MesssageContent_.login_
      : *reinterpret_cast< ::LoginRequest*>(&::_LoginRequest_default_instance_);
}
inline const ::LoginRequest& UserRequest::login() const {
  // @@protoc_insertion_point(field_get:UserRequest.login)
  return _internal_login();
}
inline ::LoginRequest* UserRequest::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.login)
  if (_internal_has_login()) {
    clear_has_MesssageContent();
    ::LoginRequest* temp = MesssageContent_.login_;
    MesssageContent_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_login(::LoginRequest* login) {
  clear_MesssageContent();
  if (login) {
    set_has_login();
    MesssageContent_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.login)
}
inline ::LoginRequest* UserRequest::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_MesssageContent();
    set_has_login();
    MesssageContent_.login_ = CreateMaybeMessage< ::LoginRequest >(GetArena());
  }
  return MesssageContent_.login_;
}
inline ::LoginRequest* UserRequest::mutable_login() {
  // @@protoc_insertion_point(field_mutable:UserRequest.login)
  return _internal_mutable_login();
}

// .ForgotAccountRequest forgot_account = 6;
inline bool UserRequest::_internal_has_forgot_account() const {
  return MesssageContent_case() == kForgotAccount;
}
inline bool UserRequest::has_forgot_account() const {
  return _internal_has_forgot_account();
}
inline void UserRequest::set_has_forgot_account() {
  _oneof_case_[0] = kForgotAccount;
}
inline void UserRequest::clear_forgot_account() {
  if (_internal_has_forgot_account()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.forgot_account_;
    }
    clear_has_MesssageContent();
  }
}
inline ::ForgotAccountRequest* UserRequest::release_forgot_account() {
  // @@protoc_insertion_point(field_release:UserRequest.forgot_account)
  if (_internal_has_forgot_account()) {
    clear_has_MesssageContent();
      ::ForgotAccountRequest* temp = MesssageContent_.forgot_account_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.forgot_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ForgotAccountRequest& UserRequest::_internal_forgot_account() const {
  return _internal_has_forgot_account()
      ? *MesssageContent_.forgot_account_
      : *reinterpret_cast< ::ForgotAccountRequest*>(&::_ForgotAccountRequest_default_instance_);
}
inline const ::ForgotAccountRequest& UserRequest::forgot_account() const {
  // @@protoc_insertion_point(field_get:UserRequest.forgot_account)
  return _internal_forgot_account();
}
inline ::ForgotAccountRequest* UserRequest::unsafe_arena_release_forgot_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.forgot_account)
  if (_internal_has_forgot_account()) {
    clear_has_MesssageContent();
    ::ForgotAccountRequest* temp = MesssageContent_.forgot_account_;
    MesssageContent_.forgot_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_forgot_account(::ForgotAccountRequest* forgot_account) {
  clear_MesssageContent();
  if (forgot_account) {
    set_has_forgot_account();
    MesssageContent_.forgot_account_ = forgot_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.forgot_account)
}
inline ::ForgotAccountRequest* UserRequest::_internal_mutable_forgot_account() {
  if (!_internal_has_forgot_account()) {
    clear_MesssageContent();
    set_has_forgot_account();
    MesssageContent_.forgot_account_ = CreateMaybeMessage< ::ForgotAccountRequest >(GetArena());
  }
  return MesssageContent_.forgot_account_;
}
inline ::ForgotAccountRequest* UserRequest::mutable_forgot_account() {
  // @@protoc_insertion_point(field_mutable:UserRequest.forgot_account)
  return _internal_mutable_forgot_account();
}

// .CheckUserStatusRequest check_status = 7;
inline bool UserRequest::_internal_has_check_status() const {
  return MesssageContent_case() == kCheckStatus;
}
inline bool UserRequest::has_check_status() const {
  return _internal_has_check_status();
}
inline void UserRequest::set_has_check_status() {
  _oneof_case_[0] = kCheckStatus;
}
inline void UserRequest::clear_check_status() {
  if (_internal_has_check_status()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.check_status_;
    }
    clear_has_MesssageContent();
  }
}
inline ::CheckUserStatusRequest* UserRequest::release_check_status() {
  // @@protoc_insertion_point(field_release:UserRequest.check_status)
  if (_internal_has_check_status()) {
    clear_has_MesssageContent();
      ::CheckUserStatusRequest* temp = MesssageContent_.check_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.check_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CheckUserStatusRequest& UserRequest::_internal_check_status() const {
  return _internal_has_check_status()
      ? *MesssageContent_.check_status_
      : *reinterpret_cast< ::CheckUserStatusRequest*>(&::_CheckUserStatusRequest_default_instance_);
}
inline const ::CheckUserStatusRequest& UserRequest::check_status() const {
  // @@protoc_insertion_point(field_get:UserRequest.check_status)
  return _internal_check_status();
}
inline ::CheckUserStatusRequest* UserRequest::unsafe_arena_release_check_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.check_status)
  if (_internal_has_check_status()) {
    clear_has_MesssageContent();
    ::CheckUserStatusRequest* temp = MesssageContent_.check_status_;
    MesssageContent_.check_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_check_status(::CheckUserStatusRequest* check_status) {
  clear_MesssageContent();
  if (check_status) {
    set_has_check_status();
    MesssageContent_.check_status_ = check_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.check_status)
}
inline ::CheckUserStatusRequest* UserRequest::_internal_mutable_check_status() {
  if (!_internal_has_check_status()) {
    clear_MesssageContent();
    set_has_check_status();
    MesssageContent_.check_status_ = CreateMaybeMessage< ::CheckUserStatusRequest >(GetArena());
  }
  return MesssageContent_.check_status_;
}
inline ::CheckUserStatusRequest* UserRequest::mutable_check_status() {
  // @@protoc_insertion_point(field_mutable:UserRequest.check_status)
  return _internal_mutable_check_status();
}

// .ConnectionRequest connect = 8;
inline bool UserRequest::_internal_has_connect() const {
  return MesssageContent_case() == kConnect;
}
inline bool UserRequest::has_connect() const {
  return _internal_has_connect();
}
inline void UserRequest::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void UserRequest::clear_connect() {
  if (_internal_has_connect()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.connect_;
    }
    clear_has_MesssageContent();
  }
}
inline ::ConnectionRequest* UserRequest::release_connect() {
  // @@protoc_insertion_point(field_release:UserRequest.connect)
  if (_internal_has_connect()) {
    clear_has_MesssageContent();
      ::ConnectionRequest* temp = MesssageContent_.connect_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ConnectionRequest& UserRequest::_internal_connect() const {
  return _internal_has_connect()
      ? *MesssageContent_.connect_
      : *reinterpret_cast< ::ConnectionRequest*>(&::_ConnectionRequest_default_instance_);
}
inline const ::ConnectionRequest& UserRequest::connect() const {
  // @@protoc_insertion_point(field_get:UserRequest.connect)
  return _internal_connect();
}
inline ::ConnectionRequest* UserRequest::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.connect)
  if (_internal_has_connect()) {
    clear_has_MesssageContent();
    ::ConnectionRequest* temp = MesssageContent_.connect_;
    MesssageContent_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_connect(::ConnectionRequest* connect) {
  clear_MesssageContent();
  if (connect) {
    set_has_connect();
    MesssageContent_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.connect)
}
inline ::ConnectionRequest* UserRequest::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_MesssageContent();
    set_has_connect();
    MesssageContent_.connect_ = CreateMaybeMessage< ::ConnectionRequest >(GetArena());
  }
  return MesssageContent_.connect_;
}
inline ::ConnectionRequest* UserRequest::mutable_connect() {
  // @@protoc_insertion_point(field_mutable:UserRequest.connect)
  return _internal_mutable_connect();
}

// .ChangePasswordRequest change_password = 9;
inline bool UserRequest::_internal_has_change_password() const {
  return MesssageContent_case() == kChangePassword;
}
inline bool UserRequest::has_change_password() const {
  return _internal_has_change_password();
}
inline void UserRequest::set_has_change_password() {
  _oneof_case_[0] = kChangePassword;
}
inline void UserRequest::clear_change_password() {
  if (_internal_has_change_password()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.change_password_;
    }
    clear_has_MesssageContent();
  }
}
inline ::ChangePasswordRequest* UserRequest::release_change_password() {
  // @@protoc_insertion_point(field_release:UserRequest.change_password)
  if (_internal_has_change_password()) {
    clear_has_MesssageContent();
      ::ChangePasswordRequest* temp = MesssageContent_.change_password_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.change_password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChangePasswordRequest& UserRequest::_internal_change_password() const {
  return _internal_has_change_password()
      ? *MesssageContent_.change_password_
      : *reinterpret_cast< ::ChangePasswordRequest*>(&::_ChangePasswordRequest_default_instance_);
}
inline const ::ChangePasswordRequest& UserRequest::change_password() const {
  // @@protoc_insertion_point(field_get:UserRequest.change_password)
  return _internal_change_password();
}
inline ::ChangePasswordRequest* UserRequest::unsafe_arena_release_change_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.change_password)
  if (_internal_has_change_password()) {
    clear_has_MesssageContent();
    ::ChangePasswordRequest* temp = MesssageContent_.change_password_;
    MesssageContent_.change_password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_change_password(::ChangePasswordRequest* change_password) {
  clear_MesssageContent();
  if (change_password) {
    set_has_change_password();
    MesssageContent_.change_password_ = change_password;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.change_password)
}
inline ::ChangePasswordRequest* UserRequest::_internal_mutable_change_password() {
  if (!_internal_has_change_password()) {
    clear_MesssageContent();
    set_has_change_password();
    MesssageContent_.change_password_ = CreateMaybeMessage< ::ChangePasswordRequest >(GetArena());
  }
  return MesssageContent_.change_password_;
}
inline ::ChangePasswordRequest* UserRequest::mutable_change_password() {
  // @@protoc_insertion_point(field_mutable:UserRequest.change_password)
  return _internal_mutable_change_password();
}

// .UpdateRequest Update = 10;
inline bool UserRequest::_internal_has_update() const {
  return MesssageContent_case() == kUpdate;
}
inline bool UserRequest::has_update() const {
  return _internal_has_update();
}
inline void UserRequest::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void UserRequest::clear_update() {
  if (_internal_has_update()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.update_;
    }
    clear_has_MesssageContent();
  }
}
inline ::UpdateRequest* UserRequest::release_update() {
  // @@protoc_insertion_point(field_release:UserRequest.Update)
  if (_internal_has_update()) {
    clear_has_MesssageContent();
      ::UpdateRequest* temp = MesssageContent_.update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateRequest& UserRequest::_internal_update() const {
  return _internal_has_update()
      ? *MesssageContent_.update_
      : *reinterpret_cast< ::UpdateRequest*>(&::_UpdateRequest_default_instance_);
}
inline const ::UpdateRequest& UserRequest::update() const {
  // @@protoc_insertion_point(field_get:UserRequest.Update)
  return _internal_update();
}
inline ::UpdateRequest* UserRequest::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.Update)
  if (_internal_has_update()) {
    clear_has_MesssageContent();
    ::UpdateRequest* temp = MesssageContent_.update_;
    MesssageContent_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_update(::UpdateRequest* update) {
  clear_MesssageContent();
  if (update) {
    set_has_update();
    MesssageContent_.update_ = update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.Update)
}
inline ::UpdateRequest* UserRequest::_internal_mutable_update() {
  if (!_internal_has_update()) {
    clear_MesssageContent();
    set_has_update();
    MesssageContent_.update_ = CreateMaybeMessage< ::UpdateRequest >(GetArena());
  }
  return MesssageContent_.update_;
}
inline ::UpdateRequest* UserRequest::mutable_update() {
  // @@protoc_insertion_point(field_mutable:UserRequest.Update)
  return _internal_mutable_update();
}

// .BlockRequest block = 11;
inline bool UserRequest::_internal_has_block() const {
  return MesssageContent_case() == kBlock;
}
inline bool UserRequest::has_block() const {
  return _internal_has_block();
}
inline void UserRequest::set_has_block() {
  _oneof_case_[0] = kBlock;
}
inline void UserRequest::clear_block() {
  if (_internal_has_block()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.block_;
    }
    clear_has_MesssageContent();
  }
}
inline ::BlockRequest* UserRequest::release_block() {
  // @@protoc_insertion_point(field_release:UserRequest.block)
  if (_internal_has_block()) {
    clear_has_MesssageContent();
      ::BlockRequest* temp = MesssageContent_.block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BlockRequest& UserRequest::_internal_block() const {
  return _internal_has_block()
      ? *MesssageContent_.block_
      : *reinterpret_cast< ::BlockRequest*>(&::_BlockRequest_default_instance_);
}
inline const ::BlockRequest& UserRequest::block() const {
  // @@protoc_insertion_point(field_get:UserRequest.block)
  return _internal_block();
}
inline ::BlockRequest* UserRequest::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.block)
  if (_internal_has_block()) {
    clear_has_MesssageContent();
    ::BlockRequest* temp = MesssageContent_.block_;
    MesssageContent_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_block(::BlockRequest* block) {
  clear_MesssageContent();
  if (block) {
    set_has_block();
    MesssageContent_.block_ = block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.block)
}
inline ::BlockRequest* UserRequest::_internal_mutable_block() {
  if (!_internal_has_block()) {
    clear_MesssageContent();
    set_has_block();
    MesssageContent_.block_ = CreateMaybeMessage< ::BlockRequest >(GetArena());
  }
  return MesssageContent_.block_;
}
inline ::BlockRequest* UserRequest::mutable_block() {
  // @@protoc_insertion_point(field_mutable:UserRequest.block)
  return _internal_mutable_block();
}

// .UnBlockRequest unblock = 12;
inline bool UserRequest::_internal_has_unblock() const {
  return MesssageContent_case() == kUnblock;
}
inline bool UserRequest::has_unblock() const {
  return _internal_has_unblock();
}
inline void UserRequest::set_has_unblock() {
  _oneof_case_[0] = kUnblock;
}
inline void UserRequest::clear_unblock() {
  if (_internal_has_unblock()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.unblock_;
    }
    clear_has_MesssageContent();
  }
}
inline ::UnBlockRequest* UserRequest::release_unblock() {
  // @@protoc_insertion_point(field_release:UserRequest.unblock)
  if (_internal_has_unblock()) {
    clear_has_MesssageContent();
      ::UnBlockRequest* temp = MesssageContent_.unblock_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.unblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UnBlockRequest& UserRequest::_internal_unblock() const {
  return _internal_has_unblock()
      ? *MesssageContent_.unblock_
      : *reinterpret_cast< ::UnBlockRequest*>(&::_UnBlockRequest_default_instance_);
}
inline const ::UnBlockRequest& UserRequest::unblock() const {
  // @@protoc_insertion_point(field_get:UserRequest.unblock)
  return _internal_unblock();
}
inline ::UnBlockRequest* UserRequest::unsafe_arena_release_unblock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.unblock)
  if (_internal_has_unblock()) {
    clear_has_MesssageContent();
    ::UnBlockRequest* temp = MesssageContent_.unblock_;
    MesssageContent_.unblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_unblock(::UnBlockRequest* unblock) {
  clear_MesssageContent();
  if (unblock) {
    set_has_unblock();
    MesssageContent_.unblock_ = unblock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.unblock)
}
inline ::UnBlockRequest* UserRequest::_internal_mutable_unblock() {
  if (!_internal_has_unblock()) {
    clear_MesssageContent();
    set_has_unblock();
    MesssageContent_.unblock_ = CreateMaybeMessage< ::UnBlockRequest >(GetArena());
  }
  return MesssageContent_.unblock_;
}
inline ::UnBlockRequest* UserRequest::mutable_unblock() {
  // @@protoc_insertion_point(field_mutable:UserRequest.unblock)
  return _internal_mutable_unblock();
}

// .BlockListRequest block_list = 13;
inline bool UserRequest::_internal_has_block_list() const {
  return MesssageContent_case() == kBlockList;
}
inline bool UserRequest::has_block_list() const {
  return _internal_has_block_list();
}
inline void UserRequest::set_has_block_list() {
  _oneof_case_[0] = kBlockList;
}
inline void UserRequest::clear_block_list() {
  if (_internal_has_block_list()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.block_list_;
    }
    clear_has_MesssageContent();
  }
}
inline ::BlockListRequest* UserRequest::release_block_list() {
  // @@protoc_insertion_point(field_release:UserRequest.block_list)
  if (_internal_has_block_list()) {
    clear_has_MesssageContent();
      ::BlockListRequest* temp = MesssageContent_.block_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.block_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BlockListRequest& UserRequest::_internal_block_list() const {
  return _internal_has_block_list()
      ? *MesssageContent_.block_list_
      : *reinterpret_cast< ::BlockListRequest*>(&::_BlockListRequest_default_instance_);
}
inline const ::BlockListRequest& UserRequest::block_list() const {
  // @@protoc_insertion_point(field_get:UserRequest.block_list)
  return _internal_block_list();
}
inline ::BlockListRequest* UserRequest::unsafe_arena_release_block_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserRequest.block_list)
  if (_internal_has_block_list()) {
    clear_has_MesssageContent();
    ::BlockListRequest* temp = MesssageContent_.block_list_;
    MesssageContent_.block_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserRequest::unsafe_arena_set_allocated_block_list(::BlockListRequest* block_list) {
  clear_MesssageContent();
  if (block_list) {
    set_has_block_list();
    MesssageContent_.block_list_ = block_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserRequest.block_list)
}
inline ::BlockListRequest* UserRequest::_internal_mutable_block_list() {
  if (!_internal_has_block_list()) {
    clear_MesssageContent();
    set_has_block_list();
    MesssageContent_.block_list_ = CreateMaybeMessage< ::BlockListRequest >(GetArena());
  }
  return MesssageContent_.block_list_;
}
inline ::BlockListRequest* UserRequest::mutable_block_list() {
  // @@protoc_insertion_point(field_mutable:UserRequest.block_list)
  return _internal_mutable_block_list();
}

inline bool UserRequest::has_MesssageContent() const {
  return MesssageContent_case() != MESSSAGECONTENT_NOT_SET;
}
inline void UserRequest::clear_has_MesssageContent() {
  _oneof_case_[0] = MESSSAGECONTENT_NOT_SET;
}
inline UserRequest::MesssageContentCase UserRequest::MesssageContent_case() const {
  return UserRequest::MesssageContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserResponse

// .RegisterResponse register = 1;
inline bool UserResponse::_internal_has_register_() const {
  return MesssageContent_case() == kRegister;
}
inline bool UserResponse::has_register_() const {
  return _internal_has_register_();
}
inline void UserResponse::set_has_register_() {
  _oneof_case_[0] = kRegister;
}
inline void UserResponse::clear_register_() {
  if (_internal_has_register_()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.register__;
    }
    clear_has_MesssageContent();
  }
}
inline ::RegisterResponse* UserResponse::release_register_() {
  // @@protoc_insertion_point(field_release:UserResponse.register)
  if (_internal_has_register_()) {
    clear_has_MesssageContent();
      ::RegisterResponse* temp = MesssageContent_.register__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.register__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RegisterResponse& UserResponse::_internal_register_() const {
  return _internal_has_register_()
      ? *MesssageContent_.register__
      : *reinterpret_cast< ::RegisterResponse*>(&::_RegisterResponse_default_instance_);
}
inline const ::RegisterResponse& UserResponse::register_() const {
  // @@protoc_insertion_point(field_get:UserResponse.register)
  return _internal_register_();
}
inline ::RegisterResponse* UserResponse::unsafe_arena_release_register_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.register)
  if (_internal_has_register_()) {
    clear_has_MesssageContent();
    ::RegisterResponse* temp = MesssageContent_.register__;
    MesssageContent_.register__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_register_(::RegisterResponse* register_) {
  clear_MesssageContent();
  if (register_) {
    set_has_register_();
    MesssageContent_.register__ = register_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.register)
}
inline ::RegisterResponse* UserResponse::_internal_mutable_register_() {
  if (!_internal_has_register_()) {
    clear_MesssageContent();
    set_has_register_();
    MesssageContent_.register__ = CreateMaybeMessage< ::RegisterResponse >(GetArena());
  }
  return MesssageContent_.register__;
}
inline ::RegisterResponse* UserResponse::mutable_register_() {
  // @@protoc_insertion_point(field_mutable:UserResponse.register)
  return _internal_mutable_register_();
}

// .LoginResponse login = 2;
inline bool UserResponse::_internal_has_login() const {
  return MesssageContent_case() == kLogin;
}
inline bool UserResponse::has_login() const {
  return _internal_has_login();
}
inline void UserResponse::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline void UserResponse::clear_login() {
  if (_internal_has_login()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.login_;
    }
    clear_has_MesssageContent();
  }
}
inline ::LoginResponse* UserResponse::release_login() {
  // @@protoc_insertion_point(field_release:UserResponse.login)
  if (_internal_has_login()) {
    clear_has_MesssageContent();
      ::LoginResponse* temp = MesssageContent_.login_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginResponse& UserResponse::_internal_login() const {
  return _internal_has_login()
      ? *MesssageContent_.login_
      : *reinterpret_cast< ::LoginResponse*>(&::_LoginResponse_default_instance_);
}
inline const ::LoginResponse& UserResponse::login() const {
  // @@protoc_insertion_point(field_get:UserResponse.login)
  return _internal_login();
}
inline ::LoginResponse* UserResponse::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.login)
  if (_internal_has_login()) {
    clear_has_MesssageContent();
    ::LoginResponse* temp = MesssageContent_.login_;
    MesssageContent_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_login(::LoginResponse* login) {
  clear_MesssageContent();
  if (login) {
    set_has_login();
    MesssageContent_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.login)
}
inline ::LoginResponse* UserResponse::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_MesssageContent();
    set_has_login();
    MesssageContent_.login_ = CreateMaybeMessage< ::LoginResponse >(GetArena());
  }
  return MesssageContent_.login_;
}
inline ::LoginResponse* UserResponse::mutable_login() {
  // @@protoc_insertion_point(field_mutable:UserResponse.login)
  return _internal_mutable_login();
}

// .ForgotAccountResponse forgot_account = 3;
inline bool UserResponse::_internal_has_forgot_account() const {
  return MesssageContent_case() == kForgotAccount;
}
inline bool UserResponse::has_forgot_account() const {
  return _internal_has_forgot_account();
}
inline void UserResponse::set_has_forgot_account() {
  _oneof_case_[0] = kForgotAccount;
}
inline void UserResponse::clear_forgot_account() {
  if (_internal_has_forgot_account()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.forgot_account_;
    }
    clear_has_MesssageContent();
  }
}
inline ::ForgotAccountResponse* UserResponse::release_forgot_account() {
  // @@protoc_insertion_point(field_release:UserResponse.forgot_account)
  if (_internal_has_forgot_account()) {
    clear_has_MesssageContent();
      ::ForgotAccountResponse* temp = MesssageContent_.forgot_account_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.forgot_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ForgotAccountResponse& UserResponse::_internal_forgot_account() const {
  return _internal_has_forgot_account()
      ? *MesssageContent_.forgot_account_
      : *reinterpret_cast< ::ForgotAccountResponse*>(&::_ForgotAccountResponse_default_instance_);
}
inline const ::ForgotAccountResponse& UserResponse::forgot_account() const {
  // @@protoc_insertion_point(field_get:UserResponse.forgot_account)
  return _internal_forgot_account();
}
inline ::ForgotAccountResponse* UserResponse::unsafe_arena_release_forgot_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.forgot_account)
  if (_internal_has_forgot_account()) {
    clear_has_MesssageContent();
    ::ForgotAccountResponse* temp = MesssageContent_.forgot_account_;
    MesssageContent_.forgot_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_forgot_account(::ForgotAccountResponse* forgot_account) {
  clear_MesssageContent();
  if (forgot_account) {
    set_has_forgot_account();
    MesssageContent_.forgot_account_ = forgot_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.forgot_account)
}
inline ::ForgotAccountResponse* UserResponse::_internal_mutable_forgot_account() {
  if (!_internal_has_forgot_account()) {
    clear_MesssageContent();
    set_has_forgot_account();
    MesssageContent_.forgot_account_ = CreateMaybeMessage< ::ForgotAccountResponse >(GetArena());
  }
  return MesssageContent_.forgot_account_;
}
inline ::ForgotAccountResponse* UserResponse::mutable_forgot_account() {
  // @@protoc_insertion_point(field_mutable:UserResponse.forgot_account)
  return _internal_mutable_forgot_account();
}

// .CheckUserStatusResponse check_status = 4;
inline bool UserResponse::_internal_has_check_status() const {
  return MesssageContent_case() == kCheckStatus;
}
inline bool UserResponse::has_check_status() const {
  return _internal_has_check_status();
}
inline void UserResponse::set_has_check_status() {
  _oneof_case_[0] = kCheckStatus;
}
inline void UserResponse::clear_check_status() {
  if (_internal_has_check_status()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.check_status_;
    }
    clear_has_MesssageContent();
  }
}
inline ::CheckUserStatusResponse* UserResponse::release_check_status() {
  // @@protoc_insertion_point(field_release:UserResponse.check_status)
  if (_internal_has_check_status()) {
    clear_has_MesssageContent();
      ::CheckUserStatusResponse* temp = MesssageContent_.check_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.check_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CheckUserStatusResponse& UserResponse::_internal_check_status() const {
  return _internal_has_check_status()
      ? *MesssageContent_.check_status_
      : *reinterpret_cast< ::CheckUserStatusResponse*>(&::_CheckUserStatusResponse_default_instance_);
}
inline const ::CheckUserStatusResponse& UserResponse::check_status() const {
  // @@protoc_insertion_point(field_get:UserResponse.check_status)
  return _internal_check_status();
}
inline ::CheckUserStatusResponse* UserResponse::unsafe_arena_release_check_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.check_status)
  if (_internal_has_check_status()) {
    clear_has_MesssageContent();
    ::CheckUserStatusResponse* temp = MesssageContent_.check_status_;
    MesssageContent_.check_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_check_status(::CheckUserStatusResponse* check_status) {
  clear_MesssageContent();
  if (check_status) {
    set_has_check_status();
    MesssageContent_.check_status_ = check_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.check_status)
}
inline ::CheckUserStatusResponse* UserResponse::_internal_mutable_check_status() {
  if (!_internal_has_check_status()) {
    clear_MesssageContent();
    set_has_check_status();
    MesssageContent_.check_status_ = CreateMaybeMessage< ::CheckUserStatusResponse >(GetArena());
  }
  return MesssageContent_.check_status_;
}
inline ::CheckUserStatusResponse* UserResponse::mutable_check_status() {
  // @@protoc_insertion_point(field_mutable:UserResponse.check_status)
  return _internal_mutable_check_status();
}

// .ConnectionResponse connect = 5;
inline bool UserResponse::_internal_has_connect() const {
  return MesssageContent_case() == kConnect;
}
inline bool UserResponse::has_connect() const {
  return _internal_has_connect();
}
inline void UserResponse::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void UserResponse::clear_connect() {
  if (_internal_has_connect()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.connect_;
    }
    clear_has_MesssageContent();
  }
}
inline ::ConnectionResponse* UserResponse::release_connect() {
  // @@protoc_insertion_point(field_release:UserResponse.connect)
  if (_internal_has_connect()) {
    clear_has_MesssageContent();
      ::ConnectionResponse* temp = MesssageContent_.connect_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ConnectionResponse& UserResponse::_internal_connect() const {
  return _internal_has_connect()
      ? *MesssageContent_.connect_
      : *reinterpret_cast< ::ConnectionResponse*>(&::_ConnectionResponse_default_instance_);
}
inline const ::ConnectionResponse& UserResponse::connect() const {
  // @@protoc_insertion_point(field_get:UserResponse.connect)
  return _internal_connect();
}
inline ::ConnectionResponse* UserResponse::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.connect)
  if (_internal_has_connect()) {
    clear_has_MesssageContent();
    ::ConnectionResponse* temp = MesssageContent_.connect_;
    MesssageContent_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_connect(::ConnectionResponse* connect) {
  clear_MesssageContent();
  if (connect) {
    set_has_connect();
    MesssageContent_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.connect)
}
inline ::ConnectionResponse* UserResponse::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_MesssageContent();
    set_has_connect();
    MesssageContent_.connect_ = CreateMaybeMessage< ::ConnectionResponse >(GetArena());
  }
  return MesssageContent_.connect_;
}
inline ::ConnectionResponse* UserResponse::mutable_connect() {
  // @@protoc_insertion_point(field_mutable:UserResponse.connect)
  return _internal_mutable_connect();
}

// .ChangePasswordResponse change_password = 6;
inline bool UserResponse::_internal_has_change_password() const {
  return MesssageContent_case() == kChangePassword;
}
inline bool UserResponse::has_change_password() const {
  return _internal_has_change_password();
}
inline void UserResponse::set_has_change_password() {
  _oneof_case_[0] = kChangePassword;
}
inline void UserResponse::clear_change_password() {
  if (_internal_has_change_password()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.change_password_;
    }
    clear_has_MesssageContent();
  }
}
inline ::ChangePasswordResponse* UserResponse::release_change_password() {
  // @@protoc_insertion_point(field_release:UserResponse.change_password)
  if (_internal_has_change_password()) {
    clear_has_MesssageContent();
      ::ChangePasswordResponse* temp = MesssageContent_.change_password_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.change_password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChangePasswordResponse& UserResponse::_internal_change_password() const {
  return _internal_has_change_password()
      ? *MesssageContent_.change_password_
      : *reinterpret_cast< ::ChangePasswordResponse*>(&::_ChangePasswordResponse_default_instance_);
}
inline const ::ChangePasswordResponse& UserResponse::change_password() const {
  // @@protoc_insertion_point(field_get:UserResponse.change_password)
  return _internal_change_password();
}
inline ::ChangePasswordResponse* UserResponse::unsafe_arena_release_change_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.change_password)
  if (_internal_has_change_password()) {
    clear_has_MesssageContent();
    ::ChangePasswordResponse* temp = MesssageContent_.change_password_;
    MesssageContent_.change_password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_change_password(::ChangePasswordResponse* change_password) {
  clear_MesssageContent();
  if (change_password) {
    set_has_change_password();
    MesssageContent_.change_password_ = change_password;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.change_password)
}
inline ::ChangePasswordResponse* UserResponse::_internal_mutable_change_password() {
  if (!_internal_has_change_password()) {
    clear_MesssageContent();
    set_has_change_password();
    MesssageContent_.change_password_ = CreateMaybeMessage< ::ChangePasswordResponse >(GetArena());
  }
  return MesssageContent_.change_password_;
}
inline ::ChangePasswordResponse* UserResponse::mutable_change_password() {
  // @@protoc_insertion_point(field_mutable:UserResponse.change_password)
  return _internal_mutable_change_password();
}

// .UpdateResponse Update = 7;
inline bool UserResponse::_internal_has_update() const {
  return MesssageContent_case() == kUpdate;
}
inline bool UserResponse::has_update() const {
  return _internal_has_update();
}
inline void UserResponse::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void UserResponse::clear_update() {
  if (_internal_has_update()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.update_;
    }
    clear_has_MesssageContent();
  }
}
inline ::UpdateResponse* UserResponse::release_update() {
  // @@protoc_insertion_point(field_release:UserResponse.Update)
  if (_internal_has_update()) {
    clear_has_MesssageContent();
      ::UpdateResponse* temp = MesssageContent_.update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateResponse& UserResponse::_internal_update() const {
  return _internal_has_update()
      ? *MesssageContent_.update_
      : *reinterpret_cast< ::UpdateResponse*>(&::_UpdateResponse_default_instance_);
}
inline const ::UpdateResponse& UserResponse::update() const {
  // @@protoc_insertion_point(field_get:UserResponse.Update)
  return _internal_update();
}
inline ::UpdateResponse* UserResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.Update)
  if (_internal_has_update()) {
    clear_has_MesssageContent();
    ::UpdateResponse* temp = MesssageContent_.update_;
    MesssageContent_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_update(::UpdateResponse* update) {
  clear_MesssageContent();
  if (update) {
    set_has_update();
    MesssageContent_.update_ = update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.Update)
}
inline ::UpdateResponse* UserResponse::_internal_mutable_update() {
  if (!_internal_has_update()) {
    clear_MesssageContent();
    set_has_update();
    MesssageContent_.update_ = CreateMaybeMessage< ::UpdateResponse >(GetArena());
  }
  return MesssageContent_.update_;
}
inline ::UpdateResponse* UserResponse::mutable_update() {
  // @@protoc_insertion_point(field_mutable:UserResponse.Update)
  return _internal_mutable_update();
}

// .BlockResponse block = 8;
inline bool UserResponse::_internal_has_block() const {
  return MesssageContent_case() == kBlock;
}
inline bool UserResponse::has_block() const {
  return _internal_has_block();
}
inline void UserResponse::set_has_block() {
  _oneof_case_[0] = kBlock;
}
inline void UserResponse::clear_block() {
  if (_internal_has_block()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.block_;
    }
    clear_has_MesssageContent();
  }
}
inline ::BlockResponse* UserResponse::release_block() {
  // @@protoc_insertion_point(field_release:UserResponse.block)
  if (_internal_has_block()) {
    clear_has_MesssageContent();
      ::BlockResponse* temp = MesssageContent_.block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BlockResponse& UserResponse::_internal_block() const {
  return _internal_has_block()
      ? *MesssageContent_.block_
      : *reinterpret_cast< ::BlockResponse*>(&::_BlockResponse_default_instance_);
}
inline const ::BlockResponse& UserResponse::block() const {
  // @@protoc_insertion_point(field_get:UserResponse.block)
  return _internal_block();
}
inline ::BlockResponse* UserResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.block)
  if (_internal_has_block()) {
    clear_has_MesssageContent();
    ::BlockResponse* temp = MesssageContent_.block_;
    MesssageContent_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_block(::BlockResponse* block) {
  clear_MesssageContent();
  if (block) {
    set_has_block();
    MesssageContent_.block_ = block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.block)
}
inline ::BlockResponse* UserResponse::_internal_mutable_block() {
  if (!_internal_has_block()) {
    clear_MesssageContent();
    set_has_block();
    MesssageContent_.block_ = CreateMaybeMessage< ::BlockResponse >(GetArena());
  }
  return MesssageContent_.block_;
}
inline ::BlockResponse* UserResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:UserResponse.block)
  return _internal_mutable_block();
}

// .UnBlockResponse unblock = 9;
inline bool UserResponse::_internal_has_unblock() const {
  return MesssageContent_case() == kUnblock;
}
inline bool UserResponse::has_unblock() const {
  return _internal_has_unblock();
}
inline void UserResponse::set_has_unblock() {
  _oneof_case_[0] = kUnblock;
}
inline void UserResponse::clear_unblock() {
  if (_internal_has_unblock()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.unblock_;
    }
    clear_has_MesssageContent();
  }
}
inline ::UnBlockResponse* UserResponse::release_unblock() {
  // @@protoc_insertion_point(field_release:UserResponse.unblock)
  if (_internal_has_unblock()) {
    clear_has_MesssageContent();
      ::UnBlockResponse* temp = MesssageContent_.unblock_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.unblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UnBlockResponse& UserResponse::_internal_unblock() const {
  return _internal_has_unblock()
      ? *MesssageContent_.unblock_
      : *reinterpret_cast< ::UnBlockResponse*>(&::_UnBlockResponse_default_instance_);
}
inline const ::UnBlockResponse& UserResponse::unblock() const {
  // @@protoc_insertion_point(field_get:UserResponse.unblock)
  return _internal_unblock();
}
inline ::UnBlockResponse* UserResponse::unsafe_arena_release_unblock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.unblock)
  if (_internal_has_unblock()) {
    clear_has_MesssageContent();
    ::UnBlockResponse* temp = MesssageContent_.unblock_;
    MesssageContent_.unblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_unblock(::UnBlockResponse* unblock) {
  clear_MesssageContent();
  if (unblock) {
    set_has_unblock();
    MesssageContent_.unblock_ = unblock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.unblock)
}
inline ::UnBlockResponse* UserResponse::_internal_mutable_unblock() {
  if (!_internal_has_unblock()) {
    clear_MesssageContent();
    set_has_unblock();
    MesssageContent_.unblock_ = CreateMaybeMessage< ::UnBlockResponse >(GetArena());
  }
  return MesssageContent_.unblock_;
}
inline ::UnBlockResponse* UserResponse::mutable_unblock() {
  // @@protoc_insertion_point(field_mutable:UserResponse.unblock)
  return _internal_mutable_unblock();
}

// .BlockListResponse block_list = 10;
inline bool UserResponse::_internal_has_block_list() const {
  return MesssageContent_case() == kBlockList;
}
inline bool UserResponse::has_block_list() const {
  return _internal_has_block_list();
}
inline void UserResponse::set_has_block_list() {
  _oneof_case_[0] = kBlockList;
}
inline void UserResponse::clear_block_list() {
  if (_internal_has_block_list()) {
    if (GetArena() == nullptr) {
      delete MesssageContent_.block_list_;
    }
    clear_has_MesssageContent();
  }
}
inline ::BlockListResponse* UserResponse::release_block_list() {
  // @@protoc_insertion_point(field_release:UserResponse.block_list)
  if (_internal_has_block_list()) {
    clear_has_MesssageContent();
      ::BlockListResponse* temp = MesssageContent_.block_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MesssageContent_.block_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BlockListResponse& UserResponse::_internal_block_list() const {
  return _internal_has_block_list()
      ? *MesssageContent_.block_list_
      : *reinterpret_cast< ::BlockListResponse*>(&::_BlockListResponse_default_instance_);
}
inline const ::BlockListResponse& UserResponse::block_list() const {
  // @@protoc_insertion_point(field_get:UserResponse.block_list)
  return _internal_block_list();
}
inline ::BlockListResponse* UserResponse::unsafe_arena_release_block_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserResponse.block_list)
  if (_internal_has_block_list()) {
    clear_has_MesssageContent();
    ::BlockListResponse* temp = MesssageContent_.block_list_;
    MesssageContent_.block_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserResponse::unsafe_arena_set_allocated_block_list(::BlockListResponse* block_list) {
  clear_MesssageContent();
  if (block_list) {
    set_has_block_list();
    MesssageContent_.block_list_ = block_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserResponse.block_list)
}
inline ::BlockListResponse* UserResponse::_internal_mutable_block_list() {
  if (!_internal_has_block_list()) {
    clear_MesssageContent();
    set_has_block_list();
    MesssageContent_.block_list_ = CreateMaybeMessage< ::BlockListResponse >(GetArena());
  }
  return MesssageContent_.block_list_;
}
inline ::BlockListResponse* UserResponse::mutable_block_list() {
  // @@protoc_insertion_point(field_mutable:UserResponse.block_list)
  return _internal_mutable_block_list();
}

inline bool UserResponse::has_MesssageContent() const {
  return MesssageContent_case() != MESSSAGECONTENT_NOT_SET;
}
inline void UserResponse::clear_has_MesssageContent() {
  _oneof_case_[0] = MESSSAGECONTENT_NOT_SET;
}
inline UserResponse::MesssageContentCase UserResponse::MesssageContent_case() const {
  return UserResponse::MesssageContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequestMessage

// .MessageType type = 1;
inline void RequestMessage::clear_type() {
  type_ = 0;
}
inline ::MessageType RequestMessage::_internal_type() const {
  return static_cast< ::MessageType >(type_);
}
inline ::MessageType RequestMessage::type() const {
  // @@protoc_insertion_point(field_get:RequestMessage.type)
  return _internal_type();
}
inline void RequestMessage::_internal_set_type(::MessageType value) {
  
  type_ = value;
}
inline void RequestMessage::set_type(::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RequestMessage.type)
}

// .NewHostmachineRequest NewHostmachine = 2;
inline bool RequestMessage::_internal_has_newhostmachine() const {
  return Message_case() == kNewHostmachine;
}
inline bool RequestMessage::has_newhostmachine() const {
  return _internal_has_newhostmachine();
}
inline void RequestMessage::set_has_newhostmachine() {
  _oneof_case_[0] = kNewHostmachine;
}
inline void RequestMessage::clear_newhostmachine() {
  if (_internal_has_newhostmachine()) {
    if (GetArena() == nullptr) {
      delete Message_.newhostmachine_;
    }
    clear_has_Message();
  }
}
inline ::NewHostmachineRequest* RequestMessage::release_newhostmachine() {
  // @@protoc_insertion_point(field_release:RequestMessage.NewHostmachine)
  if (_internal_has_newhostmachine()) {
    clear_has_Message();
      ::NewHostmachineRequest* temp = Message_.newhostmachine_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.newhostmachine_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NewHostmachineRequest& RequestMessage::_internal_newhostmachine() const {
  return _internal_has_newhostmachine()
      ? *Message_.newhostmachine_
      : *reinterpret_cast< ::NewHostmachineRequest*>(&::_NewHostmachineRequest_default_instance_);
}
inline const ::NewHostmachineRequest& RequestMessage::newhostmachine() const {
  // @@protoc_insertion_point(field_get:RequestMessage.NewHostmachine)
  return _internal_newhostmachine();
}
inline ::NewHostmachineRequest* RequestMessage::unsafe_arena_release_newhostmachine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RequestMessage.NewHostmachine)
  if (_internal_has_newhostmachine()) {
    clear_has_Message();
    ::NewHostmachineRequest* temp = Message_.newhostmachine_;
    Message_.newhostmachine_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestMessage::unsafe_arena_set_allocated_newhostmachine(::NewHostmachineRequest* newhostmachine) {
  clear_Message();
  if (newhostmachine) {
    set_has_newhostmachine();
    Message_.newhostmachine_ = newhostmachine;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RequestMessage.NewHostmachine)
}
inline ::NewHostmachineRequest* RequestMessage::_internal_mutable_newhostmachine() {
  if (!_internal_has_newhostmachine()) {
    clear_Message();
    set_has_newhostmachine();
    Message_.newhostmachine_ = CreateMaybeMessage< ::NewHostmachineRequest >(GetArena());
  }
  return Message_.newhostmachine_;
}
inline ::NewHostmachineRequest* RequestMessage::mutable_newhostmachine() {
  // @@protoc_insertion_point(field_mutable:RequestMessage.NewHostmachine)
  return _internal_mutable_newhostmachine();
}

// .UserRequest User = 3;
inline bool RequestMessage::_internal_has_user() const {
  return Message_case() == kUser;
}
inline bool RequestMessage::has_user() const {
  return _internal_has_user();
}
inline void RequestMessage::set_has_user() {
  _oneof_case_[0] = kUser;
}
inline void RequestMessage::clear_user() {
  if (_internal_has_user()) {
    if (GetArena() == nullptr) {
      delete Message_.user_;
    }
    clear_has_Message();
  }
}
inline ::UserRequest* RequestMessage::release_user() {
  // @@protoc_insertion_point(field_release:RequestMessage.User)
  if (_internal_has_user()) {
    clear_has_Message();
      ::UserRequest* temp = Message_.user_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UserRequest& RequestMessage::_internal_user() const {
  return _internal_has_user()
      ? *Message_.user_
      : *reinterpret_cast< ::UserRequest*>(&::_UserRequest_default_instance_);
}
inline const ::UserRequest& RequestMessage::user() const {
  // @@protoc_insertion_point(field_get:RequestMessage.User)
  return _internal_user();
}
inline ::UserRequest* RequestMessage::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RequestMessage.User)
  if (_internal_has_user()) {
    clear_has_Message();
    ::UserRequest* temp = Message_.user_;
    Message_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestMessage::unsafe_arena_set_allocated_user(::UserRequest* user) {
  clear_Message();
  if (user) {
    set_has_user();
    Message_.user_ = user;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RequestMessage.User)
}
inline ::UserRequest* RequestMessage::_internal_mutable_user() {
  if (!_internal_has_user()) {
    clear_Message();
    set_has_user();
    Message_.user_ = CreateMaybeMessage< ::UserRequest >(GetArena());
  }
  return Message_.user_;
}
inline ::UserRequest* RequestMessage::mutable_user() {
  // @@protoc_insertion_point(field_mutable:RequestMessage.User)
  return _internal_mutable_user();
}

inline bool RequestMessage::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void RequestMessage::clear_has_Message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline RequestMessage::MessageCase RequestMessage::Message_case() const {
  return RequestMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseMessage

// .MessageType type = 1;
inline void ResponseMessage::clear_type() {
  type_ = 0;
}
inline ::MessageType ResponseMessage::_internal_type() const {
  return static_cast< ::MessageType >(type_);
}
inline ::MessageType ResponseMessage::type() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.type)
  return _internal_type();
}
inline void ResponseMessage::_internal_set_type(::MessageType value) {
  
  type_ = value;
}
inline void ResponseMessage::set_type(::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ResponseMessage.type)
}

// .NewHostmachineResponse NewHostmachine = 2;
inline bool ResponseMessage::_internal_has_newhostmachine() const {
  return Message_case() == kNewHostmachine;
}
inline bool ResponseMessage::has_newhostmachine() const {
  return _internal_has_newhostmachine();
}
inline void ResponseMessage::set_has_newhostmachine() {
  _oneof_case_[0] = kNewHostmachine;
}
inline void ResponseMessage::clear_newhostmachine() {
  if (_internal_has_newhostmachine()) {
    if (GetArena() == nullptr) {
      delete Message_.newhostmachine_;
    }
    clear_has_Message();
  }
}
inline ::NewHostmachineResponse* ResponseMessage::release_newhostmachine() {
  // @@protoc_insertion_point(field_release:ResponseMessage.NewHostmachine)
  if (_internal_has_newhostmachine()) {
    clear_has_Message();
      ::NewHostmachineResponse* temp = Message_.newhostmachine_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.newhostmachine_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NewHostmachineResponse& ResponseMessage::_internal_newhostmachine() const {
  return _internal_has_newhostmachine()
      ? *Message_.newhostmachine_
      : *reinterpret_cast< ::NewHostmachineResponse*>(&::_NewHostmachineResponse_default_instance_);
}
inline const ::NewHostmachineResponse& ResponseMessage::newhostmachine() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.NewHostmachine)
  return _internal_newhostmachine();
}
inline ::NewHostmachineResponse* ResponseMessage::unsafe_arena_release_newhostmachine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ResponseMessage.NewHostmachine)
  if (_internal_has_newhostmachine()) {
    clear_has_Message();
    ::NewHostmachineResponse* temp = Message_.newhostmachine_;
    Message_.newhostmachine_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseMessage::unsafe_arena_set_allocated_newhostmachine(::NewHostmachineResponse* newhostmachine) {
  clear_Message();
  if (newhostmachine) {
    set_has_newhostmachine();
    Message_.newhostmachine_ = newhostmachine;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResponseMessage.NewHostmachine)
}
inline ::NewHostmachineResponse* ResponseMessage::_internal_mutable_newhostmachine() {
  if (!_internal_has_newhostmachine()) {
    clear_Message();
    set_has_newhostmachine();
    Message_.newhostmachine_ = CreateMaybeMessage< ::NewHostmachineResponse >(GetArena());
  }
  return Message_.newhostmachine_;
}
inline ::NewHostmachineResponse* ResponseMessage::mutable_newhostmachine() {
  // @@protoc_insertion_point(field_mutable:ResponseMessage.NewHostmachine)
  return _internal_mutable_newhostmachine();
}

// .UserResponse User = 3;
inline bool ResponseMessage::_internal_has_user() const {
  return Message_case() == kUser;
}
inline bool ResponseMessage::has_user() const {
  return _internal_has_user();
}
inline void ResponseMessage::set_has_user() {
  _oneof_case_[0] = kUser;
}
inline void ResponseMessage::clear_user() {
  if (_internal_has_user()) {
    if (GetArena() == nullptr) {
      delete Message_.user_;
    }
    clear_has_Message();
  }
}
inline ::UserResponse* ResponseMessage::release_user() {
  // @@protoc_insertion_point(field_release:ResponseMessage.User)
  if (_internal_has_user()) {
    clear_has_Message();
      ::UserResponse* temp = Message_.user_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UserResponse& ResponseMessage::_internal_user() const {
  return _internal_has_user()
      ? *Message_.user_
      : *reinterpret_cast< ::UserResponse*>(&::_UserResponse_default_instance_);
}
inline const ::UserResponse& ResponseMessage::user() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.User)
  return _internal_user();
}
inline ::UserResponse* ResponseMessage::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ResponseMessage.User)
  if (_internal_has_user()) {
    clear_has_Message();
    ::UserResponse* temp = Message_.user_;
    Message_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseMessage::unsafe_arena_set_allocated_user(::UserResponse* user) {
  clear_Message();
  if (user) {
    set_has_user();
    Message_.user_ = user;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResponseMessage.User)
}
inline ::UserResponse* ResponseMessage::_internal_mutable_user() {
  if (!_internal_has_user()) {
    clear_Message();
    set_has_user();
    Message_.user_ = CreateMaybeMessage< ::UserResponse >(GetArena());
  }
  return Message_.user_;
}
inline ::UserResponse* ResponseMessage::mutable_user() {
  // @@protoc_insertion_point(field_mutable:ResponseMessage.User)
  return _internal_mutable_user();
}

inline bool ResponseMessage::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void ResponseMessage::clear_has_Message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ResponseMessage::MessageCase ResponseMessage::Message_case() const {
  return ResponseMessage::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fmessages_2eproto
