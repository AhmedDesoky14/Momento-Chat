// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_messages.proto

#include "server_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockListRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockListResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangePasswordRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangePasswordResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckUserStatusRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckUserStatusResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForgotAccountRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForgotAccountResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewHostmachineRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewHostmachineResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateResponse_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_UserRequest_server_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_UserResponse_server_5fmessages_2eproto;
class NewHostmachineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewHostmachineRequest> _instance;
} _NewHostmachineRequest_default_instance_;
class NewHostmachineResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewHostmachineResponse> _instance;
} _NewHostmachineResponse_default_instance_;
class RegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterRequest> _instance;
} _RegisterRequest_default_instance_;
class RegisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterResponse> _instance;
} _RegisterResponse_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
class ForgotAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForgotAccountRequest> _instance;
} _ForgotAccountRequest_default_instance_;
class ForgotAccountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForgotAccountResponse> _instance;
} _ForgotAccountResponse_default_instance_;
class CheckUserStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckUserStatusRequest> _instance;
} _CheckUserStatusRequest_default_instance_;
class CheckUserStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckUserStatusResponse> _instance;
} _CheckUserStatusResponse_default_instance_;
class ConnectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionRequest> _instance;
} _ConnectionRequest_default_instance_;
class ConnectionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionResponse> _instance;
} _ConnectionResponse_default_instance_;
class ChangePasswordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePasswordRequest> _instance;
} _ChangePasswordRequest_default_instance_;
class ChangePasswordResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePasswordResponse> _instance;
} _ChangePasswordResponse_default_instance_;
class UpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRequest> _instance;
} _UpdateRequest_default_instance_;
class UpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateResponse> _instance;
} _UpdateResponse_default_instance_;
class BlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockRequest> _instance;
} _BlockRequest_default_instance_;
class BlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockResponse> _instance;
} _BlockResponse_default_instance_;
class UnBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBlockRequest> _instance;
} _UnBlockRequest_default_instance_;
class UnBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnBlockResponse> _instance;
} _UnBlockResponse_default_instance_;
class BlockListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockListRequest> _instance;
} _BlockListRequest_default_instance_;
class BlockListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockListResponse> _instance;
} _BlockListResponse_default_instance_;
class UserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserRequest> _instance;
  const ::RegisterRequest* register__;
  const ::LoginRequest* login_;
  const ::ForgotAccountRequest* forgot_account_;
  const ::CheckUserStatusRequest* check_status_;
  const ::ConnectionRequest* connect_;
  const ::ChangePasswordRequest* change_password_;
  const ::UpdateRequest* update_;
  const ::BlockRequest* block_;
  const ::UnBlockRequest* unblock_;
  const ::BlockListRequest* block_list_;
} _UserRequest_default_instance_;
class UserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserResponse> _instance;
  const ::RegisterResponse* register__;
  const ::LoginResponse* login_;
  const ::ForgotAccountResponse* forgot_account_;
  const ::CheckUserStatusResponse* check_status_;
  const ::ConnectionResponse* connect_;
  const ::ChangePasswordResponse* change_password_;
  const ::UpdateResponse* update_;
  const ::BlockResponse* block_;
  const ::UnBlockResponse* unblock_;
  const ::BlockListResponse* block_list_;
} _UserResponse_default_instance_;
class RequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestMessage> _instance;
  const ::NewHostmachineRequest* newhostmachine_;
  const ::UserRequest* user_;
} _RequestMessage_default_instance_;
class ResponseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseMessage> _instance;
  const ::NewHostmachineResponse* newhostmachine_;
  const ::UserResponse* user_;
} _ResponseMessage_default_instance_;
static void InitDefaultsscc_info_BlockListRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BlockListRequest_default_instance_;
    new (ptr) ::BlockListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BlockListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockListRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockListRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_BlockListResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BlockListResponse_default_instance_;
    new (ptr) ::BlockListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BlockListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockListResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockListResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_BlockRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BlockRequest_default_instance_;
    new (ptr) ::BlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_BlockResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BlockResponse_default_instance_;
    new (ptr) ::BlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_ChangePasswordRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChangePasswordRequest_default_instance_;
    new (ptr) ::ChangePasswordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChangePasswordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangePasswordRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangePasswordRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_ChangePasswordResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChangePasswordResponse_default_instance_;
    new (ptr) ::ChangePasswordResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChangePasswordResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangePasswordResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangePasswordResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CheckUserStatusRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CheckUserStatusRequest_default_instance_;
    new (ptr) ::CheckUserStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CheckUserStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckUserStatusRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckUserStatusRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CheckUserStatusResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CheckUserStatusResponse_default_instance_;
    new (ptr) ::CheckUserStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CheckUserStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckUserStatusResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckUserStatusResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_ConnectionRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectionRequest_default_instance_;
    new (ptr) ::ConnectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConnectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectionRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_ConnectionResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectionResponse_default_instance_;
    new (ptr) ::ConnectionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConnectionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectionResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_ForgotAccountRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ForgotAccountRequest_default_instance_;
    new (ptr) ::ForgotAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ForgotAccountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForgotAccountRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForgotAccountRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_ForgotAccountResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ForgotAccountResponse_default_instance_;
    new (ptr) ::ForgotAccountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ForgotAccountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForgotAccountResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForgotAccountResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_LoginRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginRequest_default_instance_;
    new (ptr) ::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_LoginResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginResponse_default_instance_;
    new (ptr) ::LoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_NewHostmachineRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NewHostmachineRequest_default_instance_;
    new (ptr) ::NewHostmachineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NewHostmachineRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewHostmachineRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewHostmachineRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_NewHostmachineResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NewHostmachineResponse_default_instance_;
    new (ptr) ::NewHostmachineResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NewHostmachineResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewHostmachineResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewHostmachineResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_RegisterRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterRequest_default_instance_;
    new (ptr) ::RegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_RegisterResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterResponse_default_instance_;
    new (ptr) ::RegisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_RequestMessage_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestMessage_default_instance_;
    new (ptr) ::RequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestMessage_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RequestMessage_server_5fmessages_2eproto}, {
      &scc_info_NewHostmachineRequest_server_5fmessages_2eproto.base,
      &scc_info_UserRequest_server_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_ResponseMessage_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResponseMessage_default_instance_;
    new (ptr) ::ResponseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResponseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResponseMessage_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResponseMessage_server_5fmessages_2eproto}, {
      &scc_info_NewHostmachineResponse_server_5fmessages_2eproto.base,
      &scc_info_UserResponse_server_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_UnBlockRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnBlockRequest_default_instance_;
    new (ptr) ::UnBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBlockRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_UnBlockResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnBlockResponse_default_instance_;
    new (ptr) ::UnBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnBlockResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnBlockResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_UpdateRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateRequest_default_instance_;
    new (ptr) ::UpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateRequest_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_UpdateResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateResponse_default_instance_;
    new (ptr) ::UpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateResponse_server_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_UserRequest_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserRequest_default_instance_;
    new (ptr) ::UserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_UserRequest_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_UserRequest_server_5fmessages_2eproto}, {
      &scc_info_RegisterRequest_server_5fmessages_2eproto.base,
      &scc_info_LoginRequest_server_5fmessages_2eproto.base,
      &scc_info_ForgotAccountRequest_server_5fmessages_2eproto.base,
      &scc_info_CheckUserStatusRequest_server_5fmessages_2eproto.base,
      &scc_info_ConnectionRequest_server_5fmessages_2eproto.base,
      &scc_info_ChangePasswordRequest_server_5fmessages_2eproto.base,
      &scc_info_UpdateRequest_server_5fmessages_2eproto.base,
      &scc_info_BlockRequest_server_5fmessages_2eproto.base,
      &scc_info_UnBlockRequest_server_5fmessages_2eproto.base,
      &scc_info_BlockListRequest_server_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_UserResponse_server_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserResponse_default_instance_;
    new (ptr) ::UserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_UserResponse_server_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_UserResponse_server_5fmessages_2eproto}, {
      &scc_info_RegisterResponse_server_5fmessages_2eproto.base,
      &scc_info_LoginResponse_server_5fmessages_2eproto.base,
      &scc_info_ForgotAccountResponse_server_5fmessages_2eproto.base,
      &scc_info_CheckUserStatusResponse_server_5fmessages_2eproto.base,
      &scc_info_ConnectionResponse_server_5fmessages_2eproto.base,
      &scc_info_ChangePasswordResponse_server_5fmessages_2eproto.base,
      &scc_info_UpdateResponse_server_5fmessages_2eproto.base,
      &scc_info_BlockResponse_server_5fmessages_2eproto.base,
      &scc_info_UnBlockResponse_server_5fmessages_2eproto.base,
      &scc_info_BlockListResponse_server_5fmessages_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fmessages_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_5fmessages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewHostmachineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NewHostmachineRequest, ip_address_),
  PROTOBUF_FIELD_OFFSET(::NewHostmachineRequest, certificate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewHostmachineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NewHostmachineResponse, hostmachine_id_),
  PROTOBUF_FIELD_OFFSET(::NewHostmachineResponse, signed_certificate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, username_),
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, password_hash_),
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, name_),
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, email_),
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, gender_),
  PROTOBUF_FIELD_OFFSET(::RegisterRequest, birth_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginRequest, username_),
  PROTOBUF_FIELD_OFFSET(::LoginRequest, password_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginResponse, name_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, status_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, visualization_mode_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, ephemeral_chat_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, messages_timeout_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, sent_messages_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, received_messages_),
  PROTOBUF_FIELD_OFFSET(::LoginResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ForgotAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ForgotAccountRequest, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ForgotAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ForgotAccountResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CheckUserStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CheckUserStatusRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CheckUserStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CheckUserStatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConnectionRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConnectionResponse, contact_ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChangePasswordRequest, username_),
  PROTOBUF_FIELD_OFFSET(::ChangePasswordRequest, old_password_hash_),
  PROTOBUF_FIELD_OFFSET(::ChangePasswordRequest, new_password_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChangePasswordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChangePasswordResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, username_),
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, status_),
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, visualization_mode_),
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, ephemeral_chat_),
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, messages_timeout_),
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, sent_messages_),
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, received_messages_),
  PROTOBUF_FIELD_OFFSET(::UpdateRequest, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BlockRequest, username_),
  PROTOBUF_FIELD_OFFSET(::BlockRequest, contact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BlockResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnBlockRequest, username_),
  PROTOBUF_FIELD_OFFSET(::UnBlockRequest, contact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnBlockResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BlockListRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BlockListResponse, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::UserRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserRequest, ip_address_),
  PROTOBUF_FIELD_OFFSET(::UserRequest, os_),
  PROTOBUF_FIELD_OFFSET(::UserRequest, machine_id_),
  offsetof(::UserRequestDefaultTypeInternal, register__),
  offsetof(::UserRequestDefaultTypeInternal, login_),
  offsetof(::UserRequestDefaultTypeInternal, forgot_account_),
  offsetof(::UserRequestDefaultTypeInternal, check_status_),
  offsetof(::UserRequestDefaultTypeInternal, connect_),
  offsetof(::UserRequestDefaultTypeInternal, change_password_),
  offsetof(::UserRequestDefaultTypeInternal, update_),
  offsetof(::UserRequestDefaultTypeInternal, block_),
  offsetof(::UserRequestDefaultTypeInternal, unblock_),
  offsetof(::UserRequestDefaultTypeInternal, block_list_),
  PROTOBUF_FIELD_OFFSET(::UserRequest, MesssageContent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::UserResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::UserResponseDefaultTypeInternal, register__),
  offsetof(::UserResponseDefaultTypeInternal, login_),
  offsetof(::UserResponseDefaultTypeInternal, forgot_account_),
  offsetof(::UserResponseDefaultTypeInternal, check_status_),
  offsetof(::UserResponseDefaultTypeInternal, connect_),
  offsetof(::UserResponseDefaultTypeInternal, change_password_),
  offsetof(::UserResponseDefaultTypeInternal, update_),
  offsetof(::UserResponseDefaultTypeInternal, block_),
  offsetof(::UserResponseDefaultTypeInternal, unblock_),
  offsetof(::UserResponseDefaultTypeInternal, block_list_),
  PROTOBUF_FIELD_OFFSET(::UserResponse, MesssageContent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::RequestMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestMessage, type_),
  offsetof(::RequestMessageDefaultTypeInternal, newhostmachine_),
  offsetof(::RequestMessageDefaultTypeInternal, user_),
  PROTOBUF_FIELD_OFFSET(::RequestMessage, Message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ResponseMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ResponseMessage, type_),
  offsetof(::ResponseMessageDefaultTypeInternal, newhostmachine_),
  offsetof(::ResponseMessageDefaultTypeInternal, user_),
  PROTOBUF_FIELD_OFFSET(::ResponseMessage, Message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NewHostmachineRequest)},
  { 7, -1, sizeof(::NewHostmachineResponse)},
  { 14, -1, sizeof(::RegisterRequest)},
  { 25, -1, sizeof(::RegisterResponse)},
  { 31, -1, sizeof(::LoginRequest)},
  { 38, -1, sizeof(::LoginResponse)},
  { 51, -1, sizeof(::ForgotAccountRequest)},
  { 57, -1, sizeof(::ForgotAccountResponse)},
  { 63, -1, sizeof(::CheckUserStatusRequest)},
  { 69, -1, sizeof(::CheckUserStatusResponse)},
  { 75, -1, sizeof(::ConnectionRequest)},
  { 81, -1, sizeof(::ConnectionResponse)},
  { 87, -1, sizeof(::ChangePasswordRequest)},
  { 95, -1, sizeof(::ChangePasswordResponse)},
  { 101, -1, sizeof(::UpdateRequest)},
  { 114, -1, sizeof(::UpdateResponse)},
  { 120, -1, sizeof(::BlockRequest)},
  { 127, -1, sizeof(::BlockResponse)},
  { 133, -1, sizeof(::UnBlockRequest)},
  { 140, -1, sizeof(::UnBlockResponse)},
  { 146, -1, sizeof(::BlockListRequest)},
  { 152, -1, sizeof(::BlockListResponse)},
  { 158, -1, sizeof(::UserRequest)},
  { 177, -1, sizeof(::UserResponse)},
  { 193, -1, sizeof(::RequestMessage)},
  { 202, -1, sizeof(::ResponseMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NewHostmachineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NewHostmachineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ForgotAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ForgotAccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CheckUserStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CheckUserStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChangePasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChangePasswordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BlockListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BlockListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResponseMessage_default_instance_),
};

const char descriptor_table_protodef_server_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025server_messages.proto\"@\n\025NewHostmachin"
  "eRequest\022\022\n\nip_address\030\001 \001(\t\022\023\n\013certific"
  "ate\030\002 \001(\014\"L\n\026NewHostmachineResponse\022\026\n\016h"
  "ostmachine_id\030\001 \001(\004\022\032\n\022signed_certificat"
  "e\030\002 \001(\014\"{\n\017RegisterRequest\022\020\n\010username\030\001"
  " \001(\t\022\025\n\rpassword_hash\030\002 \001(\014\022\014\n\004name\030\003 \001("
  "\t\022\r\n\005email\030\004 \001(\t\022\016\n\006gender\030\005 \001(\t\022\022\n\nbirt"
  "h_date\030\006 \001(\t\"$\n\020RegisterResponse\022\020\n\010resp"
  "onse\030\001 \001(\t\"7\n\014LoginRequest\022\020\n\010username\030\001"
  " \001(\t\022\025\n\rpassword_hash\030\002 \001(\014\"\277\001\n\rLoginRes"
  "ponse\022\014\n\004name\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022\032\n\022v"
  "isualization_mode\030\003 \001(\t\022\026\n\016ephemeral_cha"
  "t\030\004 \001(\010\022\030\n\020messages_timeout\030\005 \001(\005\022\025\n\rsen"
  "t_messages\030\006 \001(\004\022\031\n\021received_messages\030\007 "
  "\001(\004\022\020\n\010response\030\010 \001(\t\"%\n\024ForgotAccountRe"
  "quest\022\r\n\005email\030\001 \001(\t\")\n\025ForgotAccountRes"
  "ponse\022\020\n\010response\030\001 \001(\t\"*\n\026CheckUserStat"
  "usRequest\022\020\n\010username\030\001 \001(\t\")\n\027CheckUser"
  "StatusResponse\022\016\n\006status\030\001 \001(\t\"%\n\021Connec"
  "tionRequest\022\020\n\010username\030\001 \001(\t\"0\n\022Connect"
  "ionResponse\022\032\n\022contact_ip_address\030\001 \001(\t\""
  "_\n\025ChangePasswordRequest\022\020\n\010username\030\001 \001"
  "(\t\022\031\n\021old_password_hash\030\002 \001(\014\022\031\n\021new_pas"
  "sword_hash\030\003 \001(\014\"*\n\026ChangePasswordRespon"
  "se\022\020\n\010response\030\001 \001(\t\"\303\001\n\rUpdateRequest\022\020"
  "\n\010username\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022\032\n\022visu"
  "alization_mode\030\003 \001(\t\022\026\n\016ephemeral_chat\030\004"
  " \001(\010\022\030\n\020messages_timeout\030\005 \001(\005\022\025\n\rsent_m"
  "essages\030\006 \001(\004\022\031\n\021received_messages\030\007 \001(\004"
  "\022\020\n\010response\030\010 \001(\t\"\"\n\016UpdateResponse\022\020\n\010"
  "response\030\001 \001(\t\"1\n\014BlockRequest\022\020\n\010userna"
  "me\030\001 \001(\t\022\017\n\007contact\030\002 \001(\t\"!\n\rBlockRespon"
  "se\022\020\n\010response\030\001 \001(\t\"3\n\016UnBlockRequest\022\020"
  "\n\010username\030\001 \001(\t\022\017\n\007contact\030\002 \001(\t\"#\n\017UnB"
  "lockResponse\022\020\n\010response\030\001 \001(\t\"$\n\020BlockL"
  "istRequest\022\020\n\010username\030\001 \001(\t\"!\n\021BlockLis"
  "tResponse\022\014\n\004list\030\001 \003(\t\"\345\003\n\013UserRequest\022"
  "\022\n\nip_address\030\001 \001(\t\022\n\n\002os\030\002 \001(\t\022\022\n\nmachi"
  "ne_id\030\003 \001(\004\022$\n\010register\030\004 \001(\0132\020.Register"
  "RequestH\000\022\036\n\005login\030\005 \001(\0132\r.LoginRequestH"
  "\000\022/\n\016forgot_account\030\006 \001(\0132\025.ForgotAccoun"
  "tRequestH\000\022/\n\014check_status\030\007 \001(\0132\027.Check"
  "UserStatusRequestH\000\022%\n\007connect\030\010 \001(\0132\022.C"
  "onnectionRequestH\000\0221\n\017change_password\030\t "
  "\001(\0132\026.ChangePasswordRequestH\000\022 \n\006Update\030"
  "\n \001(\0132\016.UpdateRequestH\000\022\036\n\005block\030\013 \001(\0132\r"
  ".BlockRequestH\000\022\"\n\007unblock\030\014 \001(\0132\017.UnBlo"
  "ckRequestH\000\022\'\n\nblock_list\030\r \001(\0132\021.BlockL"
  "istRequestH\000B\021\n\017MesssageContent\"\274\003\n\014User"
  "Response\022%\n\010register\030\001 \001(\0132\021.RegisterRes"
  "ponseH\000\022\037\n\005login\030\002 \001(\0132\016.LoginResponseH\000"
  "\0220\n\016forgot_account\030\003 \001(\0132\026.ForgotAccount"
  "ResponseH\000\0220\n\014check_status\030\004 \001(\0132\030.Check"
  "UserStatusResponseH\000\022&\n\007connect\030\005 \001(\0132\023."
  "ConnectionResponseH\000\0222\n\017change_password\030"
  "\006 \001(\0132\027.ChangePasswordResponseH\000\022!\n\006Upda"
  "te\030\007 \001(\0132\017.UpdateResponseH\000\022\037\n\005block\030\010 \001"
  "(\0132\016.BlockResponseH\000\022#\n\007unblock\030\t \001(\0132\020."
  "UnBlockResponseH\000\022(\n\nblock_list\030\n \001(\0132\022."
  "BlockListResponseH\000B\021\n\017MesssageContent\"\207"
  "\001\n\016RequestMessage\022\032\n\004type\030\001 \001(\0162\014.Messag"
  "eType\0220\n\016NewHostmachine\030\002 \001(\0132\026.NewHostm"
  "achineRequestH\000\022\034\n\004User\030\003 \001(\0132\014.UserRequ"
  "estH\000B\t\n\007Message\"\212\001\n\017ResponseMessage\022\032\n\004"
  "type\030\001 \001(\0162\014.MessageType\0221\n\016NewHostmachi"
  "ne\030\002 \001(\0132\027.NewHostmachineResponseH\000\022\035\n\004U"
  "ser\030\003 \001(\0132\r.UserResponseH\000B\t\n\007Message*\344\001"
  "\n\013MessageType\022\022\n\016NewHostmachine\020\000\022\020\n\014Reg"
  "isterType\020\001\022\r\n\tLoginType\020\002\022\025\n\021ForgotAcco"
  "untType\020\003\022\027\n\023CheckUserStatusType\020\004\022\022\n\016Co"
  "nnectionType\020\005\022\026\n\022ChangePasswordType\020\006\022\016"
  "\n\nUpdateType\020\007\022\r\n\tBlockType\020\010\022\017\n\013UnBlock"
  "Type\020\t\022\024\n\020GetBlockListType\020\nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fmessages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fmessages_2eproto_sccs[26] = {
  &scc_info_BlockListRequest_server_5fmessages_2eproto.base,
  &scc_info_BlockListResponse_server_5fmessages_2eproto.base,
  &scc_info_BlockRequest_server_5fmessages_2eproto.base,
  &scc_info_BlockResponse_server_5fmessages_2eproto.base,
  &scc_info_ChangePasswordRequest_server_5fmessages_2eproto.base,
  &scc_info_ChangePasswordResponse_server_5fmessages_2eproto.base,
  &scc_info_CheckUserStatusRequest_server_5fmessages_2eproto.base,
  &scc_info_CheckUserStatusResponse_server_5fmessages_2eproto.base,
  &scc_info_ConnectionRequest_server_5fmessages_2eproto.base,
  &scc_info_ConnectionResponse_server_5fmessages_2eproto.base,
  &scc_info_ForgotAccountRequest_server_5fmessages_2eproto.base,
  &scc_info_ForgotAccountResponse_server_5fmessages_2eproto.base,
  &scc_info_LoginRequest_server_5fmessages_2eproto.base,
  &scc_info_LoginResponse_server_5fmessages_2eproto.base,
  &scc_info_NewHostmachineRequest_server_5fmessages_2eproto.base,
  &scc_info_NewHostmachineResponse_server_5fmessages_2eproto.base,
  &scc_info_RegisterRequest_server_5fmessages_2eproto.base,
  &scc_info_RegisterResponse_server_5fmessages_2eproto.base,
  &scc_info_RequestMessage_server_5fmessages_2eproto.base,
  &scc_info_ResponseMessage_server_5fmessages_2eproto.base,
  &scc_info_UnBlockRequest_server_5fmessages_2eproto.base,
  &scc_info_UnBlockResponse_server_5fmessages_2eproto.base,
  &scc_info_UpdateRequest_server_5fmessages_2eproto.base,
  &scc_info_UpdateResponse_server_5fmessages_2eproto.base,
  &scc_info_UserRequest_server_5fmessages_2eproto.base,
  &scc_info_UserResponse_server_5fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fmessages_2eproto = {
  false, false, descriptor_table_protodef_server_5fmessages_2eproto, "server_messages.proto", 2916,
  &descriptor_table_server_5fmessages_2eproto_once, descriptor_table_server_5fmessages_2eproto_sccs, descriptor_table_server_5fmessages_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_server_5fmessages_2eproto::offsets,
  file_level_metadata_server_5fmessages_2eproto, 26, file_level_enum_descriptors_server_5fmessages_2eproto, file_level_service_descriptors_server_5fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fmessages_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fmessages_2eproto);
  return file_level_enum_descriptors_server_5fmessages_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NewHostmachineRequest::InitAsDefaultInstance() {
}
class NewHostmachineRequest::_Internal {
 public:
};

NewHostmachineRequest::NewHostmachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NewHostmachineRequest)
}
NewHostmachineRequest::NewHostmachineRequest(const NewHostmachineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_certificate().empty()) {
    certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_certificate(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:NewHostmachineRequest)
}

void NewHostmachineRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewHostmachineRequest_server_5fmessages_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewHostmachineRequest::~NewHostmachineRequest() {
  // @@protoc_insertion_point(destructor:NewHostmachineRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewHostmachineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewHostmachineRequest::ArenaDtor(void* object) {
  NewHostmachineRequest* _this = reinterpret_cast< NewHostmachineRequest* >(object);
  (void)_this;
}
void NewHostmachineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewHostmachineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewHostmachineRequest& NewHostmachineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewHostmachineRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void NewHostmachineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NewHostmachineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewHostmachineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NewHostmachineRequest.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewHostmachineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewHostmachineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewHostmachineRequest.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // bytes certificate = 2;
  if (this->certificate().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_certificate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewHostmachineRequest)
  return target;
}

size_t NewHostmachineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewHostmachineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // bytes certificate = 2;
  if (this->certificate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_certificate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewHostmachineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewHostmachineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewHostmachineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewHostmachineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewHostmachineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewHostmachineRequest)
    MergeFrom(*source);
  }
}

void NewHostmachineRequest::MergeFrom(const NewHostmachineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewHostmachineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.certificate().size() > 0) {
    _internal_set_certificate(from._internal_certificate());
  }
}

void NewHostmachineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewHostmachineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewHostmachineRequest::CopyFrom(const NewHostmachineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewHostmachineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewHostmachineRequest::IsInitialized() const {
  return true;
}

void NewHostmachineRequest::InternalSwap(NewHostmachineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  certificate_.Swap(&other->certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewHostmachineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewHostmachineResponse::InitAsDefaultInstance() {
}
class NewHostmachineResponse::_Internal {
 public:
};

NewHostmachineResponse::NewHostmachineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NewHostmachineResponse)
}
NewHostmachineResponse::NewHostmachineResponse(const NewHostmachineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signed_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signed_certificate().empty()) {
    signed_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signed_certificate(),
      GetArena());
  }
  hostmachine_id_ = from.hostmachine_id_;
  // @@protoc_insertion_point(copy_constructor:NewHostmachineResponse)
}

void NewHostmachineResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewHostmachineResponse_server_5fmessages_2eproto.base);
  signed_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostmachine_id_ = PROTOBUF_ULONGLONG(0);
}

NewHostmachineResponse::~NewHostmachineResponse() {
  // @@protoc_insertion_point(destructor:NewHostmachineResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewHostmachineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signed_certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewHostmachineResponse::ArenaDtor(void* object) {
  NewHostmachineResponse* _this = reinterpret_cast< NewHostmachineResponse* >(object);
  (void)_this;
}
void NewHostmachineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewHostmachineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewHostmachineResponse& NewHostmachineResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewHostmachineResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void NewHostmachineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NewHostmachineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signed_certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostmachine_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewHostmachineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 hostmachine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hostmachine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signed_certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signed_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewHostmachineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewHostmachineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hostmachine_id = 1;
  if (this->hostmachine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hostmachine_id(), target);
  }

  // bytes signed_certificate = 2;
  if (this->signed_certificate().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signed_certificate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewHostmachineResponse)
  return target;
}

size_t NewHostmachineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewHostmachineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signed_certificate = 2;
  if (this->signed_certificate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signed_certificate());
  }

  // uint64 hostmachine_id = 1;
  if (this->hostmachine_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hostmachine_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewHostmachineResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewHostmachineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewHostmachineResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewHostmachineResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewHostmachineResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewHostmachineResponse)
    MergeFrom(*source);
  }
}

void NewHostmachineResponse::MergeFrom(const NewHostmachineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewHostmachineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signed_certificate().size() > 0) {
    _internal_set_signed_certificate(from._internal_signed_certificate());
  }
  if (from.hostmachine_id() != 0) {
    _internal_set_hostmachine_id(from._internal_hostmachine_id());
  }
}

void NewHostmachineResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewHostmachineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewHostmachineResponse::CopyFrom(const NewHostmachineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewHostmachineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewHostmachineResponse::IsInitialized() const {
  return true;
}

void NewHostmachineResponse::InternalSwap(NewHostmachineResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signed_certificate_.Swap(&other->signed_certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(hostmachine_id_, other->hostmachine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewHostmachineResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterRequest::InitAsDefaultInstance() {
}
class RegisterRequest::_Internal {
 public:
};

RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password_hash().empty()) {
    password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password_hash(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gender().empty()) {
    gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gender(),
      GetArena());
  }
  birth_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_birth_date().empty()) {
    birth_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_birth_date(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  birth_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:RegisterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  birth_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterRequest::ArenaDtor(void* object) {
  RegisterRequest* _this = reinterpret_cast< RegisterRequest* >(object);
  (void)_this;
}
void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterRequest& RegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gender_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  birth_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterRequest.gender"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string birth_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_birth_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterRequest.birth_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes password_hash = 2;
  if (this->password_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_password_hash(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string email = 4;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterRequest.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // string gender = 5;
  if (this->gender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gender().data(), static_cast<int>(this->_internal_gender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterRequest.gender");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gender(), target);
  }

  // string birth_date = 6;
  if (this->birth_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_birth_date().data(), static_cast<int>(this->_internal_birth_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterRequest.birth_date");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_birth_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // bytes password_hash = 2;
  if (this->password_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password_hash());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 4;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string gender = 5;
  if (this->gender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gender());
  }

  // string birth_date = 6;
  if (this->birth_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_birth_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password_hash().size() > 0) {
    _internal_set_password_hash(from._internal_password_hash());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.gender().size() > 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.birth_date().size() > 0) {
    _internal_set_birth_date(from._internal_birth_date());
  }
}

void RegisterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_hash_.Swap(&other->password_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gender_.Swap(&other->gender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  birth_date_.Swap(&other->birth_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterResponse::InitAsDefaultInstance() {
}
class RegisterResponse::_Internal {
 public:
};

RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RegisterResponse)
}

void RegisterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterResponse_server_5fmessages_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:RegisterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterResponse::ArenaDtor(void* object) {
  RegisterResponse* _this = reinterpret_cast< RegisterResponse* >(object);
  (void)_this;
}
void RegisterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterResponse& RegisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void RegisterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password_hash().empty()) {
    password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:LoginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::ArenaDtor(void* object) {
  LoginRequest* _this = reinterpret_cast< LoginRequest* >(object);
  (void)_this;
}
void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes password_hash = 2;
  if (this->password_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_password_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // bytes password_hash = 2;
  if (this->password_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password_hash().size() > 0) {
    _internal_set_password_hash(from._internal_password_hash());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_hash_.Swap(&other->password_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
}
class LoginResponse::_Internal {
 public:
};

LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  visualization_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_visualization_mode().empty()) {
    visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_visualization_mode(),
      GetArena());
  }
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  ::memcpy(&ephemeral_chat_, &from.ephemeral_chat_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_messages_) -
    reinterpret_cast<char*>(&ephemeral_chat_)) + sizeof(received_messages_));
  // @@protoc_insertion_point(copy_constructor:LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginResponse_server_5fmessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visualization_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ephemeral_chat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_messages_) -
      reinterpret_cast<char*>(&ephemeral_chat_)) + sizeof(received_messages_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:LoginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visualization_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::ArenaDtor(void* object) {
  LoginResponse* _this = reinterpret_cast< LoginResponse* >(object);
  (void)_this;
}
void LoginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visualization_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ephemeral_chat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_messages_) -
      reinterpret_cast<char*>(&ephemeral_chat_)) + sizeof(received_messages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string visualization_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_visualization_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginResponse.visualization_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ephemeral_chat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ephemeral_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 messages_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          messages_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sent_messages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sent_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 received_messages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          received_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // string visualization_mode = 3;
  if (this->visualization_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visualization_mode().data(), static_cast<int>(this->_internal_visualization_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginResponse.visualization_mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_visualization_mode(), target);
  }

  // bool ephemeral_chat = 4;
  if (this->ephemeral_chat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ephemeral_chat(), target);
  }

  // int32 messages_timeout = 5;
  if (this->messages_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_messages_timeout(), target);
  }

  // uint64 sent_messages = 6;
  if (this->sent_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sent_messages(), target);
  }

  // uint64 received_messages = 7;
  if (this->received_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received_messages(), target);
  }

  // string response = 8;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginResponse.response");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string visualization_mode = 3;
  if (this->visualization_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visualization_mode());
  }

  // string response = 8;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  // bool ephemeral_chat = 4;
  if (this->ephemeral_chat() != 0) {
    total_size += 1 + 1;
  }

  // int32 messages_timeout = 5;
  if (this->messages_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_messages_timeout());
  }

  // uint64 sent_messages = 6;
  if (this->sent_messages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sent_messages());
  }

  // uint64 received_messages = 7;
  if (this->received_messages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_received_messages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.visualization_mode().size() > 0) {
    _internal_set_visualization_mode(from._internal_visualization_mode());
  }
  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
  if (from.ephemeral_chat() != 0) {
    _internal_set_ephemeral_chat(from._internal_ephemeral_chat());
  }
  if (from.messages_timeout() != 0) {
    _internal_set_messages_timeout(from._internal_messages_timeout());
  }
  if (from.sent_messages() != 0) {
    _internal_set_sent_messages(from._internal_sent_messages());
  }
  if (from.received_messages() != 0) {
    _internal_set_received_messages(from._internal_received_messages());
  }
}

void LoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visualization_mode_.Swap(&other->visualization_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, received_messages_)
      + sizeof(LoginResponse::received_messages_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, ephemeral_chat_)>(
          reinterpret_cast<char*>(&ephemeral_chat_),
          reinterpret_cast<char*>(&other->ephemeral_chat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForgotAccountRequest::InitAsDefaultInstance() {
}
class ForgotAccountRequest::_Internal {
 public:
};

ForgotAccountRequest::ForgotAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ForgotAccountRequest)
}
ForgotAccountRequest::ForgotAccountRequest(const ForgotAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ForgotAccountRequest)
}

void ForgotAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForgotAccountRequest_server_5fmessages_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ForgotAccountRequest::~ForgotAccountRequest() {
  // @@protoc_insertion_point(destructor:ForgotAccountRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForgotAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ForgotAccountRequest::ArenaDtor(void* object) {
  ForgotAccountRequest* _this = reinterpret_cast< ForgotAccountRequest* >(object);
  (void)_this;
}
void ForgotAccountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForgotAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForgotAccountRequest& ForgotAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForgotAccountRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ForgotAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ForgotAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForgotAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ForgotAccountRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForgotAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ForgotAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ForgotAccountRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ForgotAccountRequest)
  return target;
}

size_t ForgotAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ForgotAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForgotAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ForgotAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForgotAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForgotAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ForgotAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ForgotAccountRequest)
    MergeFrom(*source);
  }
}

void ForgotAccountRequest::MergeFrom(const ForgotAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ForgotAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
}

void ForgotAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ForgotAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForgotAccountRequest::CopyFrom(const ForgotAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ForgotAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForgotAccountRequest::IsInitialized() const {
  return true;
}

void ForgotAccountRequest::InternalSwap(ForgotAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ForgotAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForgotAccountResponse::InitAsDefaultInstance() {
}
class ForgotAccountResponse::_Internal {
 public:
};

ForgotAccountResponse::ForgotAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ForgotAccountResponse)
}
ForgotAccountResponse::ForgotAccountResponse(const ForgotAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ForgotAccountResponse)
}

void ForgotAccountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForgotAccountResponse_server_5fmessages_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ForgotAccountResponse::~ForgotAccountResponse() {
  // @@protoc_insertion_point(destructor:ForgotAccountResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForgotAccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ForgotAccountResponse::ArenaDtor(void* object) {
  ForgotAccountResponse* _this = reinterpret_cast< ForgotAccountResponse* >(object);
  (void)_this;
}
void ForgotAccountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForgotAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForgotAccountResponse& ForgotAccountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForgotAccountResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ForgotAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ForgotAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForgotAccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ForgotAccountResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForgotAccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ForgotAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ForgotAccountResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ForgotAccountResponse)
  return target;
}

size_t ForgotAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ForgotAccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForgotAccountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ForgotAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ForgotAccountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForgotAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ForgotAccountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ForgotAccountResponse)
    MergeFrom(*source);
  }
}

void ForgotAccountResponse::MergeFrom(const ForgotAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ForgotAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void ForgotAccountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ForgotAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForgotAccountResponse::CopyFrom(const ForgotAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ForgotAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForgotAccountResponse::IsInitialized() const {
  return true;
}

void ForgotAccountResponse::InternalSwap(ForgotAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ForgotAccountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckUserStatusRequest::InitAsDefaultInstance() {
}
class CheckUserStatusRequest::_Internal {
 public:
};

CheckUserStatusRequest::CheckUserStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CheckUserStatusRequest)
}
CheckUserStatusRequest::CheckUserStatusRequest(const CheckUserStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CheckUserStatusRequest)
}

void CheckUserStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckUserStatusRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckUserStatusRequest::~CheckUserStatusRequest() {
  // @@protoc_insertion_point(destructor:CheckUserStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckUserStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckUserStatusRequest::ArenaDtor(void* object) {
  CheckUserStatusRequest* _this = reinterpret_cast< CheckUserStatusRequest* >(object);
  (void)_this;
}
void CheckUserStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckUserStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckUserStatusRequest& CheckUserStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckUserStatusRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CheckUserStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckUserStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckUserStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CheckUserStatusRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckUserStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckUserStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CheckUserStatusRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckUserStatusRequest)
  return target;
}

size_t CheckUserStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckUserStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckUserStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckUserStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckUserStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckUserStatusRequest)
    MergeFrom(*source);
  }
}

void CheckUserStatusRequest::MergeFrom(const CheckUserStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckUserStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
}

void CheckUserStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckUserStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserStatusRequest::CopyFrom(const CheckUserStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckUserStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserStatusRequest::IsInitialized() const {
  return true;
}

void CheckUserStatusRequest::InternalSwap(CheckUserStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckUserStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckUserStatusResponse::InitAsDefaultInstance() {
}
class CheckUserStatusResponse::_Internal {
 public:
};

CheckUserStatusResponse::CheckUserStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CheckUserStatusResponse)
}
CheckUserStatusResponse::CheckUserStatusResponse(const CheckUserStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CheckUserStatusResponse)
}

void CheckUserStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckUserStatusResponse_server_5fmessages_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckUserStatusResponse::~CheckUserStatusResponse() {
  // @@protoc_insertion_point(destructor:CheckUserStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckUserStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckUserStatusResponse::ArenaDtor(void* object) {
  CheckUserStatusResponse* _this = reinterpret_cast< CheckUserStatusResponse* >(object);
  (void)_this;
}
void CheckUserStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckUserStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckUserStatusResponse& CheckUserStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckUserStatusResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CheckUserStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckUserStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckUserStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CheckUserStatusResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckUserStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckUserStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CheckUserStatusResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckUserStatusResponse)
  return target;
}

size_t CheckUserStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckUserStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckUserStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckUserStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckUserStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckUserStatusResponse)
    MergeFrom(*source);
  }
}

void CheckUserStatusResponse::MergeFrom(const CheckUserStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckUserStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
}

void CheckUserStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckUserStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserStatusResponse::CopyFrom(const CheckUserStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckUserStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserStatusResponse::IsInitialized() const {
  return true;
}

void CheckUserStatusResponse::InternalSwap(CheckUserStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckUserStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectionRequest::InitAsDefaultInstance() {
}
class ConnectionRequest::_Internal {
 public:
};

ConnectionRequest::ConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnectionRequest)
}
ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ConnectionRequest)
}

void ConnectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnectionRequest::~ConnectionRequest() {
  // @@protoc_insertion_point(destructor:ConnectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionRequest::ArenaDtor(void* object) {
  ConnectionRequest* _this = reinterpret_cast< ConnectionRequest* >(object);
  (void)_this;
}
void ConnectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionRequest& ConnectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ConnectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectionRequest)
  return target;
}

size_t ConnectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectionRequest)
    MergeFrom(*source);
  }
}

void ConnectionRequest::MergeFrom(const ConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
}

void ConnectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {
  return true;
}

void ConnectionRequest::InternalSwap(ConnectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectionResponse::InitAsDefaultInstance() {
}
class ConnectionResponse::_Internal {
 public:
};

ConnectionResponse::ConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnectionResponse)
}
ConnectionResponse::ConnectionResponse(const ConnectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contact_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contact_ip_address().empty()) {
    contact_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contact_ip_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ConnectionResponse)
}

void ConnectionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionResponse_server_5fmessages_2eproto.base);
  contact_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnectionResponse::~ConnectionResponse() {
  // @@protoc_insertion_point(destructor:ConnectionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contact_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionResponse::ArenaDtor(void* object) {
  ConnectionResponse* _this = reinterpret_cast< ConnectionResponse* >(object);
  (void)_this;
}
void ConnectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionResponse& ConnectionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ConnectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contact_ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contact_ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contact_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionResponse.contact_ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contact_ip_address = 1;
  if (this->contact_ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contact_ip_address().data(), static_cast<int>(this->_internal_contact_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionResponse.contact_ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contact_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectionResponse)
  return target;
}

size_t ConnectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contact_ip_address = 1;
  if (this->contact_ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contact_ip_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectionResponse)
    MergeFrom(*source);
  }
}

void ConnectionResponse::MergeFrom(const ConnectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contact_ip_address().size() > 0) {
    _internal_set_contact_ip_address(from._internal_contact_ip_address());
  }
}

void ConnectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionResponse::CopyFrom(const ConnectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionResponse::IsInitialized() const {
  return true;
}

void ConnectionResponse::InternalSwap(ConnectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contact_ip_address_.Swap(&other->contact_ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePasswordRequest::InitAsDefaultInstance() {
}
class ChangePasswordRequest::_Internal {
 public:
};

ChangePasswordRequest::ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChangePasswordRequest)
}
ChangePasswordRequest::ChangePasswordRequest(const ChangePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  old_password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_password_hash().empty()) {
    old_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_password_hash(),
      GetArena());
  }
  new_password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_password_hash().empty()) {
    new_password_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_password_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ChangePasswordRequest)
}

void ChangePasswordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangePasswordRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangePasswordRequest::~ChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:ChangePasswordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_password_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangePasswordRequest::ArenaDtor(void* object) {
  ChangePasswordRequest* _this = reinterpret_cast< ChangePasswordRequest* >(object);
  (void)_this;
}
void ChangePasswordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangePasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePasswordRequest& ChangePasswordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePasswordRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChangePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_password_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChangePasswordRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_password_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_old_password_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_password_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_password_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChangePasswordRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes old_password_hash = 2;
  if (this->old_password_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_password_hash(), target);
  }

  // bytes new_password_hash = 3;
  if (this->new_password_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_password_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangePasswordRequest)
  return target;
}

size_t ChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChangePasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // bytes old_password_hash = 2;
  if (this->old_password_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_password_hash());
  }

  // bytes new_password_hash = 3;
  if (this->new_password_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_password_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePasswordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePasswordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePasswordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChangePasswordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChangePasswordRequest)
    MergeFrom(*source);
  }
}

void ChangePasswordRequest::MergeFrom(const ChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.old_password_hash().size() > 0) {
    _internal_set_old_password_hash(from._internal_old_password_hash());
  }
  if (from.new_password_hash().size() > 0) {
    _internal_set_new_password_hash(from._internal_new_password_hash());
  }
}

void ChangePasswordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePasswordRequest::CopyFrom(const ChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordRequest::IsInitialized() const {
  return true;
}

void ChangePasswordRequest::InternalSwap(ChangePasswordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_password_hash_.Swap(&other->old_password_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_password_hash_.Swap(&other->new_password_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePasswordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePasswordResponse::InitAsDefaultInstance() {
}
class ChangePasswordResponse::_Internal {
 public:
};

ChangePasswordResponse::ChangePasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChangePasswordResponse)
}
ChangePasswordResponse::ChangePasswordResponse(const ChangePasswordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ChangePasswordResponse)
}

void ChangePasswordResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangePasswordResponse_server_5fmessages_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangePasswordResponse::~ChangePasswordResponse() {
  // @@protoc_insertion_point(destructor:ChangePasswordResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangePasswordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangePasswordResponse::ArenaDtor(void* object) {
  ChangePasswordResponse* _this = reinterpret_cast< ChangePasswordResponse* >(object);
  (void)_this;
}
void ChangePasswordResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangePasswordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePasswordResponse& ChangePasswordResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePasswordResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ChangePasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChangePasswordResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePasswordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChangePasswordResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePasswordResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangePasswordResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChangePasswordResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangePasswordResponse)
  return target;
}

size_t ChangePasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChangePasswordResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePasswordResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePasswordResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePasswordResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChangePasswordResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChangePasswordResponse)
    MergeFrom(*source);
  }
}

void ChangePasswordResponse::MergeFrom(const ChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void ChangePasswordResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePasswordResponse::CopyFrom(const ChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordResponse::IsInitialized() const {
  return true;
}

void ChangePasswordResponse::InternalSwap(ChangePasswordResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePasswordResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateRequest::InitAsDefaultInstance() {
}
class UpdateRequest::_Internal {
 public:
};

UpdateRequest::UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  visualization_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_visualization_mode().empty()) {
    visualization_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_visualization_mode(),
      GetArena());
  }
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  ::memcpy(&ephemeral_chat_, &from.ephemeral_chat_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_messages_) -
    reinterpret_cast<char*>(&ephemeral_chat_)) + sizeof(received_messages_));
  // @@protoc_insertion_point(copy_constructor:UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visualization_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ephemeral_chat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_messages_) -
      reinterpret_cast<char*>(&ephemeral_chat_)) + sizeof(received_messages_));
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:UpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visualization_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateRequest::ArenaDtor(void* object) {
  UpdateRequest* _this = reinterpret_cast< UpdateRequest* >(object);
  (void)_this;
}
void UpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRequest& UpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visualization_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ephemeral_chat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_messages_) -
      reinterpret_cast<char*>(&ephemeral_chat_)) + sizeof(received_messages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateRequest.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string visualization_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_visualization_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateRequest.visualization_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ephemeral_chat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ephemeral_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 messages_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          messages_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sent_messages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sent_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 received_messages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          received_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateRequest.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateRequest.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // string visualization_mode = 3;
  if (this->visualization_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visualization_mode().data(), static_cast<int>(this->_internal_visualization_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateRequest.visualization_mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_visualization_mode(), target);
  }

  // bool ephemeral_chat = 4;
  if (this->ephemeral_chat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ephemeral_chat(), target);
  }

  // int32 messages_timeout = 5;
  if (this->messages_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_messages_timeout(), target);
  }

  // uint64 sent_messages = 6;
  if (this->sent_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sent_messages(), target);
  }

  // uint64 received_messages = 7;
  if (this->received_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received_messages(), target);
  }

  // string response = 8;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateRequest.response");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string visualization_mode = 3;
  if (this->visualization_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visualization_mode());
  }

  // string response = 8;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  // bool ephemeral_chat = 4;
  if (this->ephemeral_chat() != 0) {
    total_size += 1 + 1;
  }

  // int32 messages_timeout = 5;
  if (this->messages_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_messages_timeout());
  }

  // uint64 sent_messages = 6;
  if (this->sent_messages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sent_messages());
  }

  // uint64 received_messages = 7;
  if (this->received_messages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_received_messages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateRequest)
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.visualization_mode().size() > 0) {
    _internal_set_visualization_mode(from._internal_visualization_mode());
  }
  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
  if (from.ephemeral_chat() != 0) {
    _internal_set_ephemeral_chat(from._internal_ephemeral_chat());
  }
  if (from.messages_timeout() != 0) {
    _internal_set_messages_timeout(from._internal_messages_timeout());
  }
  if (from.sent_messages() != 0) {
    _internal_set_sent_messages(from._internal_sent_messages());
  }
  if (from.received_messages() != 0) {
    _internal_set_received_messages(from._internal_received_messages());
  }
}

void UpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  visualization_mode_.Swap(&other->visualization_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateRequest, received_messages_)
      + sizeof(UpdateRequest::received_messages_)
      - PROTOBUF_FIELD_OFFSET(UpdateRequest, ephemeral_chat_)>(
          reinterpret_cast<char*>(&ephemeral_chat_),
          reinterpret_cast<char*>(&other->ephemeral_chat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateResponse::InitAsDefaultInstance() {
}
class UpdateResponse::_Internal {
 public:
};

UpdateResponse::UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateResponse)
}
UpdateResponse::UpdateResponse(const UpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:UpdateResponse)
}

void UpdateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateResponse_server_5fmessages_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateResponse::~UpdateResponse() {
  // @@protoc_insertion_point(destructor:UpdateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateResponse::ArenaDtor(void* object) {
  UpdateResponse* _this = reinterpret_cast< UpdateResponse* >(object);
  (void)_this;
}
void UpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateResponse& UpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void UpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateResponse)
  return target;
}

size_t UpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateResponse)
    MergeFrom(*source);
  }
}

void UpdateResponse::MergeFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void UpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResponse::IsInitialized() const {
  return true;
}

void UpdateResponse::InternalSwap(UpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockRequest::InitAsDefaultInstance() {
}
class BlockRequest::_Internal {
 public:
};

BlockRequest::BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BlockRequest)
}
BlockRequest::BlockRequest(const BlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contact().empty()) {
    contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contact(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BlockRequest)
}

void BlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:BlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockRequest::ArenaDtor(void* object) {
  BlockRequest* _this = reinterpret_cast< BlockRequest* >(object);
  (void)_this;
}
void BlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockRequest& BlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void BlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contact_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BlockRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contact();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BlockRequest.contact"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string contact = 2;
  if (this->contact().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contact().data(), static_cast<int>(this->_internal_contact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockRequest.contact");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockRequest)
  return target;
}

size_t BlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string contact = 2;
  if (this->contact().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contact());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BlockRequest)
    MergeFrom(*source);
  }
}

void BlockRequest::MergeFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.contact().size() > 0) {
    _internal_set_contact(from._internal_contact());
  }
}

void BlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  return true;
}

void BlockRequest::InternalSwap(BlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contact_.Swap(&other->contact_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockResponse::InitAsDefaultInstance() {
}
class BlockResponse::_Internal {
 public:
};

BlockResponse::BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BlockResponse)
}

void BlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockResponse_server_5fmessages_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:BlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockResponse::ArenaDtor(void* object) {
  BlockResponse* _this = reinterpret_cast< BlockResponse* >(object);
  (void)_this;
}
void BlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockResponse& BlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BlockResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BlockResponse)
    MergeFrom(*source);
  }
}

void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void BlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBlockRequest::InitAsDefaultInstance() {
}
class UnBlockRequest::_Internal {
 public:
};

UnBlockRequest::UnBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnBlockRequest)
}
UnBlockRequest::UnBlockRequest(const UnBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contact().empty()) {
    contact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contact(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:UnBlockRequest)
}

void UnBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnBlockRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnBlockRequest::~UnBlockRequest() {
  // @@protoc_insertion_point(destructor:UnBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnBlockRequest::ArenaDtor(void* object) {
  UnBlockRequest* _this = reinterpret_cast< UnBlockRequest* >(object);
  (void)_this;
}
void UnBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBlockRequest& UnBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBlockRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void UnBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UnBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contact_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnBlockRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contact();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnBlockRequest.contact"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnBlockRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string contact = 2;
  if (this->contact().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contact().data(), static_cast<int>(this->_internal_contact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnBlockRequest.contact");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnBlockRequest)
  return target;
}

size_t UnBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string contact = 2;
  if (this->contact().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contact());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnBlockRequest)
    MergeFrom(*source);
  }
}

void UnBlockRequest::MergeFrom(const UnBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.contact().size() > 0) {
    _internal_set_contact(from._internal_contact());
  }
}

void UnBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBlockRequest::CopyFrom(const UnBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBlockRequest::IsInitialized() const {
  return true;
}

void UnBlockRequest::InternalSwap(UnBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contact_.Swap(&other->contact_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnBlockResponse::InitAsDefaultInstance() {
}
class UnBlockResponse::_Internal {
 public:
};

UnBlockResponse::UnBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnBlockResponse)
}
UnBlockResponse::UnBlockResponse(const UnBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:UnBlockResponse)
}

void UnBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnBlockResponse_server_5fmessages_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnBlockResponse::~UnBlockResponse() {
  // @@protoc_insertion_point(destructor:UnBlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnBlockResponse::ArenaDtor(void* object) {
  UnBlockResponse* _this = reinterpret_cast< UnBlockResponse* >(object);
  (void)_this;
}
void UnBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnBlockResponse& UnBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnBlockResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void UnBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UnBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnBlockResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnBlockResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnBlockResponse)
  return target;
}

size_t UnBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnBlockResponse)
    MergeFrom(*source);
  }
}

void UnBlockResponse::MergeFrom(const UnBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void UnBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBlockResponse::CopyFrom(const UnBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBlockResponse::IsInitialized() const {
  return true;
}

void UnBlockResponse::InternalSwap(UnBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockListRequest::InitAsDefaultInstance() {
}
class BlockListRequest::_Internal {
 public:
};

BlockListRequest::BlockListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BlockListRequest)
}
BlockListRequest::BlockListRequest(const BlockListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BlockListRequest)
}

void BlockListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockListRequest_server_5fmessages_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockListRequest::~BlockListRequest() {
  // @@protoc_insertion_point(destructor:BlockListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockListRequest::ArenaDtor(void* object) {
  BlockListRequest* _this = reinterpret_cast< BlockListRequest* >(object);
  (void)_this;
}
void BlockListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockListRequest& BlockListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockListRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void BlockListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BlockListRequest.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockListRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockListRequest)
  return target;
}

size_t BlockListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BlockListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BlockListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BlockListRequest)
    MergeFrom(*source);
  }
}

void BlockListRequest::MergeFrom(const BlockListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BlockListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
}

void BlockListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BlockListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockListRequest::CopyFrom(const BlockListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockListRequest::IsInitialized() const {
  return true;
}

void BlockListRequest::InternalSwap(BlockListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockListResponse::InitAsDefaultInstance() {
}
class BlockListResponse::_Internal {
 public:
};

BlockListResponse::BlockListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BlockListResponse)
}
BlockListResponse::BlockListResponse(const BlockListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BlockListResponse)
}

void BlockListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockListResponse_server_5fmessages_2eproto.base);
}

BlockListResponse::~BlockListResponse() {
  // @@protoc_insertion_point(destructor:BlockListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockListResponse::ArenaDtor(void* object) {
  BlockListResponse* _this = reinterpret_cast< BlockListResponse* >(object);
  (void)_this;
}
void BlockListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockListResponse& BlockListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockListResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void BlockListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BlockListResponse.list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->_internal_list_size(); i < n; i++) {
    const auto& s = this->_internal_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockListResponse.list");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockListResponse)
  return target;
}

size_t BlockListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(list_.size());
  for (int i = 0, n = list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BlockListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BlockListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BlockListResponse)
    MergeFrom(*source);
  }
}

void BlockListResponse::MergeFrom(const BlockListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BlockListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void BlockListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BlockListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockListResponse::CopyFrom(const BlockListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockListResponse::IsInitialized() const {
  return true;
}

void BlockListResponse::InternalSwap(BlockListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserRequest::InitAsDefaultInstance() {
  ::_UserRequest_default_instance_.register__ = const_cast< ::RegisterRequest*>(
      ::RegisterRequest::internal_default_instance());
  ::_UserRequest_default_instance_.login_ = const_cast< ::LoginRequest*>(
      ::LoginRequest::internal_default_instance());
  ::_UserRequest_default_instance_.forgot_account_ = const_cast< ::ForgotAccountRequest*>(
      ::ForgotAccountRequest::internal_default_instance());
  ::_UserRequest_default_instance_.check_status_ = const_cast< ::CheckUserStatusRequest*>(
      ::CheckUserStatusRequest::internal_default_instance());
  ::_UserRequest_default_instance_.connect_ = const_cast< ::ConnectionRequest*>(
      ::ConnectionRequest::internal_default_instance());
  ::_UserRequest_default_instance_.change_password_ = const_cast< ::ChangePasswordRequest*>(
      ::ChangePasswordRequest::internal_default_instance());
  ::_UserRequest_default_instance_.update_ = const_cast< ::UpdateRequest*>(
      ::UpdateRequest::internal_default_instance());
  ::_UserRequest_default_instance_.block_ = const_cast< ::BlockRequest*>(
      ::BlockRequest::internal_default_instance());
  ::_UserRequest_default_instance_.unblock_ = const_cast< ::UnBlockRequest*>(
      ::UnBlockRequest::internal_default_instance());
  ::_UserRequest_default_instance_.block_list_ = const_cast< ::BlockListRequest*>(
      ::BlockListRequest::internal_default_instance());
}
class UserRequest::_Internal {
 public:
  static const ::RegisterRequest& register_(const UserRequest* msg);
  static const ::LoginRequest& login(const UserRequest* msg);
  static const ::ForgotAccountRequest& forgot_account(const UserRequest* msg);
  static const ::CheckUserStatusRequest& check_status(const UserRequest* msg);
  static const ::ConnectionRequest& connect(const UserRequest* msg);
  static const ::ChangePasswordRequest& change_password(const UserRequest* msg);
  static const ::UpdateRequest& update(const UserRequest* msg);
  static const ::BlockRequest& block(const UserRequest* msg);
  static const ::UnBlockRequest& unblock(const UserRequest* msg);
  static const ::BlockListRequest& block_list(const UserRequest* msg);
};

const ::RegisterRequest&
UserRequest::_Internal::register_(const UserRequest* msg) {
  return *msg->MesssageContent_.register__;
}
const ::LoginRequest&
UserRequest::_Internal::login(const UserRequest* msg) {
  return *msg->MesssageContent_.login_;
}
const ::ForgotAccountRequest&
UserRequest::_Internal::forgot_account(const UserRequest* msg) {
  return *msg->MesssageContent_.forgot_account_;
}
const ::CheckUserStatusRequest&
UserRequest::_Internal::check_status(const UserRequest* msg) {
  return *msg->MesssageContent_.check_status_;
}
const ::ConnectionRequest&
UserRequest::_Internal::connect(const UserRequest* msg) {
  return *msg->MesssageContent_.connect_;
}
const ::ChangePasswordRequest&
UserRequest::_Internal::change_password(const UserRequest* msg) {
  return *msg->MesssageContent_.change_password_;
}
const ::UpdateRequest&
UserRequest::_Internal::update(const UserRequest* msg) {
  return *msg->MesssageContent_.update_;
}
const ::BlockRequest&
UserRequest::_Internal::block(const UserRequest* msg) {
  return *msg->MesssageContent_.block_;
}
const ::UnBlockRequest&
UserRequest::_Internal::unblock(const UserRequest* msg) {
  return *msg->MesssageContent_.unblock_;
}
const ::BlockListRequest&
UserRequest::_Internal::block_list(const UserRequest* msg) {
  return *msg->MesssageContent_.block_list_;
}
void UserRequest::set_allocated_register_(::RegisterRequest* register_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (register_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(register_);
    if (message_arena != submessage_arena) {
      register_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    set_has_register_();
    MesssageContent_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.register)
}
void UserRequest::set_allocated_login(::LoginRequest* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login);
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    MesssageContent_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.login)
}
void UserRequest::set_allocated_forgot_account(::ForgotAccountRequest* forgot_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (forgot_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forgot_account);
    if (message_arena != submessage_arena) {
      forgot_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forgot_account, submessage_arena);
    }
    set_has_forgot_account();
    MesssageContent_.forgot_account_ = forgot_account;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.forgot_account)
}
void UserRequest::set_allocated_check_status(::CheckUserStatusRequest* check_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (check_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(check_status);
    if (message_arena != submessage_arena) {
      check_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_status, submessage_arena);
    }
    set_has_check_status();
    MesssageContent_.check_status_ = check_status;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.check_status)
}
void UserRequest::set_allocated_connect(::ConnectionRequest* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connect);
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    MesssageContent_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.connect)
}
void UserRequest::set_allocated_change_password(::ChangePasswordRequest* change_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (change_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change_password);
    if (message_arena != submessage_arena) {
      change_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_password, submessage_arena);
    }
    set_has_change_password();
    MesssageContent_.change_password_ = change_password;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.change_password)
}
void UserRequest::set_allocated_update(::UpdateRequest* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    MesssageContent_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.Update)
}
void UserRequest::set_allocated_block(::BlockRequest* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
    MesssageContent_.block_ = block;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.block)
}
void UserRequest::set_allocated_unblock(::UnBlockRequest* unblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (unblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unblock);
    if (message_arena != submessage_arena) {
      unblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unblock, submessage_arena);
    }
    set_has_unblock();
    MesssageContent_.unblock_ = unblock;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.unblock)
}
void UserRequest::set_allocated_block_list(::BlockListRequest* block_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (block_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_list);
    if (message_arena != submessage_arena) {
      block_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_list, submessage_arena);
    }
    set_has_block_list();
    MesssageContent_.block_list_ = block_list;
  }
  // @@protoc_insertion_point(field_set_allocated:UserRequest.block_list)
}
UserRequest::UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_os().empty()) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_os(),
      GetArena());
  }
  machine_id_ = from.machine_id_;
  clear_has_MesssageContent();
  switch (from.MesssageContent_case()) {
    case kRegister: {
      _internal_mutable_register_()->::RegisterRequest::MergeFrom(from._internal_register_());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::LoginRequest::MergeFrom(from._internal_login());
      break;
    }
    case kForgotAccount: {
      _internal_mutable_forgot_account()->::ForgotAccountRequest::MergeFrom(from._internal_forgot_account());
      break;
    }
    case kCheckStatus: {
      _internal_mutable_check_status()->::CheckUserStatusRequest::MergeFrom(from._internal_check_status());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::ConnectionRequest::MergeFrom(from._internal_connect());
      break;
    }
    case kChangePassword: {
      _internal_mutable_change_password()->::ChangePasswordRequest::MergeFrom(from._internal_change_password());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::UpdateRequest::MergeFrom(from._internal_update());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::BlockRequest::MergeFrom(from._internal_block());
      break;
    }
    case kUnblock: {
      _internal_mutable_unblock()->::UnBlockRequest::MergeFrom(from._internal_unblock());
      break;
    }
    case kBlockList: {
      _internal_mutable_block_list()->::BlockListRequest::MergeFrom(from._internal_block_list());
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:UserRequest)
}

void UserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserRequest_server_5fmessages_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_id_ = PROTOBUF_ULONGLONG(0);
  clear_has_MesssageContent();
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:UserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_MesssageContent()) {
    clear_MesssageContent();
  }
}

void UserRequest::ArenaDtor(void* object) {
  UserRequest* _this = reinterpret_cast< UserRequest* >(object);
  (void)_this;
}
void UserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserRequest& UserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserRequest_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void UserRequest::clear_MesssageContent() {
// @@protoc_insertion_point(one_of_clear_start:UserRequest)
  switch (MesssageContent_case()) {
    case kRegister: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.register__;
      }
      break;
    }
    case kLogin: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.login_;
      }
      break;
    }
    case kForgotAccount: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.forgot_account_;
      }
      break;
    }
    case kCheckStatus: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.check_status_;
      }
      break;
    }
    case kConnect: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.connect_;
      }
      break;
    }
    case kChangePassword: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.change_password_;
      }
      break;
    }
    case kUpdate: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.update_;
      }
      break;
    }
    case kBlock: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.block_;
      }
      break;
    }
    case kUnblock: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.unblock_;
      }
      break;
    }
    case kBlockList: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.block_list_;
      }
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSSAGECONTENT_NOT_SET;
}


void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machine_id_ = PROTOBUF_ULONGLONG(0);
  clear_MesssageContent();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserRequest.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string os = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserRequest.os"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 machine_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RegisterRequest register = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LoginRequest login = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ForgotAccountRequest forgot_account = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_forgot_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CheckUserStatusRequest check_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ConnectionRequest connect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChangePasswordRequest change_password = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateRequest Update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BlockRequest block = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UnBlockRequest unblock = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_unblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BlockListRequest block_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserRequest.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // string os = 2;
  if (this->os().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserRequest.os");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_os(), target);
  }

  // uint64 machine_id = 3;
  if (this->machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_machine_id(), target);
  }

  // .RegisterRequest register = 4;
  if (_internal_has_register_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::register_(this), target, stream);
  }

  // .LoginRequest login = 5;
  if (_internal_has_login()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::login(this), target, stream);
  }

  // .ForgotAccountRequest forgot_account = 6;
  if (_internal_has_forgot_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::forgot_account(this), target, stream);
  }

  // .CheckUserStatusRequest check_status = 7;
  if (_internal_has_check_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::check_status(this), target, stream);
  }

  // .ConnectionRequest connect = 8;
  if (_internal_has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::connect(this), target, stream);
  }

  // .ChangePasswordRequest change_password = 9;
  if (_internal_has_change_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::change_password(this), target, stream);
  }

  // .UpdateRequest Update = 10;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::update(this), target, stream);
  }

  // .BlockRequest block = 11;
  if (_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::block(this), target, stream);
  }

  // .UnBlockRequest unblock = 12;
  if (_internal_has_unblock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::unblock(this), target, stream);
  }

  // .BlockListRequest block_list = 13;
  if (_internal_has_block_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::block_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string os = 2;
  if (this->os().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // uint64 machine_id = 3;
  if (this->machine_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_machine_id());
  }

  switch (MesssageContent_case()) {
    // .RegisterRequest register = 4;
    case kRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.register__);
      break;
    }
    // .LoginRequest login = 5;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.login_);
      break;
    }
    // .ForgotAccountRequest forgot_account = 6;
    case kForgotAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.forgot_account_);
      break;
    }
    // .CheckUserStatusRequest check_status = 7;
    case kCheckStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.check_status_);
      break;
    }
    // .ConnectionRequest connect = 8;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.connect_);
      break;
    }
    // .ChangePasswordRequest change_password = 9;
    case kChangePassword: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.change_password_);
      break;
    }
    // .UpdateRequest Update = 10;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.update_);
      break;
    }
    // .BlockRequest block = 11;
    case kBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.block_);
      break;
    }
    // .UnBlockRequest unblock = 12;
    case kUnblock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.unblock_);
      break;
    }
    // .BlockListRequest block_list = 13;
    case kBlockList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.block_list_);
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserRequest)
    MergeFrom(*source);
  }
}

void UserRequest::MergeFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.os().size() > 0) {
    _internal_set_os(from._internal_os());
  }
  if (from.machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  switch (from.MesssageContent_case()) {
    case kRegister: {
      _internal_mutable_register_()->::RegisterRequest::MergeFrom(from._internal_register_());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::LoginRequest::MergeFrom(from._internal_login());
      break;
    }
    case kForgotAccount: {
      _internal_mutable_forgot_account()->::ForgotAccountRequest::MergeFrom(from._internal_forgot_account());
      break;
    }
    case kCheckStatus: {
      _internal_mutable_check_status()->::CheckUserStatusRequest::MergeFrom(from._internal_check_status());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::ConnectionRequest::MergeFrom(from._internal_connect());
      break;
    }
    case kChangePassword: {
      _internal_mutable_change_password()->::ChangePasswordRequest::MergeFrom(from._internal_change_password());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::UpdateRequest::MergeFrom(from._internal_update());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::BlockRequest::MergeFrom(from._internal_block());
      break;
    }
    case kUnblock: {
      _internal_mutable_unblock()->::UnBlockRequest::MergeFrom(from._internal_unblock());
      break;
    }
    case kBlockList: {
      _internal_mutable_block_list()->::BlockListRequest::MergeFrom(from._internal_block_list());
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
}

void UserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(machine_id_, other->machine_id_);
  swap(MesssageContent_, other->MesssageContent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserResponse::InitAsDefaultInstance() {
  ::_UserResponse_default_instance_.register__ = const_cast< ::RegisterResponse*>(
      ::RegisterResponse::internal_default_instance());
  ::_UserResponse_default_instance_.login_ = const_cast< ::LoginResponse*>(
      ::LoginResponse::internal_default_instance());
  ::_UserResponse_default_instance_.forgot_account_ = const_cast< ::ForgotAccountResponse*>(
      ::ForgotAccountResponse::internal_default_instance());
  ::_UserResponse_default_instance_.check_status_ = const_cast< ::CheckUserStatusResponse*>(
      ::CheckUserStatusResponse::internal_default_instance());
  ::_UserResponse_default_instance_.connect_ = const_cast< ::ConnectionResponse*>(
      ::ConnectionResponse::internal_default_instance());
  ::_UserResponse_default_instance_.change_password_ = const_cast< ::ChangePasswordResponse*>(
      ::ChangePasswordResponse::internal_default_instance());
  ::_UserResponse_default_instance_.update_ = const_cast< ::UpdateResponse*>(
      ::UpdateResponse::internal_default_instance());
  ::_UserResponse_default_instance_.block_ = const_cast< ::BlockResponse*>(
      ::BlockResponse::internal_default_instance());
  ::_UserResponse_default_instance_.unblock_ = const_cast< ::UnBlockResponse*>(
      ::UnBlockResponse::internal_default_instance());
  ::_UserResponse_default_instance_.block_list_ = const_cast< ::BlockListResponse*>(
      ::BlockListResponse::internal_default_instance());
}
class UserResponse::_Internal {
 public:
  static const ::RegisterResponse& register_(const UserResponse* msg);
  static const ::LoginResponse& login(const UserResponse* msg);
  static const ::ForgotAccountResponse& forgot_account(const UserResponse* msg);
  static const ::CheckUserStatusResponse& check_status(const UserResponse* msg);
  static const ::ConnectionResponse& connect(const UserResponse* msg);
  static const ::ChangePasswordResponse& change_password(const UserResponse* msg);
  static const ::UpdateResponse& update(const UserResponse* msg);
  static const ::BlockResponse& block(const UserResponse* msg);
  static const ::UnBlockResponse& unblock(const UserResponse* msg);
  static const ::BlockListResponse& block_list(const UserResponse* msg);
};

const ::RegisterResponse&
UserResponse::_Internal::register_(const UserResponse* msg) {
  return *msg->MesssageContent_.register__;
}
const ::LoginResponse&
UserResponse::_Internal::login(const UserResponse* msg) {
  return *msg->MesssageContent_.login_;
}
const ::ForgotAccountResponse&
UserResponse::_Internal::forgot_account(const UserResponse* msg) {
  return *msg->MesssageContent_.forgot_account_;
}
const ::CheckUserStatusResponse&
UserResponse::_Internal::check_status(const UserResponse* msg) {
  return *msg->MesssageContent_.check_status_;
}
const ::ConnectionResponse&
UserResponse::_Internal::connect(const UserResponse* msg) {
  return *msg->MesssageContent_.connect_;
}
const ::ChangePasswordResponse&
UserResponse::_Internal::change_password(const UserResponse* msg) {
  return *msg->MesssageContent_.change_password_;
}
const ::UpdateResponse&
UserResponse::_Internal::update(const UserResponse* msg) {
  return *msg->MesssageContent_.update_;
}
const ::BlockResponse&
UserResponse::_Internal::block(const UserResponse* msg) {
  return *msg->MesssageContent_.block_;
}
const ::UnBlockResponse&
UserResponse::_Internal::unblock(const UserResponse* msg) {
  return *msg->MesssageContent_.unblock_;
}
const ::BlockListResponse&
UserResponse::_Internal::block_list(const UserResponse* msg) {
  return *msg->MesssageContent_.block_list_;
}
void UserResponse::set_allocated_register_(::RegisterResponse* register_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (register_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(register_);
    if (message_arena != submessage_arena) {
      register_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    set_has_register_();
    MesssageContent_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.register)
}
void UserResponse::set_allocated_login(::LoginResponse* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login);
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    MesssageContent_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.login)
}
void UserResponse::set_allocated_forgot_account(::ForgotAccountResponse* forgot_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (forgot_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forgot_account);
    if (message_arena != submessage_arena) {
      forgot_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forgot_account, submessage_arena);
    }
    set_has_forgot_account();
    MesssageContent_.forgot_account_ = forgot_account;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.forgot_account)
}
void UserResponse::set_allocated_check_status(::CheckUserStatusResponse* check_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (check_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(check_status);
    if (message_arena != submessage_arena) {
      check_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_status, submessage_arena);
    }
    set_has_check_status();
    MesssageContent_.check_status_ = check_status;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.check_status)
}
void UserResponse::set_allocated_connect(::ConnectionResponse* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connect);
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    MesssageContent_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.connect)
}
void UserResponse::set_allocated_change_password(::ChangePasswordResponse* change_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (change_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change_password);
    if (message_arena != submessage_arena) {
      change_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_password, submessage_arena);
    }
    set_has_change_password();
    MesssageContent_.change_password_ = change_password;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.change_password)
}
void UserResponse::set_allocated_update(::UpdateResponse* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    MesssageContent_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.Update)
}
void UserResponse::set_allocated_block(::BlockResponse* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
    MesssageContent_.block_ = block;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.block)
}
void UserResponse::set_allocated_unblock(::UnBlockResponse* unblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (unblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unblock);
    if (message_arena != submessage_arena) {
      unblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unblock, submessage_arena);
    }
    set_has_unblock();
    MesssageContent_.unblock_ = unblock;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.unblock)
}
void UserResponse::set_allocated_block_list(::BlockListResponse* block_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_MesssageContent();
  if (block_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_list);
    if (message_arena != submessage_arena) {
      block_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_list, submessage_arena);
    }
    set_has_block_list();
    MesssageContent_.block_list_ = block_list;
  }
  // @@protoc_insertion_point(field_set_allocated:UserResponse.block_list)
}
UserResponse::UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserResponse)
}
UserResponse::UserResponse(const UserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_MesssageContent();
  switch (from.MesssageContent_case()) {
    case kRegister: {
      _internal_mutable_register_()->::RegisterResponse::MergeFrom(from._internal_register_());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::LoginResponse::MergeFrom(from._internal_login());
      break;
    }
    case kForgotAccount: {
      _internal_mutable_forgot_account()->::ForgotAccountResponse::MergeFrom(from._internal_forgot_account());
      break;
    }
    case kCheckStatus: {
      _internal_mutable_check_status()->::CheckUserStatusResponse::MergeFrom(from._internal_check_status());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::ConnectionResponse::MergeFrom(from._internal_connect());
      break;
    }
    case kChangePassword: {
      _internal_mutable_change_password()->::ChangePasswordResponse::MergeFrom(from._internal_change_password());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::UpdateResponse::MergeFrom(from._internal_update());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::BlockResponse::MergeFrom(from._internal_block());
      break;
    }
    case kUnblock: {
      _internal_mutable_unblock()->::UnBlockResponse::MergeFrom(from._internal_unblock());
      break;
    }
    case kBlockList: {
      _internal_mutable_block_list()->::BlockListResponse::MergeFrom(from._internal_block_list());
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:UserResponse)
}

void UserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserResponse_server_5fmessages_2eproto.base);
  clear_has_MesssageContent();
}

UserResponse::~UserResponse() {
  // @@protoc_insertion_point(destructor:UserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_MesssageContent()) {
    clear_MesssageContent();
  }
}

void UserResponse::ArenaDtor(void* object) {
  UserResponse* _this = reinterpret_cast< UserResponse* >(object);
  (void)_this;
}
void UserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserResponse& UserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserResponse_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void UserResponse::clear_MesssageContent() {
// @@protoc_insertion_point(one_of_clear_start:UserResponse)
  switch (MesssageContent_case()) {
    case kRegister: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.register__;
      }
      break;
    }
    case kLogin: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.login_;
      }
      break;
    }
    case kForgotAccount: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.forgot_account_;
      }
      break;
    }
    case kCheckStatus: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.check_status_;
      }
      break;
    }
    case kConnect: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.connect_;
      }
      break;
    }
    case kChangePassword: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.change_password_;
      }
      break;
    }
    case kUpdate: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.update_;
      }
      break;
    }
    case kBlock: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.block_;
      }
      break;
    }
    case kUnblock: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.unblock_;
      }
      break;
    }
    case kBlockList: {
      if (GetArena() == nullptr) {
        delete MesssageContent_.block_list_;
      }
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSSAGECONTENT_NOT_SET;
}


void UserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_MesssageContent();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RegisterResponse register = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LoginResponse login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ForgotAccountResponse forgot_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forgot_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CheckUserStatusResponse check_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ConnectionResponse connect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChangePasswordResponse change_password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateResponse Update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BlockResponse block = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UnBlockResponse unblock = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_unblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BlockListResponse block_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RegisterResponse register = 1;
  if (_internal_has_register_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::register_(this), target, stream);
  }

  // .LoginResponse login = 2;
  if (_internal_has_login()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::login(this), target, stream);
  }

  // .ForgotAccountResponse forgot_account = 3;
  if (_internal_has_forgot_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forgot_account(this), target, stream);
  }

  // .CheckUserStatusResponse check_status = 4;
  if (_internal_has_check_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::check_status(this), target, stream);
  }

  // .ConnectionResponse connect = 5;
  if (_internal_has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::connect(this), target, stream);
  }

  // .ChangePasswordResponse change_password = 6;
  if (_internal_has_change_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::change_password(this), target, stream);
  }

  // .UpdateResponse Update = 7;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::update(this), target, stream);
  }

  // .BlockResponse block = 8;
  if (_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::block(this), target, stream);
  }

  // .UnBlockResponse unblock = 9;
  if (_internal_has_unblock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::unblock(this), target, stream);
  }

  // .BlockListResponse block_list = 10;
  if (_internal_has_block_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::block_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserResponse)
  return target;
}

size_t UserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (MesssageContent_case()) {
    // .RegisterResponse register = 1;
    case kRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.register__);
      break;
    }
    // .LoginResponse login = 2;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.login_);
      break;
    }
    // .ForgotAccountResponse forgot_account = 3;
    case kForgotAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.forgot_account_);
      break;
    }
    // .CheckUserStatusResponse check_status = 4;
    case kCheckStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.check_status_);
      break;
    }
    // .ConnectionResponse connect = 5;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.connect_);
      break;
    }
    // .ChangePasswordResponse change_password = 6;
    case kChangePassword: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.change_password_);
      break;
    }
    // .UpdateResponse Update = 7;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.update_);
      break;
    }
    // .BlockResponse block = 8;
    case kBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.block_);
      break;
    }
    // .UnBlockResponse unblock = 9;
    case kUnblock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.unblock_);
      break;
    }
    // .BlockListResponse block_list = 10;
    case kBlockList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MesssageContent_.block_list_);
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserResponse)
    MergeFrom(*source);
  }
}

void UserResponse::MergeFrom(const UserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.MesssageContent_case()) {
    case kRegister: {
      _internal_mutable_register_()->::RegisterResponse::MergeFrom(from._internal_register_());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::LoginResponse::MergeFrom(from._internal_login());
      break;
    }
    case kForgotAccount: {
      _internal_mutable_forgot_account()->::ForgotAccountResponse::MergeFrom(from._internal_forgot_account());
      break;
    }
    case kCheckStatus: {
      _internal_mutable_check_status()->::CheckUserStatusResponse::MergeFrom(from._internal_check_status());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::ConnectionResponse::MergeFrom(from._internal_connect());
      break;
    }
    case kChangePassword: {
      _internal_mutable_change_password()->::ChangePasswordResponse::MergeFrom(from._internal_change_password());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::UpdateResponse::MergeFrom(from._internal_update());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::BlockResponse::MergeFrom(from._internal_block());
      break;
    }
    case kUnblock: {
      _internal_mutable_unblock()->::UnBlockResponse::MergeFrom(from._internal_unblock());
      break;
    }
    case kBlockList: {
      _internal_mutable_block_list()->::BlockListResponse::MergeFrom(from._internal_block_list());
      break;
    }
    case MESSSAGECONTENT_NOT_SET: {
      break;
    }
  }
}

void UserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserResponse::CopyFrom(const UserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResponse::IsInitialized() const {
  return true;
}

void UserResponse::InternalSwap(UserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(MesssageContent_, other->MesssageContent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestMessage::InitAsDefaultInstance() {
  ::_RequestMessage_default_instance_.newhostmachine_ = const_cast< ::NewHostmachineRequest*>(
      ::NewHostmachineRequest::internal_default_instance());
  ::_RequestMessage_default_instance_.user_ = const_cast< ::UserRequest*>(
      ::UserRequest::internal_default_instance());
}
class RequestMessage::_Internal {
 public:
  static const ::NewHostmachineRequest& newhostmachine(const RequestMessage* msg);
  static const ::UserRequest& user(const RequestMessage* msg);
};

const ::NewHostmachineRequest&
RequestMessage::_Internal::newhostmachine(const RequestMessage* msg) {
  return *msg->Message_.newhostmachine_;
}
const ::UserRequest&
RequestMessage::_Internal::user(const RequestMessage* msg) {
  return *msg->Message_.user_;
}
void RequestMessage::set_allocated_newhostmachine(::NewHostmachineRequest* newhostmachine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (newhostmachine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(newhostmachine);
    if (message_arena != submessage_arena) {
      newhostmachine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newhostmachine, submessage_arena);
    }
    set_has_newhostmachine();
    Message_.newhostmachine_ = newhostmachine;
  }
  // @@protoc_insertion_point(field_set_allocated:RequestMessage.NewHostmachine)
}
void RequestMessage::set_allocated_user(::UserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
    Message_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:RequestMessage.User)
}
RequestMessage::RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RequestMessage)
}
RequestMessage::RequestMessage(const RequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_Message();
  switch (from.Message_case()) {
    case kNewHostmachine: {
      _internal_mutable_newhostmachine()->::NewHostmachineRequest::MergeFrom(from._internal_newhostmachine());
      break;
    }
    case kUser: {
      _internal_mutable_user()->::UserRequest::MergeFrom(from._internal_user());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RequestMessage)
}

void RequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestMessage_server_5fmessages_2eproto.base);
  type_ = 0;
  clear_has_Message();
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:RequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void RequestMessage::ArenaDtor(void* object) {
  RequestMessage* _this = reinterpret_cast< RequestMessage* >(object);
  (void)_this;
}
void RequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestMessage& RequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestMessage_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RequestMessage::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:RequestMessage)
  switch (Message_case()) {
    case kNewHostmachine: {
      if (GetArena() == nullptr) {
        delete Message_.newhostmachine_;
      }
      break;
    }
    case kUser: {
      if (GetArena() == nullptr) {
        delete Message_.user_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_Message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .NewHostmachineRequest NewHostmachine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newhostmachine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserRequest User = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .NewHostmachineRequest NewHostmachine = 2;
  if (_internal_has_newhostmachine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newhostmachine(this), target, stream);
  }

  // .UserRequest User = 3;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestMessage)
  return target;
}

size_t RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (Message_case()) {
    // .NewHostmachineRequest NewHostmachine = 2;
    case kNewHostmachine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.newhostmachine_);
      break;
    }
    // .UserRequest User = 3;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.user_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestMessage)
    MergeFrom(*source);
  }
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.Message_case()) {
    case kNewHostmachine: {
      _internal_mutable_newhostmachine()->::NewHostmachineRequest::MergeFrom(from._internal_newhostmachine());
      break;
    }
    case kUser: {
      _internal_mutable_user()->::UserRequest::MergeFrom(from._internal_user());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void RequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  return true;
}

void RequestMessage::InternalSwap(RequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(Message_, other->Message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseMessage::InitAsDefaultInstance() {
  ::_ResponseMessage_default_instance_.newhostmachine_ = const_cast< ::NewHostmachineResponse*>(
      ::NewHostmachineResponse::internal_default_instance());
  ::_ResponseMessage_default_instance_.user_ = const_cast< ::UserResponse*>(
      ::UserResponse::internal_default_instance());
}
class ResponseMessage::_Internal {
 public:
  static const ::NewHostmachineResponse& newhostmachine(const ResponseMessage* msg);
  static const ::UserResponse& user(const ResponseMessage* msg);
};

const ::NewHostmachineResponse&
ResponseMessage::_Internal::newhostmachine(const ResponseMessage* msg) {
  return *msg->Message_.newhostmachine_;
}
const ::UserResponse&
ResponseMessage::_Internal::user(const ResponseMessage* msg) {
  return *msg->Message_.user_;
}
void ResponseMessage::set_allocated_newhostmachine(::NewHostmachineResponse* newhostmachine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (newhostmachine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(newhostmachine);
    if (message_arena != submessage_arena) {
      newhostmachine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newhostmachine, submessage_arena);
    }
    set_has_newhostmachine();
    Message_.newhostmachine_ = newhostmachine;
  }
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.NewHostmachine)
}
void ResponseMessage::set_allocated_user(::UserResponse* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
    Message_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.User)
}
ResponseMessage::ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ResponseMessage)
}
ResponseMessage::ResponseMessage(const ResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_Message();
  switch (from.Message_case()) {
    case kNewHostmachine: {
      _internal_mutable_newhostmachine()->::NewHostmachineResponse::MergeFrom(from._internal_newhostmachine());
      break;
    }
    case kUser: {
      _internal_mutable_user()->::UserResponse::MergeFrom(from._internal_user());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ResponseMessage)
}

void ResponseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseMessage_server_5fmessages_2eproto.base);
  type_ = 0;
  clear_has_Message();
}

ResponseMessage::~ResponseMessage() {
  // @@protoc_insertion_point(destructor:ResponseMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void ResponseMessage::ArenaDtor(void* object) {
  ResponseMessage* _this = reinterpret_cast< ResponseMessage* >(object);
  (void)_this;
}
void ResponseMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseMessage& ResponseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseMessage_server_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void ResponseMessage::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:ResponseMessage)
  switch (Message_case()) {
    case kNewHostmachine: {
      if (GetArena() == nullptr) {
        delete Message_.newhostmachine_;
      }
      break;
    }
    case kUser: {
      if (GetArena() == nullptr) {
        delete Message_.user_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_Message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .NewHostmachineResponse NewHostmachine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newhostmachine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserResponse User = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .NewHostmachineResponse NewHostmachine = 2;
  if (_internal_has_newhostmachine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newhostmachine(this), target, stream);
  }

  // .UserResponse User = 3;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponseMessage)
  return target;
}

size_t ResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResponseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (Message_case()) {
    // .NewHostmachineResponse NewHostmachine = 2;
    case kNewHostmachine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.newhostmachine_);
      break;
    }
    // .UserResponse User = 3;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.user_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResponseMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResponseMessage)
    MergeFrom(*source);
  }
}

void ResponseMessage::MergeFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.Message_case()) {
    case kNewHostmachine: {
      _internal_mutable_newhostmachine()->::NewHostmachineResponse::MergeFrom(from._internal_newhostmachine());
      break;
    }
    case kUser: {
      _internal_mutable_user()->::UserResponse::MergeFrom(from._internal_user());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ResponseMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseMessage::CopyFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMessage::IsInitialized() const {
  return true;
}

void ResponseMessage::InternalSwap(ResponseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(Message_, other->Message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NewHostmachineRequest* Arena::CreateMaybeMessage< ::NewHostmachineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewHostmachineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NewHostmachineResponse* Arena::CreateMaybeMessage< ::NewHostmachineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewHostmachineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterRequest* Arena::CreateMaybeMessage< ::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterResponse* Arena::CreateMaybeMessage< ::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginRequest* Arena::CreateMaybeMessage< ::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginResponse* Arena::CreateMaybeMessage< ::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ForgotAccountRequest* Arena::CreateMaybeMessage< ::ForgotAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ForgotAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ForgotAccountResponse* Arena::CreateMaybeMessage< ::ForgotAccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ForgotAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CheckUserStatusRequest* Arena::CreateMaybeMessage< ::CheckUserStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CheckUserStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CheckUserStatusResponse* Arena::CreateMaybeMessage< ::CheckUserStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CheckUserStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectionRequest* Arena::CreateMaybeMessage< ::ConnectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectionResponse* Arena::CreateMaybeMessage< ::ConnectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChangePasswordRequest* Arena::CreateMaybeMessage< ::ChangePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChangePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChangePasswordResponse* Arena::CreateMaybeMessage< ::ChangePasswordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChangePasswordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateRequest* Arena::CreateMaybeMessage< ::UpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateResponse* Arena::CreateMaybeMessage< ::UpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockRequest* Arena::CreateMaybeMessage< ::BlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockResponse* Arena::CreateMaybeMessage< ::BlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UnBlockRequest* Arena::CreateMaybeMessage< ::UnBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UnBlockResponse* Arena::CreateMaybeMessage< ::UnBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockListRequest* Arena::CreateMaybeMessage< ::BlockListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockListResponse* Arena::CreateMaybeMessage< ::BlockListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserRequest* Arena::CreateMaybeMessage< ::UserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserResponse* Arena::CreateMaybeMessage< ::UserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestMessage* Arena::CreateMaybeMessage< ::RequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ResponseMessage* Arena::CreateMaybeMessage< ::ResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResponseMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
